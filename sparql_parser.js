sparql_parser = (function(){
  /* Generated by PEG.js (http://pegjs.majda.cz/). */

  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.grammarParser.SyntaxError| describing the error.
     */
    parse: function(input) {
      var pos = 0;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};

      function padLeft(input, padding, length) {
        var result = input;

        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }

        return result;
      }

      function escape(ch) {
        var charCode = ch.charCodeAt(0);

        if (charCode <= 0xFF) {
          var escapeChar = 'x';
          var length = 2;
        } else {
          var escapeChar = 'u';
          var length = 4;
        }

        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }

      function quoteString(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')        // backslash
          .replace(/"/g, '\\"')          // closing quote character
          .replace(/\r/g, '\\r')         // carriage return
          .replace(/\u2028/g, '\\u2028') // line separator
          .replace(/\u2029/g, '\\u2029') // paragraph separator
          .replace(/\n/g, '\\n')         // line feed
          .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
          + '"';
      }

      function arrayContains(array, value) {
        /*
         * Stupid IE does not have Array.prototype.indexOf, otherwise this
         * function would be a one-liner.
         */
        var length = array.length;
        for (var i = 0; i < length; i++) {
          if (array[i] === value) {
            return true;
          }
        }
        return false;
      }

      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }

        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }

        if (!arrayContains(rightmostMatchFailuresExpected, failure)) {
          rightmostMatchFailuresExpected.push(failure);
        }
      }

      function parse_SPARQL(context) {
        var cacheKey = "SPARQL" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result2 = parse_Query(context);
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_Update(context);
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Query(context) {
        var cacheKey = "Query" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = parse_Prologue(context);
        if (result2 !== null) {
          var result7 = parse_SelectQuery(context);
          if (result7 !== null) {
            var result3 = result7;
          } else {
            var result6 = parse_ConstructQuery(context);
            if (result6 !== null) {
              var result3 = result6;
            } else {
              var result5 = parse_DescribeQuery(context);
              if (result5 !== null) {
                var result3 = result5;
              } else {
                var result4 = parse_AskQuery(context);
                if (result4 !== null) {
                  var result3 = result4;
                } else {
                  var result3 = null;;
                };
              };
            };
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(p, q) {
                return {token: 'query',
                        kind: 'query',
                        prologue: p,
                        units: [q]};
          })(result1[0], result1[1])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[2] Query");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Prologue(context) {
        var cacheKey = "Prologue" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        var result7 = parse_BaseDecl(context);
        var result2 = result7 !== null ? result7 : '';
        if (result2 !== null) {
          var result3 = [];
          var result6 = parse_WS(context);
          while (result6 !== null) {
            result3.push(result6);
            var result6 = parse_WS(context);
          }
          if (result3 !== null) {
            var result4 = [];
            var result5 = parse_PrefixDecl(context);
            while (result5 !== null) {
              result4.push(result5);
              var result5 = parse_PrefixDecl(context);
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(b, pfx) {
                return { token: 'prologue',
                         base: b,
                         prefixes: pfx }
          })(result1[0], result1[2])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[3] Prologue");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_BaseDecl(context) {
        var cacheKey = "BaseDecl" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = [];
        var result7 = parse_WS(context);
        while (result7 !== null) {
          result2.push(result7);
          var result7 = parse_WS(context);
        }
        if (result2 !== null) {
          if (input.substr(pos, 4) === "BASE") {
            var result3 = "BASE";
            pos += 4;
          } else {
            var result3 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("BASE"));
            }
          }
          if (result3 !== null) {
            var result4 = [];
            var result6 = parse_WS(context);
            while (result6 !== null) {
              result4.push(result6);
              var result6 = parse_WS(context);
            }
            if (result4 !== null) {
              var result5 = parse_IRI_REF(context);
              if (result5 !== null) {
                var result1 = [result2, result3, result4, result5];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(i) {
                registerDefaultPrefix(i);

                base = {};
                base.token = 'base';
                base.value = i;

                return base;
          })(result1[3])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[4] BaseDecl");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_PrefixDecl(context) {
        var cacheKey = "PrefixDecl" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = [];
        var result10 = parse_WS(context);
        while (result10 !== null) {
          result2.push(result10);
          var result10 = parse_WS(context);
        }
        if (result2 !== null) {
          if (input.substr(pos, 6) === "PREFIX") {
            var result3 = "PREFIX";
            pos += 6;
          } else {
            var result3 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("PREFIX"));
            }
          }
          if (result3 !== null) {
            var result4 = [];
            var result9 = parse_WS(context);
            while (result9 !== null) {
              result4.push(result9);
              var result9 = parse_WS(context);
            }
            if (result4 !== null) {
              var result5 = parse_PNAME_NS(context);
              if (result5 !== null) {
                var result6 = [];
                var result8 = parse_WS(context);
                while (result8 !== null) {
                  result6.push(result8);
                  var result8 = parse_WS(context);
                }
                if (result6 !== null) {
                  var result7 = parse_IRI_REF(context);
                  if (result7 !== null) {
                    var result1 = [result2, result3, result4, result5, result6, result7];
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(p, l) {

                registerPrefix(p,l);

                prefix = {};
                prefix.token = 'prefix';
                prefix.prefix = p;
                prefix.local = l;

                return prefix;
          })(result1[3], result1[5])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[5] PrefixDecl");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_SelectQuery(context) {
        var cacheKey = "SelectQuery" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = parse_SelectClause(context);
        if (result2 !== null) {
          var result3 = [];
          var result15 = parse_WS(context);
          while (result15 !== null) {
            result3.push(result15);
            var result15 = parse_WS(context);
          }
          if (result3 !== null) {
            var result4 = [];
            var result14 = parse_DatasetClause(context);
            while (result14 !== null) {
              result4.push(result14);
              var result14 = parse_DatasetClause(context);
            }
            if (result4 !== null) {
              var result5 = [];
              var result13 = parse_WS(context);
              while (result13 !== null) {
                result5.push(result13);
                var result13 = parse_WS(context);
              }
              if (result5 !== null) {
                var result6 = parse_WhereClause(context);
                if (result6 !== null) {
                  var result7 = [];
                  var result12 = parse_WS(context);
                  while (result12 !== null) {
                    result7.push(result12);
                    var result12 = parse_WS(context);
                  }
                  if (result7 !== null) {
                    var result8 = parse_SolutionModifier(context);
                    if (result8 !== null) {
                      var result9 = [];
                      var result11 = parse_WS(context);
                      while (result11 !== null) {
                        result9.push(result11);
                        var result11 = parse_WS(context);
                      }
                      if (result9 !== null) {
                        var result10 = parse_BindingsClause(context);
                        if (result10 !== null) {
                          var result1 = [result2, result3, result4, result5, result6, result7, result8, result9, result10];
                        } else {
                          var result1 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(s, d, w) {
                var query = {};
                query.kind = 'select';
                query.token = 'executableunit'
                query.dataset = d;
                query.projection = s;
                query.pattern = w

                return query
          })(result1[0], result1[2], result1[4])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[6] SelectQuery");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_SubSelect(context) {
        var cacheKey = "SubSelect" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        var result1 = parse_SelectClause(context);
        if (result1 !== null) {
          var result2 = parse_WhereClause(context);
          if (result2 !== null) {
            var result3 = parse_SolutionModifier(context);
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[7] SubSelect");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_SelectClause(context) {
        var cacheKey = "SelectClause" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = [];
        var result45 = parse_WS(context);
        while (result45 !== null) {
          result2.push(result45);
          var result45 = parse_WS(context);
        }
        if (result2 !== null) {
          if (input.substr(pos, 6) === "SELECT") {
            var result3 = "SELECT";
            pos += 6;
          } else {
            var result3 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("SELECT"));
            }
          }
          if (result3 !== null) {
            var result4 = [];
            var result44 = parse_WS(context);
            while (result44 !== null) {
              result4.push(result44);
              var result44 = parse_WS(context);
            }
            if (result4 !== null) {
              if (input.substr(pos, 8) === "DISTINCT") {
                var result43 = "DISTINCT";
                pos += 8;
              } else {
                var result43 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("DISTINCT"));
                }
              }
              if (result43 !== null) {
                var result41 = result43;
              } else {
                if (input.substr(pos, 7) === "REDUCED") {
                  var result42 = "REDUCED";
                  pos += 7;
                } else {
                  var result42 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString("REDUCED"));
                  }
                }
                if (result42 !== null) {
                  var result41 = result42;
                } else {
                  var result41 = null;;
                };
              }
              var result5 = result41 !== null ? result41 : '';
              if (result5 !== null) {
                var result6 = [];
                var result40 = parse_WS(context);
                while (result40 !== null) {
                  result6.push(result40);
                  var result40 = parse_WS(context);
                }
                if (result6 !== null) {
                  var savedPos3 = pos;
                  var result35 = [];
                  var result39 = parse_WS(context);
                  while (result39 !== null) {
                    result35.push(result39);
                    var result39 = parse_WS(context);
                  }
                  if (result35 !== null) {
                    var result36 = parse_Var(context);
                    if (result36 !== null) {
                      var result37 = [];
                      var result38 = parse_WS(context);
                      while (result38 !== null) {
                        result37.push(result38);
                        var result38 = parse_WS(context);
                      }
                      if (result37 !== null) {
                        var result34 = [result35, result36, result37];
                      } else {
                        var result34 = null;
                        pos = savedPos3;
                      }
                    } else {
                      var result34 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result34 = null;
                    pos = savedPos3;
                  }
                  if (result34 !== null) {
                    var result15 = result34;
                  } else {
                    var savedPos2 = pos;
                    var result17 = [];
                    var result33 = parse_WS(context);
                    while (result33 !== null) {
                      result17.push(result33);
                      var result33 = parse_WS(context);
                    }
                    if (result17 !== null) {
                      if (input.substr(pos, 1) === "(") {
                        var result18 = "(";
                        pos += 1;
                      } else {
                        var result18 = null;
                        if (context.reportMatchFailures) {
                          matchFailed(quoteString("("));
                        }
                      }
                      if (result18 !== null) {
                        var result19 = [];
                        var result32 = parse_WS(context);
                        while (result32 !== null) {
                          result19.push(result32);
                          var result32 = parse_WS(context);
                        }
                        if (result19 !== null) {
                          var result20 = parse_ConditionalOrExpression(context);
                          if (result20 !== null) {
                            var result21 = [];
                            var result31 = parse_WS(context);
                            while (result31 !== null) {
                              result21.push(result31);
                              var result31 = parse_WS(context);
                            }
                            if (result21 !== null) {
                              if (input.substr(pos, 2) === "AS") {
                                var result22 = "AS";
                                pos += 2;
                              } else {
                                var result22 = null;
                                if (context.reportMatchFailures) {
                                  matchFailed(quoteString("AS"));
                                }
                              }
                              if (result22 !== null) {
                                var result23 = [];
                                var result30 = parse_WS(context);
                                while (result30 !== null) {
                                  result23.push(result30);
                                  var result30 = parse_WS(context);
                                }
                                if (result23 !== null) {
                                  var result24 = parse_Var(context);
                                  if (result24 !== null) {
                                    var result25 = [];
                                    var result29 = parse_WS(context);
                                    while (result29 !== null) {
                                      result25.push(result29);
                                      var result29 = parse_WS(context);
                                    }
                                    if (result25 !== null) {
                                      if (input.substr(pos, 1) === ")") {
                                        var result26 = ")";
                                        pos += 1;
                                      } else {
                                        var result26 = null;
                                        if (context.reportMatchFailures) {
                                          matchFailed(quoteString(")"));
                                        }
                                      }
                                      if (result26 !== null) {
                                        var result27 = [];
                                        var result28 = parse_WS(context);
                                        while (result28 !== null) {
                                          result27.push(result28);
                                          var result28 = parse_WS(context);
                                        }
                                        if (result27 !== null) {
                                          var result16 = [result17, result18, result19, result20, result21, result22, result23, result24, result25, result26, result27];
                                        } else {
                                          var result16 = null;
                                          pos = savedPos2;
                                        }
                                      } else {
                                        var result16 = null;
                                        pos = savedPos2;
                                      }
                                    } else {
                                      var result16 = null;
                                      pos = savedPos2;
                                    }
                                  } else {
                                    var result16 = null;
                                    pos = savedPos2;
                                  }
                                } else {
                                  var result16 = null;
                                  pos = savedPos2;
                                }
                              } else {
                                var result16 = null;
                                pos = savedPos2;
                              }
                            } else {
                              var result16 = null;
                              pos = savedPos2;
                            }
                          } else {
                            var result16 = null;
                            pos = savedPos2;
                          }
                        } else {
                          var result16 = null;
                          pos = savedPos2;
                        }
                      } else {
                        var result16 = null;
                        pos = savedPos2;
                      }
                    } else {
                      var result16 = null;
                      pos = savedPos2;
                    }
                    if (result16 !== null) {
                      var result15 = result16;
                    } else {
                      var result15 = null;;
                    };
                  }
                  if (result15 !== null) {
                    var result14 = [];
                    while (result15 !== null) {
                      result14.push(result15);
                      var savedPos3 = pos;
                      var result35 = [];
                      var result39 = parse_WS(context);
                      while (result39 !== null) {
                        result35.push(result39);
                        var result39 = parse_WS(context);
                      }
                      if (result35 !== null) {
                        var result36 = parse_Var(context);
                        if (result36 !== null) {
                          var result37 = [];
                          var result38 = parse_WS(context);
                          while (result38 !== null) {
                            result37.push(result38);
                            var result38 = parse_WS(context);
                          }
                          if (result37 !== null) {
                            var result34 = [result35, result36, result37];
                          } else {
                            var result34 = null;
                            pos = savedPos3;
                          }
                        } else {
                          var result34 = null;
                          pos = savedPos3;
                        }
                      } else {
                        var result34 = null;
                        pos = savedPos3;
                      }
                      if (result34 !== null) {
                        var result15 = result34;
                      } else {
                        var savedPos2 = pos;
                        var result17 = [];
                        var result33 = parse_WS(context);
                        while (result33 !== null) {
                          result17.push(result33);
                          var result33 = parse_WS(context);
                        }
                        if (result17 !== null) {
                          if (input.substr(pos, 1) === "(") {
                            var result18 = "(";
                            pos += 1;
                          } else {
                            var result18 = null;
                            if (context.reportMatchFailures) {
                              matchFailed(quoteString("("));
                            }
                          }
                          if (result18 !== null) {
                            var result19 = [];
                            var result32 = parse_WS(context);
                            while (result32 !== null) {
                              result19.push(result32);
                              var result32 = parse_WS(context);
                            }
                            if (result19 !== null) {
                              var result20 = parse_ConditionalOrExpression(context);
                              if (result20 !== null) {
                                var result21 = [];
                                var result31 = parse_WS(context);
                                while (result31 !== null) {
                                  result21.push(result31);
                                  var result31 = parse_WS(context);
                                }
                                if (result21 !== null) {
                                  if (input.substr(pos, 2) === "AS") {
                                    var result22 = "AS";
                                    pos += 2;
                                  } else {
                                    var result22 = null;
                                    if (context.reportMatchFailures) {
                                      matchFailed(quoteString("AS"));
                                    }
                                  }
                                  if (result22 !== null) {
                                    var result23 = [];
                                    var result30 = parse_WS(context);
                                    while (result30 !== null) {
                                      result23.push(result30);
                                      var result30 = parse_WS(context);
                                    }
                                    if (result23 !== null) {
                                      var result24 = parse_Var(context);
                                      if (result24 !== null) {
                                        var result25 = [];
                                        var result29 = parse_WS(context);
                                        while (result29 !== null) {
                                          result25.push(result29);
                                          var result29 = parse_WS(context);
                                        }
                                        if (result25 !== null) {
                                          if (input.substr(pos, 1) === ")") {
                                            var result26 = ")";
                                            pos += 1;
                                          } else {
                                            var result26 = null;
                                            if (context.reportMatchFailures) {
                                              matchFailed(quoteString(")"));
                                            }
                                          }
                                          if (result26 !== null) {
                                            var result27 = [];
                                            var result28 = parse_WS(context);
                                            while (result28 !== null) {
                                              result27.push(result28);
                                              var result28 = parse_WS(context);
                                            }
                                            if (result27 !== null) {
                                              var result16 = [result17, result18, result19, result20, result21, result22, result23, result24, result25, result26, result27];
                                            } else {
                                              var result16 = null;
                                              pos = savedPos2;
                                            }
                                          } else {
                                            var result16 = null;
                                            pos = savedPos2;
                                          }
                                        } else {
                                          var result16 = null;
                                          pos = savedPos2;
                                        }
                                      } else {
                                        var result16 = null;
                                        pos = savedPos2;
                                      }
                                    } else {
                                      var result16 = null;
                                      pos = savedPos2;
                                    }
                                  } else {
                                    var result16 = null;
                                    pos = savedPos2;
                                  }
                                } else {
                                  var result16 = null;
                                  pos = savedPos2;
                                }
                              } else {
                                var result16 = null;
                                pos = savedPos2;
                              }
                            } else {
                              var result16 = null;
                              pos = savedPos2;
                            }
                          } else {
                            var result16 = null;
                            pos = savedPos2;
                          }
                        } else {
                          var result16 = null;
                          pos = savedPos2;
                        }
                        if (result16 !== null) {
                          var result15 = result16;
                        } else {
                          var result15 = null;;
                        };
                      }
                    }
                  } else {
                    var result14 = null;
                  }
                  if (result14 !== null) {
                    var result7 = result14;
                  } else {
                    var savedPos1 = pos;
                    var result9 = [];
                    var result13 = parse_WS(context);
                    while (result13 !== null) {
                      result9.push(result13);
                      var result13 = parse_WS(context);
                    }
                    if (result9 !== null) {
                      if (input.substr(pos, 1) === "*") {
                        var result10 = "*";
                        pos += 1;
                      } else {
                        var result10 = null;
                        if (context.reportMatchFailures) {
                          matchFailed(quoteString("*"));
                        }
                      }
                      if (result10 !== null) {
                        var result11 = [];
                        var result12 = parse_WS(context);
                        while (result12 !== null) {
                          result11.push(result12);
                          var result12 = parse_WS(context);
                        }
                        if (result11 !== null) {
                          var result8 = [result9, result10, result11];
                        } else {
                          var result8 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result8 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result8 = null;
                      pos = savedPos1;
                    }
                    if (result8 !== null) {
                      var result7 = result8;
                    } else {
                      var result7 = null;;
                    };
                  }
                  if (result7 !== null) {
                    var result1 = [result2, result3, result4, result5, result6, result7];
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(mod, proj) {
               var vars = [];
                if(proj.length === 3 && proj[1]==="*") {
                    return [{token: 'variable', kind:'*'}];
                }

                for(var i=0; i< proj.length; i++) {
                    var aVar = proj[i];

                    if(aVar.length === 3) {
                        vars.push({token: 'variable', kind:'var', value:aVar[1]});
                    } else {
                        vars.push({token: 'variable', kind:'aliased', expression: aVar[3], alias:aVar[7]})
                    }
                }

                return vars;
          })(result1[3], result1[5])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[8] SelectClause");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_ConstructQuery(context) {
        var cacheKey = "ConstructQuery" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 9) === "CONSTRUCT") {
          var result1 = "CONSTRUCT";
          pos += 9;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("CONSTRUCT"));
          }
        }
        if (result1 !== null) {
          var result2 = parse_ConstructTemplate(context);
          if (result2 !== null) {
            var result3 = [];
            var result6 = parse_DatasetClause(context);
            while (result6 !== null) {
              result3.push(result6);
              var result6 = parse_DatasetClause(context);
            }
            if (result3 !== null) {
              var result4 = parse_WhereClause(context);
              if (result4 !== null) {
                var result5 = parse_SolutionModifier(context);
                if (result5 !== null) {
                  var result0 = [result1, result2, result3, result4, result5];
                } else {
                  var result0 = null;
                  pos = savedPos0;
                }
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[9] ConstructQuery");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_DescribeQuery(context) {
        var cacheKey = "DescribeQuery" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 8) === "DESCRIBE") {
          var result1 = "DESCRIBE";
          pos += 8;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("DESCRIBE"));
          }
        }
        if (result1 !== null) {
          var result10 = parse_VarOrIRIref(context);
          if (result10 !== null) {
            var result9 = [];
            while (result10 !== null) {
              result9.push(result10);
              var result10 = parse_VarOrIRIref(context);
            }
          } else {
            var result9 = null;
          }
          if (result9 !== null) {
            var result2 = result9;
          } else {
            if (input.substr(pos, 1) === "*") {
              var result8 = "*";
              pos += 1;
            } else {
              var result8 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("*"));
              }
            }
            if (result8 !== null) {
              var result2 = result8;
            } else {
              var result2 = null;;
            };
          }
          if (result2 !== null) {
            var result3 = [];
            var result7 = parse_DatasetClause(context);
            while (result7 !== null) {
              result3.push(result7);
              var result7 = parse_DatasetClause(context);
            }
            if (result3 !== null) {
              var result6 = parse_WhereClause(context);
              var result4 = result6 !== null ? result6 : '';
              if (result4 !== null) {
                var result5 = parse_SolutionModifier(context);
                if (result5 !== null) {
                  var result0 = [result1, result2, result3, result4, result5];
                } else {
                  var result0 = null;
                  pos = savedPos0;
                }
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[10] DescribeQuery");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_AskQuery(context) {
        var cacheKey = "AskQuery" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 3) === "ASK") {
          var result1 = "ASK";
          pos += 3;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("ASK"));
          }
        }
        if (result1 !== null) {
          var result2 = [];
          var result4 = parse_DatasetClause(context);
          while (result4 !== null) {
            result2.push(result4);
            var result4 = parse_DatasetClause(context);
          }
          if (result2 !== null) {
            var result3 = parse_WhereClause(context);
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[11] AskQuery");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_DatasetClause(context) {
        var cacheKey = "DatasetClause" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 4) === "FROM") {
          var result2 = "FROM";
          pos += 4;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("FROM"));
          }
        }
        if (result2 !== null) {
          var result3 = [];
          var result7 = parse_WS(context);
          while (result7 !== null) {
            result3.push(result7);
            var result7 = parse_WS(context);
          }
          if (result3 !== null) {
            var result6 = parse_IRIref(context);
            if (result6 !== null) {
              var result4 = result6;
            } else {
              var result5 = parse_NamedGraphClause(context);
              if (result5 !== null) {
                var result4 = result5;
              } else {
                var result4 = null;;
              };
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(g) {
                return g[0];
          })(result1[2])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[12] DatasetClause");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_NamedGraphClause(context) {
        var cacheKey = "NamedGraphClause" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 5) === "NAMED") {
          var result1 = "NAMED";
          pos += 5;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("NAMED"));
          }
        }
        if (result1 !== null) {
          var result2 = parse_IRIref(context);
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[14] NamedGraphClause");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_WhereClause(context) {
        var cacheKey = "WhereClause" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 5) === "WHERE") {
          var result8 = "WHERE";
          pos += 5;
        } else {
          var result8 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("WHERE"));
          }
        }
        var result2 = result8 !== null ? result8 : '';
        if (result2 !== null) {
          var result3 = [];
          var result7 = parse_WS(context);
          while (result7 !== null) {
            result3.push(result7);
            var result7 = parse_WS(context);
          }
          if (result3 !== null) {
            var result4 = parse_GroupGraphPattern(context);
            if (result4 !== null) {
              var result5 = [];
              var result6 = parse_WS(context);
              while (result6 !== null) {
                result5.push(result6);
                var result6 = parse_WS(context);
              }
              if (result5 !== null) {
                var result1 = [result2, result3, result4, result5];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(g) {
                return g;
          })(result1[2])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[16] WhereClause");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_SolutionModifier(context) {
        var cacheKey = "SolutionModifier" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        var result8 = parse_GroupClause(context);
        var result1 = result8 !== null ? result8 : '';
        if (result1 !== null) {
          var result7 = parse_HavingClause(context);
          var result2 = result7 !== null ? result7 : '';
          if (result2 !== null) {
            var result6 = parse_OrderClause(context);
            var result3 = result6 !== null ? result6 : '';
            if (result3 !== null) {
              var result5 = parse_LimitOffsetClauses(context);
              var result4 = result5 !== null ? result5 : '';
              if (result4 !== null) {
                var result0 = [result1, result2, result3, result4];
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[17] SolutionModifier");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_GroupClause(context) {
        var cacheKey = "GroupClause" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 5) === "GROUP") {
          var result1 = "GROUP";
          pos += 5;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("GROUP"));
          }
        }
        if (result1 !== null) {
          if (input.substr(pos, 2) === "BY") {
            var result2 = "BY";
            pos += 2;
          } else {
            var result2 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("BY"));
            }
          }
          if (result2 !== null) {
            var result4 = parse_GroupCondition(context);
            if (result4 !== null) {
              var result3 = [];
              while (result4 !== null) {
                result3.push(result4);
                var result4 = parse_GroupCondition(context);
              }
            } else {
              var result3 = null;
            }
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[18] GroupClause");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_GroupCondition(context) {
        var cacheKey = "GroupCondition" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var result11 = parse_BuiltInCall(context);
        if (result11 !== null) {
          var result0 = result11;
        } else {
          var result10 = parse_FunctionCall(context);
          if (result10 !== null) {
            var result0 = result10;
          } else {
            var savedPos0 = pos;
            if (input.substr(pos, 1) === "(") {
              var result3 = "(";
              pos += 1;
            } else {
              var result3 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("("));
              }
            }
            if (result3 !== null) {
              var result4 = parse_ConditionalOrExpression(context);
              if (result4 !== null) {
                var savedPos1 = pos;
                if (input.substr(pos, 2) === "AS") {
                  var result8 = "AS";
                  pos += 2;
                } else {
                  var result8 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString("AS"));
                  }
                }
                if (result8 !== null) {
                  var result9 = parse_Var(context);
                  if (result9 !== null) {
                    var result7 = [result8, result9];
                  } else {
                    var result7 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result7 = null;
                  pos = savedPos1;
                }
                var result5 = result7 !== null ? result7 : '';
                if (result5 !== null) {
                  if (input.substr(pos, 1) === ")") {
                    var result6 = ")";
                    pos += 1;
                  } else {
                    var result6 = null;
                    if (context.reportMatchFailures) {
                      matchFailed(quoteString(")"));
                    }
                  }
                  if (result6 !== null) {
                    var result2 = [result3, result4, result5, result6];
                  } else {
                    var result2 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos0;
                }
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
            if (result2 !== null) {
              var result0 = result2;
            } else {
              var result1 = parse_Var(context);
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[19] GroupCondition");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_HavingClause(context) {
        var cacheKey = "HavingClause" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 6) === "HAVING") {
          var result1 = "HAVING";
          pos += 6;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("HAVING"));
          }
        }
        if (result1 !== null) {
          var result3 = parse_Constraint(context);
          if (result3 !== null) {
            var result2 = [];
            while (result3 !== null) {
              result2.push(result3);
              var result3 = parse_Constraint(context);
            }
          } else {
            var result2 = null;
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[20] HavingClause");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_OrderClause(context) {
        var cacheKey = "OrderClause" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 5) === "ORDER") {
          var result1 = "ORDER";
          pos += 5;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("ORDER"));
          }
        }
        if (result1 !== null) {
          if (input.substr(pos, 2) === "BY") {
            var result2 = "BY";
            pos += 2;
          } else {
            var result2 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("BY"));
            }
          }
          if (result2 !== null) {
            var result4 = parse_OrderCondition(context);
            if (result4 !== null) {
              var result3 = [];
              while (result4 !== null) {
                result3.push(result4);
                var result4 = parse_OrderCondition(context);
              }
            } else {
              var result3 = null;
            }
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[22] OrderClause");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_OrderCondition(context) {
        var cacheKey = "OrderCondition" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 3) === "ASC") {
          var result8 = "ASC";
          pos += 3;
        } else {
          var result8 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("ASC"));
          }
        }
        if (result8 !== null) {
          var result5 = result8;
        } else {
          if (input.substr(pos, 4) === "DESC") {
            var result7 = "DESC";
            pos += 4;
          } else {
            var result7 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("DESC"));
            }
          }
          if (result7 !== null) {
            var result5 = result7;
          } else {
            var result5 = null;;
          };
        }
        if (result5 !== null) {
          var result6 = parse_BrackettedExpression(context);
          if (result6 !== null) {
            var result4 = [result5, result6];
          } else {
            var result4 = null;
            pos = savedPos0;
          }
        } else {
          var result4 = null;
          pos = savedPos0;
        }
        if (result4 !== null) {
          var result0 = result4;
        } else {
          var result3 = parse_Constraint(context);
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result2 = parse_Var(context);
            if (result2 !== null) {
              var result1 = result2;
            } else {
              var result1 = null;;
            };
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[23] OrderCondition");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_LimitOffsetClauses(context) {
        var cacheKey = "LimitOffsetClauses" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos1 = pos;
        var result6 = parse_LimitClause(context);
        if (result6 !== null) {
          var result8 = parse_OffsetClause(context);
          var result7 = result8 !== null ? result8 : '';
          if (result7 !== null) {
            var result5 = [result6, result7];
          } else {
            var result5 = null;
            pos = savedPos1;
          }
        } else {
          var result5 = null;
          pos = savedPos1;
        }
        if (result5 !== null) {
          var result0 = result5;
        } else {
          var savedPos0 = pos;
          var result2 = parse_OffsetClause(context);
          if (result2 !== null) {
            var result4 = parse_LimitClause(context);
            var result3 = result4 !== null ? result4 : '';
            if (result3 !== null) {
              var result1 = [result2, result3];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[24] LimitOffsetClauses");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_LimitClause(context) {
        var cacheKey = "LimitClause" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 5) === "LIMIT") {
          var result1 = "LIMIT";
          pos += 5;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("LIMIT"));
          }
        }
        if (result1 !== null) {
          var result2 = parse_INTEGER(context);
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[25] LimitClause");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_OffsetClause(context) {
        var cacheKey = "OffsetClause" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 6) === "OFFSET") {
          var result1 = "OFFSET";
          pos += 6;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("OFFSET"));
          }
        }
        if (result1 !== null) {
          var result2 = parse_INTEGER(context);
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[26] OffsetClause");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_BindingsClause(context) {
        var cacheKey = "BindingsClause" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 8) === "BINDINGS") {
          var result2 = "BINDINGS";
          pos += 8;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("BINDINGS"));
          }
        }
        if (result2 !== null) {
          var result3 = [];
          var result14 = parse_Var(context);
          while (result14 !== null) {
            result3.push(result14);
            var result14 = parse_Var(context);
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === "{") {
              var result4 = "{";
              pos += 1;
            } else {
              var result4 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("{"));
              }
            }
            if (result4 !== null) {
              var result5 = [];
              var savedPos1 = pos;
              if (input.substr(pos, 1) === "(") {
                var result10 = "(";
                pos += 1;
              } else {
                var result10 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("("));
                }
              }
              if (result10 !== null) {
                var result13 = parse_BindingValue(context);
                if (result13 !== null) {
                  var result11 = [];
                  while (result13 !== null) {
                    result11.push(result13);
                    var result13 = parse_BindingValue(context);
                  }
                } else {
                  var result11 = null;
                }
                if (result11 !== null) {
                  if (input.substr(pos, 1) === ")") {
                    var result12 = ")";
                    pos += 1;
                  } else {
                    var result12 = null;
                    if (context.reportMatchFailures) {
                      matchFailed(quoteString(")"));
                    }
                  }
                  if (result12 !== null) {
                    var result9 = [result10, result11, result12];
                  } else {
                    var result9 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result9 = null;
                  pos = savedPos1;
                }
              } else {
                var result9 = null;
                pos = savedPos1;
              }
              if (result9 !== null) {
                var result7 = result9;
              } else {
                var result8 = parse_NIL(context);
                if (result8 !== null) {
                  var result7 = result8;
                } else {
                  var result7 = null;;
                };
              }
              while (result7 !== null) {
                result5.push(result7);
                var savedPos1 = pos;
                if (input.substr(pos, 1) === "(") {
                  var result10 = "(";
                  pos += 1;
                } else {
                  var result10 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString("("));
                  }
                }
                if (result10 !== null) {
                  var result13 = parse_BindingValue(context);
                  if (result13 !== null) {
                    var result11 = [];
                    while (result13 !== null) {
                      result11.push(result13);
                      var result13 = parse_BindingValue(context);
                    }
                  } else {
                    var result11 = null;
                  }
                  if (result11 !== null) {
                    if (input.substr(pos, 1) === ")") {
                      var result12 = ")";
                      pos += 1;
                    } else {
                      var result12 = null;
                      if (context.reportMatchFailures) {
                        matchFailed(quoteString(")"));
                      }
                    }
                    if (result12 !== null) {
                      var result9 = [result10, result11, result12];
                    } else {
                      var result9 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result9 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result9 = null;
                  pos = savedPos1;
                }
                if (result9 !== null) {
                  var result7 = result9;
                } else {
                  var result8 = parse_NIL(context);
                  if (result8 !== null) {
                    var result7 = result8;
                  } else {
                    var result7 = null;;
                  };
                }
              }
              if (result5 !== null) {
                if (input.substr(pos, 1) === "}") {
                  var result6 = "}";
                  pos += 1;
                } else {
                  var result6 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString("}"));
                  }
                }
                if (result6 !== null) {
                  var result1 = [result2, result3, result4, result5, result6];
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null ? result1 : '';
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[27] BindingsClause");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_BindingValue(context) {
        var cacheKey = "BindingValue" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var result5 = parse_IRIref(context);
        if (result5 !== null) {
          var result0 = result5;
        } else {
          var result4 = parse_RDFLiteral(context);
          if (result4 !== null) {
            var result0 = result4;
          } else {
            var result3 = parse_NumericLiteral(context);
            if (result3 !== null) {
              var result0 = result3;
            } else {
              var result2 = parse_BooleanLiteral(context);
              if (result2 !== null) {
                var result0 = result2;
              } else {
                if (input.substr(pos, 5) === "UNDEF") {
                  var result1 = "UNDEF";
                  pos += 5;
                } else {
                  var result1 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString("UNDEF"));
                  }
                }
                if (result1 !== null) {
                  var result0 = result1;
                } else {
                  var result0 = null;;
                };
              };
            };
          };
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[28] BindingValue");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Update(context) {
        var cacheKey = "Update" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = parse_Prologue(context);
        if (result2 !== null) {
          var result3 = [];
          var result14 = parse_WS(context);
          while (result14 !== null) {
            result3.push(result14);
            var result14 = parse_WS(context);
          }
          if (result3 !== null) {
            var result4 = parse_Update1(context);
            if (result4 !== null) {
              var savedPos1 = pos;
              var result7 = [];
              var result13 = parse_WS(context);
              while (result13 !== null) {
                result7.push(result13);
                var result13 = parse_WS(context);
              }
              if (result7 !== null) {
                if (input.substr(pos, 1) === ";") {
                  var result8 = ";";
                  pos += 1;
                } else {
                  var result8 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString(";"));
                  }
                }
                if (result8 !== null) {
                  var result9 = [];
                  var result12 = parse_WS(context);
                  while (result12 !== null) {
                    result9.push(result12);
                    var result12 = parse_WS(context);
                  }
                  if (result9 !== null) {
                    var result11 = parse_Update(context);
                    var result10 = result11 !== null ? result11 : '';
                    if (result10 !== null) {
                      var result6 = [result7, result8, result9, result10];
                    } else {
                      var result6 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result6 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result6 = null;
                  pos = savedPos1;
                }
              } else {
                var result6 = null;
                pos = savedPos1;
              }
              var result5 = result6 !== null ? result6 : '';
              if (result5 !== null) {
                var result1 = [result2, result3, result4, result5];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(p, u, us) {
                 var query = {};
                query.token = 'query';
                query.kind = 'update'
                query.prologue = p;

               var units = [u];

               for(var i=0; i<us.length; i++) {
                    if(us[i] && us[i][3]) {
                      units.push(us[i][3]);
                    }
               }

                query.units = units;
                return query;
          })(result1[0], result1[2], result1[3])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[30] Update");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Update1(context) {
        var cacheKey = "Update1" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var result8 = parse_Load(context);
        if (result8 !== null) {
          var result0 = result8;
        } else {
          var result7 = parse_Clear(context);
          if (result7 !== null) {
            var result0 = result7;
          } else {
            var result6 = parse_Drop(context);
            if (result6 !== null) {
              var result0 = result6;
            } else {
              var result5 = parse_Create(context);
              if (result5 !== null) {
                var result0 = result5;
              } else {
                var result4 = parse_InsertData(context);
                if (result4 !== null) {
                  var result0 = result4;
                } else {
                  var result3 = parse_DeleteData(context);
                  if (result3 !== null) {
                    var result0 = result3;
                  } else {
                    var result2 = parse_DeleteWhere(context);
                    if (result2 !== null) {
                      var result0 = result2;
                    } else {
                      var result1 = parse_Modify(context);
                      if (result1 !== null) {
                        var result0 = result1;
                      } else {
                        var result0 = null;;
                      };
                    };
                  };
                };
              };
            };
          };
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[31] Update1");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Load(context) {
        var cacheKey = "Load" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 4) === "LOAD") {
          var result1 = "LOAD";
          pos += 4;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("LOAD"));
          }
        }
        if (result1 !== null) {
          var result2 = parse_IRIref(context);
          if (result2 !== null) {
            var savedPos1 = pos;
            if (input.substr(pos, 4) === "INTO") {
              var result5 = "INTO";
              pos += 4;
            } else {
              var result5 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("INTO"));
              }
            }
            if (result5 !== null) {
              var result6 = parse_GraphRef(context);
              if (result6 !== null) {
                var result4 = [result5, result6];
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
            var result3 = result4 !== null ? result4 : '';
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[32] Load");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Clear(context) {
        var cacheKey = "Clear" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 5) === "CLEAR") {
          var result1 = "CLEAR";
          pos += 5;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("CLEAR"));
          }
        }
        if (result1 !== null) {
          if (input.substr(pos, 6) === "SILENT") {
            var result4 = "SILENT";
            pos += 6;
          } else {
            var result4 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("SILENT"));
            }
          }
          var result2 = result4 !== null ? result4 : '';
          if (result2 !== null) {
            var result3 = parse_GraphRefAll(context);
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[33] Clear");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Drop(context) {
        var cacheKey = "Drop" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 4) === "DROP") {
          var result1 = "DROP";
          pos += 4;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("DROP"));
          }
        }
        if (result1 !== null) {
          if (input.substr(pos, 6) === "SILENT") {
            var result4 = "SILENT";
            pos += 6;
          } else {
            var result4 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("SILENT"));
            }
          }
          var result2 = result4 !== null ? result4 : '';
          if (result2 !== null) {
            var result3 = parse_GraphRefAll(context);
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[34] Drop");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Create(context) {
        var cacheKey = "Create" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 6) === "CREATE") {
          var result1 = "CREATE";
          pos += 6;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("CREATE"));
          }
        }
        if (result1 !== null) {
          if (input.substr(pos, 6) === "SILENT") {
            var result4 = "SILENT";
            pos += 6;
          } else {
            var result4 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("SILENT"));
            }
          }
          var result2 = result4 !== null ? result4 : '';
          if (result2 !== null) {
            var result3 = parse_GraphRef(context);
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[35] Create");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_InsertData(context) {
        var cacheKey = "InsertData" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 6) === "INSERT") {
          var result2 = "INSERT";
          pos += 6;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("INSERT"));
          }
        }
        if (result2 !== null) {
          var result3 = [];
          var result8 = parse_WS(context);
          while (result8 !== null) {
            result3.push(result8);
            var result8 = parse_WS(context);
          }
          if (result3 !== null) {
            if (input.substr(pos, 4) === "DATA") {
              var result4 = "DATA";
              pos += 4;
            } else {
              var result4 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("DATA"));
              }
            }
            if (result4 !== null) {
              var result5 = [];
              var result7 = parse_WS(context);
              while (result7 !== null) {
                result5.push(result7);
                var result7 = parse_WS(context);
              }
              if (result5 !== null) {
                var result6 = parse_QuadData(context);
                if (result6 !== null) {
                  var result1 = [result2, result3, result4, result5, result6];
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(qs) {
                var query = {};
                query.kind = 'insertdata';
                query.token = 'executableunit'
                query.quads = qs;

                return query;
          })(result1[4])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[36] InsertData");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_DeleteData(context) {
        var cacheKey = "DeleteData" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 6) === "DELETE") {
          var result2 = "DELETE";
          pos += 6;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("DELETE"));
          }
        }
        if (result2 !== null) {
          var result3 = [];
          var result6 = parse_WS(context);
          while (result6 !== null) {
            result3.push(result6);
            var result6 = parse_WS(context);
          }
          if (result3 !== null) {
            if (input.substr(pos, 4) === "DATA") {
              var result4 = "DATA";
              pos += 4;
            } else {
              var result4 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("DATA"));
              }
            }
            if (result4 !== null) {
              var result5 = parse_QuadData(context);
              if (result5 !== null) {
                var result1 = [result2, result3, result4, result5];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(qs) {
                var query = {};
                query.kind = 'deletedata';
                query.token = 'executableunit'
                query.quads = qs;

                return query;
          })(result1[3])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[37] DeleteData");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_DeleteWhere(context) {
        var cacheKey = "DeleteWhere" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 6) === "DELETE") {
          var result2 = "DELETE";
          pos += 6;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("DELETE"));
          }
        }
        if (result2 !== null) {
          var result3 = [];
          var result8 = parse_WS(context);
          while (result8 !== null) {
            result3.push(result8);
            var result8 = parse_WS(context);
          }
          if (result3 !== null) {
            if (input.substr(pos, 5) === "WHERE") {
              var result4 = "WHERE";
              pos += 5;
            } else {
              var result4 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("WHERE"));
              }
            }
            if (result4 !== null) {
              var result5 = [];
              var result7 = parse_WS(context);
              while (result7 !== null) {
                result5.push(result7);
                var result7 = parse_WS(context);
              }
              if (result5 !== null) {
                var result6 = parse_QuadPattern(context);
                if (result6 !== null) {
                  var result1 = [result2, result3, result4, result5, result6];
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(qs) {
                var query = {};
                query.kind = 'deletewhere';
                query.token = 'executableunit'
                query.quads = qs;

                return query;
          })(result1[4])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[38] DeleteWhere");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Modify(context) {
        var cacheKey = "Modify" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos2 = pos;
        if (input.substr(pos, 4) === "WITH") {
          var result13 = "WITH";
          pos += 4;
        } else {
          var result13 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("WITH"));
          }
        }
        if (result13 !== null) {
          var result14 = parse_IRIref(context);
          if (result14 !== null) {
            var result12 = [result13, result14];
          } else {
            var result12 = null;
            pos = savedPos2;
          }
        } else {
          var result12 = null;
          pos = savedPos2;
        }
        var result1 = result12 !== null ? result12 : '';
        if (result1 !== null) {
          var savedPos1 = pos;
          var result9 = parse_DeleteClause(context);
          if (result9 !== null) {
            var result11 = parse_InsertClause(context);
            var result10 = result11 !== null ? result11 : '';
            if (result10 !== null) {
              var result8 = [result9, result10];
            } else {
              var result8 = null;
              pos = savedPos1;
            }
          } else {
            var result8 = null;
            pos = savedPos1;
          }
          if (result8 !== null) {
            var result2 = result8;
          } else {
            var result7 = parse_InsertClause(context);
            if (result7 !== null) {
              var result2 = result7;
            } else {
              var result2 = null;;
            };
          }
          if (result2 !== null) {
            var result3 = [];
            var result6 = parse_UsingClause(context);
            while (result6 !== null) {
              result3.push(result6);
              var result6 = parse_UsingClause(context);
            }
            if (result3 !== null) {
              if (input.substr(pos, 5) === "WHERE") {
                var result4 = "WHERE";
                pos += 5;
              } else {
                var result4 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("WHERE"));
                }
              }
              if (result4 !== null) {
                var result5 = parse_GroupGraphPattern(context);
                if (result5 !== null) {
                  var result0 = [result1, result2, result3, result4, result5];
                } else {
                  var result0 = null;
                  pos = savedPos0;
                }
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[39] Modify");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_DeleteClause(context) {
        var cacheKey = "DeleteClause" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 6) === "DELETE") {
          var result1 = "DELETE";
          pos += 6;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("DELETE"));
          }
        }
        if (result1 !== null) {
          var result2 = parse_QuadPattern(context);
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[40] DeleteClause");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_InsertClause(context) {
        var cacheKey = "InsertClause" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 6) === "INSERT") {
          var result1 = "INSERT";
          pos += 6;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("INSERT"));
          }
        }
        if (result1 !== null) {
          var result2 = parse_QuadPattern(context);
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[41] InsertClause");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_UsingClause(context) {
        var cacheKey = "UsingClause" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 5) === "USING") {
          var result1 = "USING";
          pos += 5;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("USING"));
          }
        }
        if (result1 !== null) {
          var result6 = parse_IRIref(context);
          if (result6 !== null) {
            var result2 = result6;
          } else {
            var savedPos1 = pos;
            if (input.substr(pos, 5) === "NAMED") {
              var result4 = "NAMED";
              pos += 5;
            } else {
              var result4 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("NAMED"));
              }
            }
            if (result4 !== null) {
              var result5 = parse_IRIref(context);
              if (result5 !== null) {
                var result3 = [result4, result5];
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
            if (result3 !== null) {
              var result2 = result3;
            } else {
              var result2 = null;;
            };
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[42] UsingClause");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_GraphRef(context) {
        var cacheKey = "GraphRef" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 5) === "GRAPH") {
          var result1 = "GRAPH";
          pos += 5;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("GRAPH"));
          }
        }
        if (result1 !== null) {
          var result2 = parse_IRIref(context);
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[43] GraphRef");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_GraphRefAll(context) {
        var cacheKey = "GraphRefAll" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var result4 = parse_GraphRef(context);
        if (result4 !== null) {
          var result0 = result4;
        } else {
          if (input.substr(pos, 7) === "DEFAULT") {
            var result3 = "DEFAULT";
            pos += 7;
          } else {
            var result3 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("DEFAULT"));
            }
          }
          if (result3 !== null) {
            var result0 = result3;
          } else {
            if (input.substr(pos, 5) === "NAMED") {
              var result2 = "NAMED";
              pos += 5;
            } else {
              var result2 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("NAMED"));
              }
            }
            if (result2 !== null) {
              var result0 = result2;
            } else {
              if (input.substr(pos, 3) === "ALL") {
                var result1 = "ALL";
                pos += 3;
              } else {
                var result1 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("ALL"));
                }
              }
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[44] GraphRefAll");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_QuadPattern(context) {
        var cacheKey = "QuadPattern" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = [];
        var result12 = parse_WS(context);
        while (result12 !== null) {
          result2.push(result12);
          var result12 = parse_WS(context);
        }
        if (result2 !== null) {
          if (input.substr(pos, 1) === "{") {
            var result3 = "{";
            pos += 1;
          } else {
            var result3 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("{"));
            }
          }
          if (result3 !== null) {
            var result4 = [];
            var result11 = parse_WS(context);
            while (result11 !== null) {
              result4.push(result11);
              var result11 = parse_WS(context);
            }
            if (result4 !== null) {
              var result5 = parse_Quads(context);
              if (result5 !== null) {
                var result6 = [];
                var result10 = parse_WS(context);
                while (result10 !== null) {
                  result6.push(result10);
                  var result10 = parse_WS(context);
                }
                if (result6 !== null) {
                  if (input.substr(pos, 1) === "}") {
                    var result7 = "}";
                    pos += 1;
                  } else {
                    var result7 = null;
                    if (context.reportMatchFailures) {
                      matchFailed(quoteString("}"));
                    }
                  }
                  if (result7 !== null) {
                    var result8 = [];
                    var result9 = parse_WS(context);
                    while (result9 !== null) {
                      result8.push(result9);
                      var result9 = parse_WS(context);
                    }
                    if (result8 !== null) {
                      var result1 = [result2, result3, result4, result5, result6, result7, result8];
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(qs) {
                return qs.quadsContext;
          })(result1[3])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[45] QuadPattern");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_QuadData(context) {
        var cacheKey = "QuadData" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = [];
        var result12 = parse_WS(context);
        while (result12 !== null) {
          result2.push(result12);
          var result12 = parse_WS(context);
        }
        if (result2 !== null) {
          if (input.substr(pos, 1) === "{") {
            var result3 = "{";
            pos += 1;
          } else {
            var result3 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("{"));
            }
          }
          if (result3 !== null) {
            var result4 = [];
            var result11 = parse_WS(context);
            while (result11 !== null) {
              result4.push(result11);
              var result11 = parse_WS(context);
            }
            if (result4 !== null) {
              var result5 = parse_Quads(context);
              if (result5 !== null) {
                var result6 = [];
                var result10 = parse_WS(context);
                while (result10 !== null) {
                  result6.push(result10);
                  var result10 = parse_WS(context);
                }
                if (result6 !== null) {
                  if (input.substr(pos, 1) === "}") {
                    var result7 = "}";
                    pos += 1;
                  } else {
                    var result7 = null;
                    if (context.reportMatchFailures) {
                      matchFailed(quoteString("}"));
                    }
                  }
                  if (result7 !== null) {
                    var result8 = [];
                    var result9 = parse_WS(context);
                    while (result9 !== null) {
                      result8.push(result9);
                      var result9 = parse_WS(context);
                    }
                    if (result8 !== null) {
                      var result1 = [result2, result3, result4, result5, result6, result7, result8];
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(qs) {
                return qs.quadsContext;
          })(result1[3])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[46] QuadData");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Quads(context) {
        var cacheKey = "Quads" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        var result10 = parse_TriplesTemplate(context);
        var result2 = result10 !== null ? result10 : '';
        if (result2 !== null) {
          var result3 = [];
          var savedPos1 = pos;
          var result5 = parse_QuadsNotTriples(context);
          if (result5 !== null) {
            if (input.substr(pos, 1) === ".") {
              var result9 = ".";
              pos += 1;
            } else {
              var result9 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("."));
              }
            }
            var result6 = result9 !== null ? result9 : '';
            if (result6 !== null) {
              var result8 = parse_TriplesTemplate(context);
              var result7 = result8 !== null ? result8 : '';
              if (result7 !== null) {
                var result4 = [result5, result6, result7];
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos1 = pos;
            var result5 = parse_QuadsNotTriples(context);
            if (result5 !== null) {
              if (input.substr(pos, 1) === ".") {
                var result9 = ".";
                pos += 1;
              } else {
                var result9 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("."));
                }
              }
              var result6 = result9 !== null ? result9 : '';
              if (result6 !== null) {
                var result8 = parse_TriplesTemplate(context);
                var result7 = result8 !== null ? result8 : '';
                if (result7 !== null) {
                  var result4 = [result5, result6, result7];
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(ts, qs) {
                var quads = []
                for(var i=0; i<ts.triplesContext.length; i++) {
                    var triple = ts.triplesContext[i]
                    triple.graph = null;
                    quads.push(triple)
                }

                if(qs && qs.length>0 && qs[0].length > 0) {
                    quads = quads.concat(qs[0][0].quadsContext);

                    for(var i=0; i<qs[0][2].triplesContext.length; i++) {
                        var triple = qs[0][2].triplesContext[i]
                        triple.graph = null;
                        quads.push(triple)
                    }
                }

                return {token:'quads',
                        quadsContext: quads}
          })(result1[0], result1[1])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[47] Quads");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_QuadsNotTriples(context) {
        var cacheKey = "QuadsNotTriples" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = [];
        var result19 = parse_WS(context);
        while (result19 !== null) {
          result2.push(result19);
          var result19 = parse_WS(context);
        }
        if (result2 !== null) {
          if (input.substr(pos, 5) === "GRAPH") {
            var result3 = "GRAPH";
            pos += 5;
          } else {
            var result3 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("GRAPH"));
            }
          }
          if (result3 !== null) {
            var result4 = [];
            var result18 = parse_WS(context);
            while (result18 !== null) {
              result4.push(result18);
              var result18 = parse_WS(context);
            }
            if (result4 !== null) {
              var result5 = parse_VarOrIRIref(context);
              if (result5 !== null) {
                var result6 = [];
                var result17 = parse_WS(context);
                while (result17 !== null) {
                  result6.push(result17);
                  var result17 = parse_WS(context);
                }
                if (result6 !== null) {
                  if (input.substr(pos, 1) === "{") {
                    var result7 = "{";
                    pos += 1;
                  } else {
                    var result7 = null;
                    if (context.reportMatchFailures) {
                      matchFailed(quoteString("{"));
                    }
                  }
                  if (result7 !== null) {
                    var result8 = [];
                    var result16 = parse_WS(context);
                    while (result16 !== null) {
                      result8.push(result16);
                      var result16 = parse_WS(context);
                    }
                    if (result8 !== null) {
                      var result15 = parse_TriplesTemplate(context);
                      var result9 = result15 !== null ? result15 : '';
                      if (result9 !== null) {
                        var result10 = [];
                        var result14 = parse_WS(context);
                        while (result14 !== null) {
                          result10.push(result14);
                          var result14 = parse_WS(context);
                        }
                        if (result10 !== null) {
                          if (input.substr(pos, 1) === "}") {
                            var result11 = "}";
                            pos += 1;
                          } else {
                            var result11 = null;
                            if (context.reportMatchFailures) {
                              matchFailed(quoteString("}"));
                            }
                          }
                          if (result11 !== null) {
                            var result12 = [];
                            var result13 = parse_WS(context);
                            while (result13 !== null) {
                              result12.push(result13);
                              var result13 = parse_WS(context);
                            }
                            if (result12 !== null) {
                              var result1 = [result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12];
                            } else {
                              var result1 = null;
                              pos = savedPos0;
                            }
                          } else {
                            var result1 = null;
                            pos = savedPos0;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(g, ts) {
                var quads = []
                for(var i=0; i<ts.triplesContext.length; i++) {
                    var triple = ts.triplesContext[i]
                    triple.graph = g;
                    quads.push(triple)
                }

                return {token:'quadsnottriples',
                        quadsContext: quads}
          })(result1[3], result1[7])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[48] QuadsNotTriples");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_TriplesTemplate(context) {
        var cacheKey = "TriplesTemplate" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = parse_TriplesSameSubject(context);
        if (result2 !== null) {
          var savedPos1 = pos;
          var result5 = [];
          var result11 = parse_WS(context);
          while (result11 !== null) {
            result5.push(result11);
            var result11 = parse_WS(context);
          }
          if (result5 !== null) {
            if (input.substr(pos, 1) === ".") {
              var result6 = ".";
              pos += 1;
            } else {
              var result6 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("."));
              }
            }
            if (result6 !== null) {
              var result7 = [];
              var result10 = parse_WS(context);
              while (result10 !== null) {
                result7.push(result10);
                var result10 = parse_WS(context);
              }
              if (result7 !== null) {
                var result9 = parse_TriplesTemplate(context);
                var result8 = result9 !== null ? result9 : '';
                if (result8 !== null) {
                  var result4 = [result5, result6, result7, result8];
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          var result3 = result4 !== null ? result4 : '';
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(b, bs) {
               var triples = b.triplesContext;
               var toTest = null;
                if(typeof(bs) === 'object') {
                      if(bs.length != null) {
                            if(bs[3].triplesContext!=null) {
                               triples = triples.concat(bs[3].triplesContext);
                        }
                     }
                }

               return {token:'triplestemplate',
                       triplesContext: triples}

          })(result1[0], result1[1])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[49] TriplesTemplate");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_GroupGraphPattern(context) {
        var cacheKey = "GroupGraphPattern" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "{") {
          var result12 = "{";
          pos += 1;
        } else {
          var result12 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("{"));
          }
        }
        if (result12 !== null) {
          var result13 = [];
          var result18 = parse_WS(context);
          while (result18 !== null) {
            result13.push(result18);
            var result18 = parse_WS(context);
          }
          if (result13 !== null) {
            var result14 = parse_SubSelect(context);
            if (result14 !== null) {
              var result15 = [];
              var result17 = parse_WS(context);
              while (result17 !== null) {
                result15.push(result17);
                var result17 = parse_WS(context);
              }
              if (result15 !== null) {
                if (input.substr(pos, 1) === "}") {
                  var result16 = "}";
                  pos += 1;
                } else {
                  var result16 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString("}"));
                  }
                }
                if (result16 !== null) {
                  var result11 = [result12, result13, result14, result15, result16];
                } else {
                  var result11 = null;
                  pos = savedPos1;
                }
              } else {
                var result11 = null;
                pos = savedPos1;
              }
            } else {
              var result11 = null;
              pos = savedPos1;
            }
          } else {
            var result11 = null;
            pos = savedPos1;
          }
        } else {
          var result11 = null;
          pos = savedPos1;
        }
        var result10 = result11 !== null
          ? (function(p) {
                return p;
          })(result11[2])
          : null;
        if (result10 !== null) {
          var result0 = result10;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 1) === "{") {
            var result3 = "{";
            pos += 1;
          } else {
            var result3 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("{"));
            }
          }
          if (result3 !== null) {
            var result4 = [];
            var result9 = parse_WS(context);
            while (result9 !== null) {
              result4.push(result9);
              var result9 = parse_WS(context);
            }
            if (result4 !== null) {
              var result5 = parse_GroupGraphPatternSub(context);
              if (result5 !== null) {
                var result6 = [];
                var result8 = parse_WS(context);
                while (result8 !== null) {
                  result6.push(result8);
                  var result8 = parse_WS(context);
                }
                if (result6 !== null) {
                  if (input.substr(pos, 1) === "}") {
                    var result7 = "}";
                    pos += 1;
                  } else {
                    var result7 = null;
                    if (context.reportMatchFailures) {
                      matchFailed(quoteString("}"));
                    }
                  }
                  if (result7 !== null) {
                    var result2 = [result3, result4, result5, result6, result7];
                  } else {
                    var result2 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos0;
                }
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          var result1 = result2 !== null
            ? (function(p) {
                  return p;
            })(result2[2])
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[50] GroupGraphPattern");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_GroupGraphPatternSub(context) {
        var cacheKey = "GroupGraphPatternSub" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        var result14 = parse_TriplesBlock(context);
        var result2 = result14 !== null ? result14 : '';
        if (result2 !== null) {
          var result3 = [];
          var savedPos1 = pos;
          var result5 = parse_GraphPatternNotTriples(context);
          if (result5 !== null) {
            var result6 = [];
            var result13 = parse_WS(context);
            while (result13 !== null) {
              result6.push(result13);
              var result13 = parse_WS(context);
            }
            if (result6 !== null) {
              if (input.substr(pos, 1) === ".") {
                var result12 = ".";
                pos += 1;
              } else {
                var result12 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("."));
                }
              }
              var result7 = result12 !== null ? result12 : '';
              if (result7 !== null) {
                var result8 = [];
                var result11 = parse_WS(context);
                while (result11 !== null) {
                  result8.push(result11);
                  var result11 = parse_WS(context);
                }
                if (result8 !== null) {
                  var result10 = parse_TriplesBlock(context);
                  var result9 = result10 !== null ? result10 : '';
                  if (result9 !== null) {
                    var result4 = [result5, result6, result7, result8, result9];
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos1 = pos;
            var result5 = parse_GraphPatternNotTriples(context);
            if (result5 !== null) {
              var result6 = [];
              var result13 = parse_WS(context);
              while (result13 !== null) {
                result6.push(result13);
                var result13 = parse_WS(context);
              }
              if (result6 !== null) {
                if (input.substr(pos, 1) === ".") {
                  var result12 = ".";
                  pos += 1;
                } else {
                  var result12 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString("."));
                  }
                }
                var result7 = result12 !== null ? result12 : '';
                if (result7 !== null) {
                  var result8 = [];
                  var result11 = parse_WS(context);
                  while (result11 !== null) {
                    result8.push(result11);
                    var result11 = parse_WS(context);
                  }
                  if (result8 !== null) {
                    var result10 = parse_TriplesBlock(context);
                    var result9 = result10 !== null ? result10 : '';
                    if (result9 !== null) {
                      var result4 = [result5, result6, result7, result8, result9];
                    } else {
                      var result4 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(tb, tbs) {
                var subpatterns = [];
                if(tb != null && tb != []) {
                    subpatterns.push(tb);
                }

                for(var i=0; i<tbs.length; i++) {
                    for(var j=0; j< tbs[i].length; j++) {
                        if(tbs[i][j].token != null) {
                            subpatterns.push(tbs[i][j]);
                        }
                    }
                }

                var compactedSubpatterns = [];

                var currentBasicGraphPatterns = [];
                var currentFilters = [];

                for(var i=0; i<subpatterns.length; i++) {
                    if(subpatterns[i].token!='triplespattern' && subpatterns[i].token != 'filter') {
                        if(currentBasicGraphPatterns.length != 0 || currentFilters.length != 0) {
                            var triplesContext = [];
                            for(var j=0; j<currentBasicGraphPatterns.length; j++) {
                                triplesContext = triplesContext.concat(currentBasicGraphPatterns[j].triplesContext);
                            }
                            compactedSubpatterns.push({token: 'basicgraphpattern',
                                                       triplesContext: triplesContext});
                            currentBasicGraphPatterns = [];
                        }
                        compactedSubpatterns.push(subpatterns[i]);
                    } else {
                        if(subpatterns[i].token === 'triplespattern') {
                            currentBasicGraphPatterns.push(subpatterns[i]);
                        } else {
                            currentFilters.push(subpatterns[i]);
                        }
                    }
                }

                if(currentBasicGraphPatterns.length != 0 || currentFilters.length != 0) {
                    var triplesContext = [];
                    for(var j=0; j<currentBasicGraphPatterns.length; j++) {
                        triplesContext = triplesContext.concat(currentBasicGraphPatterns[j].triplesContext);
                    }
                    compactedSubpatterns.push({token: 'basicgraphpattern',
                                               triplesContext: triplesContext});
                }

          //      if(compactedSubpatterns.length == 1) {
          //          compactedSubpatterns[0].filters = currentFilters;
          //          return compactedSubpatterns[0];
          //      } else  {
                    return { token: 'groupgraphpattern',
                             patterns: compactedSubpatterns,
                             filters: currentFilters }
          //      }
          })(result1[0], result1[1])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[51] GroupGraphPatternSub");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_TriplesBlock(context) {
        var cacheKey = "TriplesBlock" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = parse_TriplesSameSubject(context);
        if (result2 !== null) {
          var savedPos1 = pos;
          var result5 = [];
          var result9 = parse_WS(context);
          while (result9 !== null) {
            result5.push(result9);
            var result9 = parse_WS(context);
          }
          if (result5 !== null) {
            if (input.substr(pos, 1) === ".") {
              var result6 = ".";
              pos += 1;
            } else {
              var result6 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("."));
              }
            }
            if (result6 !== null) {
              var result8 = parse_TriplesBlock(context);
              var result7 = result8 !== null ? result8 : '';
              if (result7 !== null) {
                var result4 = [result5, result6, result7];
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          var result3 = result4 !== null ? result4 : '';
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(b, bs) {
               var triples = b.triplesContext;
               var toTest = null;
                if(typeof(bs) === 'object') {
                      if(bs.length != null) {
                            if(bs[2].triplesContext!=null) {
                               triples = triples.concat(bs[2].triplesContext);
                        }
                     }
                }

               return {token:'triplespattern',
                       triplesContext: triples}
          })(result1[0], result1[1])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[54] TriplesBlock");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_GraphPatternNotTriples(context) {
        var cacheKey = "GraphPatternNotTriples" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var result6 = parse_GroupOrUnionGraphPattern(context);
        if (result6 !== null) {
          var result0 = result6;
        } else {
          var result5 = parse_OptionalGraphPattern(context);
          if (result5 !== null) {
            var result0 = result5;
          } else {
            var result4 = parse_MinusGraphPattern(context);
            if (result4 !== null) {
              var result0 = result4;
            } else {
              var result3 = parse_GraphGraphPattern(context);
              if (result3 !== null) {
                var result0 = result3;
              } else {
                var result2 = parse_ServiceGraphPattern(context);
                if (result2 !== null) {
                  var result0 = result2;
                } else {
                  var result1 = parse_Filter(context);
                  if (result1 !== null) {
                    var result0 = result1;
                  } else {
                    var result0 = null;;
                  };
                };
              };
            };
          };
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[53] GraphPatternNotTriples");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_OptionalGraphPattern(context) {
        var cacheKey = "OptionalGraphPattern" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = [];
        var result7 = parse_WS(context);
        while (result7 !== null) {
          result2.push(result7);
          var result7 = parse_WS(context);
        }
        if (result2 !== null) {
          if (input.substr(pos, 8) === "OPTIONAL") {
            var result3 = "OPTIONAL";
            pos += 8;
          } else {
            var result3 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("OPTIONAL"));
            }
          }
          if (result3 !== null) {
            var result4 = [];
            var result6 = parse_WS(context);
            while (result6 !== null) {
              result4.push(result6);
              var result6 = parse_WS(context);
            }
            if (result4 !== null) {
              var result5 = parse_GroupGraphPattern(context);
              if (result5 !== null) {
                var result1 = [result2, result3, result4, result5];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(v) {
                return { token: 'optionalgraphpattern',
                         value: v }
          })(result1[3])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[54] OptionalGraphPattern");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_GraphGraphPattern(context) {
        var cacheKey = "GraphGraphPattern" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = [];
        var result10 = parse_WS(context);
        while (result10 !== null) {
          result2.push(result10);
          var result10 = parse_WS(context);
        }
        if (result2 !== null) {
          if (input.substr(pos, 5) === "GRAPH") {
            var result3 = "GRAPH";
            pos += 5;
          } else {
            var result3 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("GRAPH"));
            }
          }
          if (result3 !== null) {
            var result4 = [];
            var result9 = parse_WS(context);
            while (result9 !== null) {
              result4.push(result9);
              var result9 = parse_WS(context);
            }
            if (result4 !== null) {
              var result5 = parse_VarOrIRIref(context);
              if (result5 !== null) {
                var result6 = [];
                var result8 = parse_WS(context);
                while (result8 !== null) {
                  result6.push(result8);
                  var result8 = parse_WS(context);
                }
                if (result6 !== null) {
                  var result7 = parse_GroupGraphPattern(context);
                  if (result7 !== null) {
                    var result1 = [result2, result3, result4, result5, result6, result7];
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(g, gg) {
                for(var i=0; i<gg.patterns.length; i++) {
                  var quads = []
                  var ts = gg.patterns[i];
                  for(var j=0; j<ts.triplesContext.length; j++) {
                      var triple = ts.triplesContext[j]
                      triple.graph = g;
                  }
                }

                gg.token = 'groupgraphpattern'
                return gg;
          })(result1[3], result1[5])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[55] GraphGraphPattern");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_ServiceGraphPattern(context) {
        var cacheKey = "ServiceGraphPattern" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 7) === "SERVICE") {
          var result2 = "SERVICE";
          pos += 7;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("SERVICE"));
          }
        }
        if (result2 !== null) {
          var result3 = parse_VarOrIRIref(context);
          if (result3 !== null) {
            var result4 = parse_GroupGraphPattern(context);
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(v, ts) {
                return {token: 'servicegraphpattern',
                        status: 'todo',
                        value: [v,ts] }
          })(result1[1], result1[2])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[56] ServiceGraphPattern");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_MinusGraphPattern(context) {
        var cacheKey = "MinusGraphPattern" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 5) === "MINUS") {
          var result2 = "MINUS";
          pos += 5;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("MINUS"));
          }
        }
        if (result2 !== null) {
          var result3 = parse_GroupGraphPattern(context);
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(ts) {
                return {token: 'minusgraphpattern',
                        status: 'todo',
                        value: ts}
          })(result1[1])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[57] MinusGraphPattern");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_GroupOrUnionGraphPattern(context) {
        var cacheKey = "GroupOrUnionGraphPattern" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = parse_GroupGraphPattern(context);
        if (result2 !== null) {
          var result3 = [];
          var savedPos1 = pos;
          var result5 = [];
          var result10 = parse_WS(context);
          while (result10 !== null) {
            result5.push(result10);
            var result10 = parse_WS(context);
          }
          if (result5 !== null) {
            if (input.substr(pos, 5) === "UNION") {
              var result6 = "UNION";
              pos += 5;
            } else {
              var result6 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("UNION"));
              }
            }
            if (result6 !== null) {
              var result7 = [];
              var result9 = parse_WS(context);
              while (result9 !== null) {
                result7.push(result9);
                var result9 = parse_WS(context);
              }
              if (result7 !== null) {
                var result8 = parse_GroupGraphPattern(context);
                if (result8 !== null) {
                  var result4 = [result5, result6, result7, result8];
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos1 = pos;
            var result5 = [];
            var result10 = parse_WS(context);
            while (result10 !== null) {
              result5.push(result10);
              var result10 = parse_WS(context);
            }
            if (result5 !== null) {
              if (input.substr(pos, 5) === "UNION") {
                var result6 = "UNION";
                pos += 5;
              } else {
                var result6 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("UNION"));
                }
              }
              if (result6 !== null) {
                var result7 = [];
                var result9 = parse_WS(context);
                while (result9 !== null) {
                  result7.push(result9);
                  var result9 = parse_WS(context);
                }
                if (result7 !== null) {
                  var result8 = parse_GroupGraphPattern(context);
                  if (result8 !== null) {
                    var result4 = [result5, result6, result7, result8];
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(a, b) {
                if(b.length === 0) {
                    return a;
                } else {

                    var lastToken = {token: 'graphunionpattern',
                                     value: [a]};

                    for(var i=0; i<b.length; i++) {
                        if(i==b.length-1) {
                            lastToken.value.push(b[i][3]);
                        } else {
                            lastToken.value.push(b[i][3]);
                            var newToken = {token: 'graphunionpattern',
                                            value: [lastToken]}

                            lastToken = newToken;
                        }
                    }

                    return lastToken;

                }
          })(result1[0], result1[1])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[58] GroupOrUnionGraphPattern");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Filter(context) {
        var cacheKey = "Filter" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 6) === "FILTER") {
          var result2 = "FILTER";
          pos += 6;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("FILTER"));
          }
        }
        if (result2 !== null) {
          var result3 = [];
          var result5 = parse_WS(context);
          while (result5 !== null) {
            result3.push(result5);
            var result5 = parse_WS(context);
          }
          if (result3 !== null) {
            var result4 = parse_Constraint(context);
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(c) {
                return {token: 'filter',
                        value: c}
          })(result1[2])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[59] Filter");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Constraint(context) {
        var cacheKey = "Constraint" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var result3 = parse_BrackettedExpression(context);
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_BuiltInCall(context);
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_FunctionCall(context);
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[60] Constraint");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_FunctionCall(context) {
        var cacheKey = "FunctionCall" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = parse_IRIref(context);
        if (result2 !== null) {
          var result3 = parse_ArgList(context);
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(i, args) {
                var fcall = {};
                fall.token = "functioncall";
                fcall.fn = i;
                fcall.args = args.value;

                return fcall;
          })(result1[0], result1[1])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[61] FunctionCall");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_ArgList(context) {
        var cacheKey = "ArgList" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var result13 = parse_NIL(context);
        var result12 = result13 !== null
          ? (function() {
                var args = {};
                args.token = 'args';
                args.value = [];
                return args;
          })()
          : null;
        if (result12 !== null) {
          var result0 = result12;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 1) === "(") {
            var result3 = "(";
            pos += 1;
          } else {
            var result3 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("("));
            }
          }
          if (result3 !== null) {
            if (input.substr(pos, 8) === "DISTINCT") {
              var result11 = "DISTINCT";
              pos += 8;
            } else {
              var result11 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("DISTINCT"));
              }
            }
            var result4 = result11 !== null ? result11 : '';
            if (result4 !== null) {
              var result5 = parse_ConditionalOrExpression(context);
              if (result5 !== null) {
                var result6 = [];
                var savedPos1 = pos;
                if (input.substr(pos, 1) === ",") {
                  var result9 = ",";
                  pos += 1;
                } else {
                  var result9 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString(","));
                  }
                }
                if (result9 !== null) {
                  var result10 = parse_ConditionalOrExpression(context);
                  if (result10 !== null) {
                    var result8 = [result9, result10];
                  } else {
                    var result8 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result8 = null;
                  pos = savedPos1;
                }
                while (result8 !== null) {
                  result6.push(result8);
                  var savedPos1 = pos;
                  if (input.substr(pos, 1) === ",") {
                    var result9 = ",";
                    pos += 1;
                  } else {
                    var result9 = null;
                    if (context.reportMatchFailures) {
                      matchFailed(quoteString(","));
                    }
                  }
                  if (result9 !== null) {
                    var result10 = parse_ConditionalOrExpression(context);
                    if (result10 !== null) {
                      var result8 = [result9, result10];
                    } else {
                      var result8 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result8 = null;
                    pos = savedPos1;
                  }
                }
                if (result6 !== null) {
                  if (input.substr(pos, 1) === ")") {
                    var result7 = ")";
                    pos += 1;
                  } else {
                    var result7 = null;
                    if (context.reportMatchFailures) {
                      matchFailed(quoteString(")"));
                    }
                  }
                  if (result7 !== null) {
                    var result2 = [result3, result4, result5, result6, result7];
                  } else {
                    var result2 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos0;
                }
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          var result1 = result2 !== null
            ? (function(d, e, es) {
                  cleanEx = [];

                  for(var i=0; i<es.length; i++) {
                      cleanEx.push(es[i][1]);
                  }
                  var args = {};
                  args.token = 'args';
                  args.value = [e].concat(cleanEx);

                  if(d==="DISTINCT") {
                      args.distinct = true;
                  } else {
                      args.distinct = false;
                  }

                  return args;
            })(result2[1], result2[2], result2[3])
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[62] ArgList");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_ExpressionList(context) {
        var cacheKey = "ExpressionList" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var result11 = parse_NIL(context);
        var result10 = result11 !== null
          ? (function() {
                var args = {};
                args.token = 'args';
                args.value = [];
                return args;
          })()
          : null;
        if (result10 !== null) {
          var result0 = result10;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 1) === "(") {
            var result3 = "(";
            pos += 1;
          } else {
            var result3 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("("));
            }
          }
          if (result3 !== null) {
            var result4 = parse_ConditionalOrExpression(context);
            if (result4 !== null) {
              var result5 = [];
              var savedPos1 = pos;
              if (input.substr(pos, 1) === ",") {
                var result8 = ",";
                pos += 1;
              } else {
                var result8 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString(","));
                }
              }
              if (result8 !== null) {
                var result9 = parse_ConditionalOrExpression(context);
                if (result9 !== null) {
                  var result7 = [result8, result9];
                } else {
                  var result7 = null;
                  pos = savedPos1;
                }
              } else {
                var result7 = null;
                pos = savedPos1;
              }
              while (result7 !== null) {
                result5.push(result7);
                var savedPos1 = pos;
                if (input.substr(pos, 1) === ",") {
                  var result8 = ",";
                  pos += 1;
                } else {
                  var result8 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString(","));
                  }
                }
                if (result8 !== null) {
                  var result9 = parse_ConditionalOrExpression(context);
                  if (result9 !== null) {
                    var result7 = [result8, result9];
                  } else {
                    var result7 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result7 = null;
                  pos = savedPos1;
                }
              }
              if (result5 !== null) {
                if (input.substr(pos, 1) === ")") {
                  var result6 = ")";
                  pos += 1;
                } else {
                  var result6 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString(")"));
                  }
                }
                if (result6 !== null) {
                  var result2 = [result3, result4, result5, result6];
                } else {
                  var result2 = null;
                  pos = savedPos0;
                }
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          var result1 = result2 !== null
            ? (function(e, es) {
                  cleanEx = [];

                  for(var i=0; i<es.length; i++) {
                      cleanEx.push(es[i][1]);
                  }
                  var args = {};
                  args.token = 'args';
                  args.value = [e].concat(cleanEx);

                  return args;
            })(result2[1], result2[2])
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[63] ExpressionList");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_ConstructTemplate(context) {
        var cacheKey = "ConstructTemplate" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "{") {
          var result1 = "{";
          pos += 1;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("{"));
          }
        }
        if (result1 !== null) {
          var result4 = parse_ConstructTriples(context);
          var result2 = result4 !== null ? result4 : '';
          if (result2 !== null) {
            if (input.substr(pos, 1) === "}") {
              var result3 = "}";
              pos += 1;
            } else {
              var result3 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("}"));
              }
            }
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[64] ConstructTemplate");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_ConstructTriples(context) {
        var cacheKey = "ConstructTriples" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        var result1 = parse_TriplesSameSubject(context);
        if (result1 !== null) {
          var savedPos1 = pos;
          if (input.substr(pos, 1) === ".") {
            var result4 = ".";
            pos += 1;
          } else {
            var result4 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("."));
            }
          }
          if (result4 !== null) {
            var result6 = parse_ConstructTriples(context);
            var result5 = result6 !== null ? result6 : '';
            if (result5 !== null) {
              var result3 = [result4, result5];
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          var result2 = result3 !== null ? result3 : '';
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[65] ConstructTriples");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_TriplesSameSubject(context) {
        var cacheKey = "TriplesSameSubject" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos1 = pos;
        var result11 = [];
        var result16 = parse_WS(context);
        while (result16 !== null) {
          result11.push(result16);
          var result16 = parse_WS(context);
        }
        if (result11 !== null) {
          var result12 = parse_VarOrTerm(context);
          if (result12 !== null) {
            var result13 = [];
            var result15 = parse_WS(context);
            while (result15 !== null) {
              result13.push(result15);
              var result15 = parse_WS(context);
            }
            if (result13 !== null) {
              var result14 = parse_PropertyListNotEmpty(context);
              if (result14 !== null) {
                var result10 = [result11, result12, result13, result14];
              } else {
                var result10 = null;
                pos = savedPos1;
              }
            } else {
              var result10 = null;
              pos = savedPos1;
            }
          } else {
            var result10 = null;
            pos = savedPos1;
          }
        } else {
          var result10 = null;
          pos = savedPos1;
        }
        var result9 = result10 !== null
          ? (function(s, pairs) {
                var triplesContext = pairs.triplesContext;
                var subject = s;
                for(var i=0; i< pairs.pairs.length; i++) {
                    var pair = pairs.pairs[i];
                    var triple = {subject: subject, predicate: pair[0], object: pair[1]}
                    triplesContext.push(triple);
                }

                var token = {};
                token.token = "triplessamesubject";
                token.triplesContext = triplesContext;
                token.chainSubject = subject;

                return token;
            })(result10[1], result10[3])
          : null;
        if (result9 !== null) {
          var result0 = result9;
        } else {
          var savedPos0 = pos;
          var result3 = [];
          var result8 = parse_WS(context);
          while (result8 !== null) {
            result3.push(result8);
            var result8 = parse_WS(context);
          }
          if (result3 !== null) {
            var result4 = parse_TriplesNode(context);
            if (result4 !== null) {
              var result5 = [];
              var result7 = parse_WS(context);
              while (result7 !== null) {
                result5.push(result7);
                var result7 = parse_WS(context);
              }
              if (result5 !== null) {
                var result6 = parse_PropertyList(context);
                if (result6 !== null) {
                  var result2 = [result3, result4, result5, result6];
                } else {
                  var result2 = null;
                  pos = savedPos0;
                }
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          var result1 = result2 !== null
            ? (function(tn, pairs) {
                  var triplesContext = p.triplesContext.concat(tn.triplesContext);
                  var subject = p.chainSubject;

                  for(var i=0; i< pairs.pairs.length; i++) {
                      var pair = pairs.pairs[i];
                      var triple = {subject: subject, predicate: pair[0], object: pair[1]}
                      triplesContext.push(triple);
                  }

                  var token = {};
                  token.token = "triplessamesubject";
                  token.triplesContext = triplesContext;
                  token.chainSubject = subject;

                  return token;
              })(result2[1], result2[3])
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[66] TriplesSameSubject");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_PropertyListNotEmpty(context) {
        var cacheKey = "PropertyListNotEmpty" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = parse_Verb(context);
        if (result2 !== null) {
          var result3 = [];
          var result18 = parse_WS(context);
          while (result18 !== null) {
            result3.push(result18);
            var result18 = parse_WS(context);
          }
          if (result3 !== null) {
            var result4 = parse_ObjectList(context);
            if (result4 !== null) {
              var result5 = [];
              var savedPos1 = pos;
              var result7 = [];
              var result17 = parse_WS(context);
              while (result17 !== null) {
                result7.push(result17);
                var result17 = parse_WS(context);
              }
              if (result7 !== null) {
                if (input.substr(pos, 1) === ";") {
                  var result8 = ";";
                  pos += 1;
                } else {
                  var result8 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString(";"));
                  }
                }
                if (result8 !== null) {
                  var result9 = [];
                  var result16 = parse_WS(context);
                  while (result16 !== null) {
                    result9.push(result16);
                    var result16 = parse_WS(context);
                  }
                  if (result9 !== null) {
                    var savedPos2 = pos;
                    var result12 = parse_Verb(context);
                    if (result12 !== null) {
                      var result13 = [];
                      var result15 = parse_WS(context);
                      while (result15 !== null) {
                        result13.push(result15);
                        var result15 = parse_WS(context);
                      }
                      if (result13 !== null) {
                        var result14 = parse_ObjectList(context);
                        if (result14 !== null) {
                          var result11 = [result12, result13, result14];
                        } else {
                          var result11 = null;
                          pos = savedPos2;
                        }
                      } else {
                        var result11 = null;
                        pos = savedPos2;
                      }
                    } else {
                      var result11 = null;
                      pos = savedPos2;
                    }
                    var result10 = result11 !== null ? result11 : '';
                    if (result10 !== null) {
                      var result6 = [result7, result8, result9, result10];
                    } else {
                      var result6 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result6 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result6 = null;
                  pos = savedPos1;
                }
              } else {
                var result6 = null;
                pos = savedPos1;
              }
              while (result6 !== null) {
                result5.push(result6);
                var savedPos1 = pos;
                var result7 = [];
                var result17 = parse_WS(context);
                while (result17 !== null) {
                  result7.push(result17);
                  var result17 = parse_WS(context);
                }
                if (result7 !== null) {
                  if (input.substr(pos, 1) === ";") {
                    var result8 = ";";
                    pos += 1;
                  } else {
                    var result8 = null;
                    if (context.reportMatchFailures) {
                      matchFailed(quoteString(";"));
                    }
                  }
                  if (result8 !== null) {
                    var result9 = [];
                    var result16 = parse_WS(context);
                    while (result16 !== null) {
                      result9.push(result16);
                      var result16 = parse_WS(context);
                    }
                    if (result9 !== null) {
                      var savedPos2 = pos;
                      var result12 = parse_Verb(context);
                      if (result12 !== null) {
                        var result13 = [];
                        var result15 = parse_WS(context);
                        while (result15 !== null) {
                          result13.push(result15);
                          var result15 = parse_WS(context);
                        }
                        if (result13 !== null) {
                          var result14 = parse_ObjectList(context);
                          if (result14 !== null) {
                            var result11 = [result12, result13, result14];
                          } else {
                            var result11 = null;
                            pos = savedPos2;
                          }
                        } else {
                          var result11 = null;
                          pos = savedPos2;
                        }
                      } else {
                        var result11 = null;
                        pos = savedPos2;
                      }
                      var result10 = result11 !== null ? result11 : '';
                      if (result10 !== null) {
                        var result6 = [result7, result8, result9, result10];
                      } else {
                        var result6 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result6 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result6 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result6 = null;
                  pos = savedPos1;
                }
              }
              if (result5 !== null) {
                var result1 = [result2, result3, result4, result5];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(v, ol, rest) {
                token = {}
                token.token = 'propertylist';
                var triplesContext = [];
                var pairs = [];
                var test = [];

                for( var i=0; i<ol.length; i++) {

                   if(ol[i].triplesContext != null) {
                        triplesContext = triplesContext.concat(ol[i].triplesContext);
                       pairs.push([v, ol[i].chainSubject]);
                    } else {
                        pairs.push([v, ol[i]])
                    }

                }


                for(var i=0; i<rest.length; i++) {
                    var tok = rest[i][3];
                    var newVerb  = tok[0];
                    var newObjsList = tok[2];

                    for(var j=0; j<newObjsList.length; j++) {
                     if(newObjsList[j].triplesContext != null) {
                        triplesContext = triplesContext.concat(newObjsList[j].triplesContext);
                       pairs.push([newVerb, newObjsList[j].chainSubject]);
                      } else {
                        pairs.push([newVerb, newObjsList[j]])
                      }
                    }
                }

                token.pairs = pairs;
                token.triplesContext = triplesContext;

                return token;

          })(result1[0], result1[2], result1[3])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[67] PropertyListNotEmpty");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_PropertyList(context) {
        var cacheKey = "PropertyList" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var result1 = parse_PropertyListNotEmpty(context);
        var result0 = result1 !== null ? result1 : '';
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[68] PropertyList");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_ObjectList(context) {
        var cacheKey = "ObjectList" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = parse_GraphNode(context);
        if (result2 !== null) {
          var result3 = [];
          var result10 = parse_WS(context);
          while (result10 !== null) {
            result3.push(result10);
            var result10 = parse_WS(context);
          }
          if (result3 !== null) {
            var result4 = [];
            var savedPos1 = pos;
            if (input.substr(pos, 1) === ",") {
              var result6 = ",";
              pos += 1;
            } else {
              var result6 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString(","));
              }
            }
            if (result6 !== null) {
              var result7 = [];
              var result9 = parse_WS(context);
              while (result9 !== null) {
                result7.push(result9);
                var result9 = parse_WS(context);
              }
              if (result7 !== null) {
                var result8 = parse_GraphNode(context);
                if (result8 !== null) {
                  var result5 = [result6, result7, result8];
                } else {
                  var result5 = null;
                  pos = savedPos1;
                }
              } else {
                var result5 = null;
                pos = savedPos1;
              }
            } else {
              var result5 = null;
              pos = savedPos1;
            }
            while (result5 !== null) {
              result4.push(result5);
              var savedPos1 = pos;
              if (input.substr(pos, 1) === ",") {
                var result6 = ",";
                pos += 1;
              } else {
                var result6 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString(","));
                }
              }
              if (result6 !== null) {
                var result7 = [];
                var result9 = parse_WS(context);
                while (result9 !== null) {
                  result7.push(result9);
                  var result9 = parse_WS(context);
                }
                if (result7 !== null) {
                  var result8 = parse_GraphNode(context);
                  if (result8 !== null) {
                    var result5 = [result6, result7, result8];
                  } else {
                    var result5 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos1;
                }
              } else {
                var result5 = null;
                pos = savedPos1;
              }
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(obj, objs) {
             var toReturn = [obj];
             for(var i=0; i<objs.length; i++) {
               for(var j=0; j<objs[i].length; j++) {
                 if(typeof(objs[i][j])=="object" && objs[i][j].token != null) {
                     toReturn.push(objs[i][j]);
                 }
              }
            }

            return toReturn;
          })(result1[0], result1[2])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[69] ObjectList");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Verb(context) {
        var cacheKey = "Verb" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var result3 = parse_VarOrIRIref(context);
        if (result3 !== null) {
          var result0 = result3;
        } else {
          if (input.substr(pos, 1) === "a") {
            var result2 = "a";
            pos += 1;
          } else {
            var result2 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("a"));
            }
          }
          var result1 = result2 !== null
            ? (function() {
                  return{token: 'uri', prefix:null, suffix:null, value:"http://www.w3.org/1999/02/22-rdf-syntax-ns#type"}
              })()
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[71] Verb");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_PropertyListNotEmptyPath(context) {
        var cacheKey = "PropertyListNotEmptyPath" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        var result13 = parse_VerbPath(context);
        if (result13 !== null) {
          var result1 = result13;
        } else {
          var result12 = parse_Var(context);
          if (result12 !== null) {
            var result1 = result12;
          } else {
            var result1 = null;;
          };
        }
        if (result1 !== null) {
          var result2 = parse_ObjectList(context);
          if (result2 !== null) {
            var result3 = [];
            var savedPos1 = pos;
            if (input.substr(pos, 1) === ";") {
              var result5 = ";";
              pos += 1;
            } else {
              var result5 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString(";"));
              }
            }
            if (result5 !== null) {
              var savedPos2 = pos;
              var result11 = parse_VerbPath(context);
              if (result11 !== null) {
                var result8 = result11;
              } else {
                var result10 = parse_Var(context);
                if (result10 !== null) {
                  var result8 = result10;
                } else {
                  var result8 = null;;
                };
              }
              if (result8 !== null) {
                var result9 = parse_ObjectList(context);
                if (result9 !== null) {
                  var result7 = [result8, result9];
                } else {
                  var result7 = null;
                  pos = savedPos2;
                }
              } else {
                var result7 = null;
                pos = savedPos2;
              }
              var result6 = result7 !== null ? result7 : '';
              if (result6 !== null) {
                var result4 = [result5, result6];
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
            while (result4 !== null) {
              result3.push(result4);
              var savedPos1 = pos;
              if (input.substr(pos, 1) === ";") {
                var result5 = ";";
                pos += 1;
              } else {
                var result5 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString(";"));
                }
              }
              if (result5 !== null) {
                var savedPos2 = pos;
                var result11 = parse_VerbPath(context);
                if (result11 !== null) {
                  var result8 = result11;
                } else {
                  var result10 = parse_Var(context);
                  if (result10 !== null) {
                    var result8 = result10;
                  } else {
                    var result8 = null;;
                  };
                }
                if (result8 !== null) {
                  var result9 = parse_ObjectList(context);
                  if (result9 !== null) {
                    var result7 = [result8, result9];
                  } else {
                    var result7 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result7 = null;
                  pos = savedPos2;
                }
                var result6 = result7 !== null ? result7 : '';
                if (result6 !== null) {
                  var result4 = [result5, result6];
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            }
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[73] PropertyListNotEmptyPath");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_PropertyListPath(context) {
        var cacheKey = "PropertyListPath" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var result1 = parse_PropertyListNotEmpty(context);
        var result0 = result1 !== null ? result1 : '';
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[74] PropertyListPath");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_VerbPath(context) {
        var cacheKey = "VerbPath" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var result1 = parse_PathAlternative(context);
        var result0 = result1 !== null
          ? (function(p) {
                var path = {};
                path.token = 'path';
                path.value = p;

                return p;
          })(result1)
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[75]");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_PathAlternative(context) {
        var cacheKey = "PathAlternative" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        var result1 = parse_PathSequence(context);
        if (result1 !== null) {
          var result2 = [];
          var savedPos1 = pos;
          if (input.substr(pos, 1) === "|") {
            var result4 = "|";
            pos += 1;
          } else {
            var result4 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("|"));
            }
          }
          if (result4 !== null) {
            var result5 = parse_PathSequence(context);
            if (result5 !== null) {
              var result3 = [result4, result5];
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          while (result3 !== null) {
            result2.push(result3);
            var savedPos1 = pos;
            if (input.substr(pos, 1) === "|") {
              var result4 = "|";
              pos += 1;
            } else {
              var result4 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("|"));
              }
            }
            if (result4 !== null) {
              var result5 = parse_PathSequence(context);
              if (result5 !== null) {
                var result3 = [result4, result5];
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[78] PathAlternative");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_PathSequence(context) {
        var cacheKey = "PathSequence" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        var result1 = parse_PathEltOrInverse(context);
        if (result1 !== null) {
          var result2 = [];
          var savedPos1 = pos;
          if (input.substr(pos, 1) === "/") {
            var result4 = "/";
            pos += 1;
          } else {
            var result4 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("/"));
            }
          }
          if (result4 !== null) {
            var result5 = parse_PathEltOrInverse(context);
            if (result5 !== null) {
              var result3 = [result4, result5];
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          while (result3 !== null) {
            result2.push(result3);
            var savedPos1 = pos;
            if (input.substr(pos, 1) === "/") {
              var result4 = "/";
              pos += 1;
            } else {
              var result4 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("/"));
              }
            }
            if (result4 !== null) {
              var result5 = parse_PathEltOrInverse(context);
              if (result5 !== null) {
                var result3 = [result4, result5];
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[79] PathSequence");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_PathElt(context) {
        var cacheKey = "PathElt" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        var result1 = parse_PathPrimary(context);
        if (result1 !== null) {
          var result3 = parse_PathMod(context);
          var result2 = result3 !== null ? result3 : '';
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[88] PathElt");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_PathEltOrInverse(context) {
        var cacheKey = "PathEltOrInverse" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var result4 = parse_PathElt(context);
        if (result4 !== null) {
          var result0 = result4;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 1) === "^") {
            var result2 = "^";
            pos += 1;
          } else {
            var result2 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("^"));
            }
          }
          if (result2 !== null) {
            var result3 = parse_PathElt(context);
            if (result3 !== null) {
              var result1 = [result2, result3];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[81] PathEltOrInverse");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_PathMod(context) {
        var cacheKey = "PathMod" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        if (input.substr(pos, 1) === "*") {
          var result21 = "*";
          pos += 1;
        } else {
          var result21 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("*"));
          }
        }
        if (result21 !== null) {
          var result0 = result21;
        } else {
          if (input.substr(pos, 1) === "?") {
            var result20 = "?";
            pos += 1;
          } else {
            var result20 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("?"));
            }
          }
          if (result20 !== null) {
            var result0 = result20;
          } else {
            if (input.substr(pos, 1) === "+") {
              var result19 = "+";
              pos += 1;
            } else {
              var result19 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("+"));
              }
            }
            if (result19 !== null) {
              var result0 = result19;
            } else {
              var savedPos0 = pos;
              if (input.substr(pos, 1) === "{") {
                var result2 = "{";
                pos += 1;
              } else {
                var result2 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("{"));
                }
              }
              if (result2 !== null) {
                var savedPos2 = pos;
                var result9 = parse_INTEGER(context);
                if (result9 !== null) {
                  var savedPos3 = pos;
                  if (input.substr(pos, 1) === ",") {
                    var result13 = ",";
                    pos += 1;
                  } else {
                    var result13 = null;
                    if (context.reportMatchFailures) {
                      matchFailed(quoteString(","));
                    }
                  }
                  if (result13 !== null) {
                    if (input.substr(pos, 1) === "}") {
                      var result18 = "}";
                      pos += 1;
                    } else {
                      var result18 = null;
                      if (context.reportMatchFailures) {
                        matchFailed(quoteString("}"));
                      }
                    }
                    if (result18 !== null) {
                      var result14 = result18;
                    } else {
                      var savedPos4 = pos;
                      var result16 = parse_INTEGER(context);
                      if (result16 !== null) {
                        if (input.substr(pos, 1) === "}") {
                          var result17 = "}";
                          pos += 1;
                        } else {
                          var result17 = null;
                          if (context.reportMatchFailures) {
                            matchFailed(quoteString("}"));
                          }
                        }
                        if (result17 !== null) {
                          var result15 = [result16, result17];
                        } else {
                          var result15 = null;
                          pos = savedPos4;
                        }
                      } else {
                        var result15 = null;
                        pos = savedPos4;
                      }
                      if (result15 !== null) {
                        var result14 = result15;
                      } else {
                        var result14 = null;;
                      };
                    }
                    if (result14 !== null) {
                      var result12 = [result13, result14];
                    } else {
                      var result12 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result12 = null;
                    pos = savedPos3;
                  }
                  if (result12 !== null) {
                    var result10 = result12;
                  } else {
                    if (input.substr(pos, 1) === "}") {
                      var result11 = "}";
                      pos += 1;
                    } else {
                      var result11 = null;
                      if (context.reportMatchFailures) {
                        matchFailed(quoteString("}"));
                      }
                    }
                    if (result11 !== null) {
                      var result10 = result11;
                    } else {
                      var result10 = null;;
                    };
                  }
                  if (result10 !== null) {
                    var result8 = [result9, result10];
                  } else {
                    var result8 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result8 = null;
                  pos = savedPos2;
                }
                if (result8 !== null) {
                  var result3 = result8;
                } else {
                  var savedPos1 = pos;
                  if (input.substr(pos, 1) === ",") {
                    var result5 = ",";
                    pos += 1;
                  } else {
                    var result5 = null;
                    if (context.reportMatchFailures) {
                      matchFailed(quoteString(","));
                    }
                  }
                  if (result5 !== null) {
                    var result6 = parse_INTEGER(context);
                    if (result6 !== null) {
                      if (input.substr(pos, 1) === "}") {
                        var result7 = "}";
                        pos += 1;
                      } else {
                        var result7 = null;
                        if (context.reportMatchFailures) {
                          matchFailed(quoteString("}"));
                        }
                      }
                      if (result7 !== null) {
                        var result4 = [result5, result6, result7];
                      } else {
                        var result4 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result4 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                  if (result4 !== null) {
                    var result3 = result4;
                  } else {
                    var result3 = null;;
                  };
                }
                if (result3 !== null) {
                  var result1 = [result2, result3];
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[82] PathMod");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_PathPrimary(context) {
        var cacheKey = "PathPrimary" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var result9 = parse_IRIref(context);
        if (result9 !== null) {
          var result0 = result9;
        } else {
          if (input.substr(pos, 1) === "a") {
            var result8 = "a";
            pos += 1;
          } else {
            var result8 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("a"));
            }
          }
          if (result8 !== null) {
            var result0 = result8;
          } else {
            var savedPos1 = pos;
            if (input.substr(pos, 1) === "!") {
              var result6 = "!";
              pos += 1;
            } else {
              var result6 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("!"));
              }
            }
            if (result6 !== null) {
              var result7 = parse_PathNegatedPropertySet(context);
              if (result7 !== null) {
                var result5 = [result6, result7];
              } else {
                var result5 = null;
                pos = savedPos1;
              }
            } else {
              var result5 = null;
              pos = savedPos1;
            }
            if (result5 !== null) {
              var result0 = result5;
            } else {
              var savedPos0 = pos;
              if (input.substr(pos, 1) === "(") {
                var result2 = "(";
                pos += 1;
              } else {
                var result2 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("("));
                }
              }
              if (result2 !== null) {
                var result3 = parse_PathAlternative(context);
                if (result3 !== null) {
                  if (input.substr(pos, 1) === ")") {
                    var result4 = ")";
                    pos += 1;
                  } else {
                    var result4 = null;
                    if (context.reportMatchFailures) {
                      matchFailed(quoteString(")"));
                    }
                  }
                  if (result4 !== null) {
                    var result1 = [result2, result3, result4];
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[83] PathPrimary");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_PathNegatedPropertySet(context) {
        var cacheKey = "PathNegatedPropertySet" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result11 = parse_PathOneInPropertySet(context);
        if (result11 !== null) {
          var result0 = result11;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 1) === "(") {
            var result2 = "(";
            pos += 1;
          } else {
            var result2 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("("));
            }
          }
          if (result2 !== null) {
            var savedPos1 = pos;
            var result6 = parse_PathOneInPropertySet(context);
            if (result6 !== null) {
              var result7 = [];
              var savedPos2 = pos;
              if (input.substr(pos, 1) === "|") {
                var result9 = "|";
                pos += 1;
              } else {
                var result9 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("|"));
                }
              }
              if (result9 !== null) {
                var result10 = parse_PathOneInPropertySet(context);
                if (result10 !== null) {
                  var result8 = [result9, result10];
                } else {
                  var result8 = null;
                  pos = savedPos2;
                }
              } else {
                var result8 = null;
                pos = savedPos2;
              }
              while (result8 !== null) {
                result7.push(result8);
                var savedPos2 = pos;
                if (input.substr(pos, 1) === "|") {
                  var result9 = "|";
                  pos += 1;
                } else {
                  var result9 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString("|"));
                  }
                }
                if (result9 !== null) {
                  var result10 = parse_PathOneInPropertySet(context);
                  if (result10 !== null) {
                    var result8 = [result9, result10];
                  } else {
                    var result8 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result8 = null;
                  pos = savedPos2;
                }
              }
              if (result7 !== null) {
                var result5 = [result6, result7];
              } else {
                var result5 = null;
                pos = savedPos1;
              }
            } else {
              var result5 = null;
              pos = savedPos1;
            }
            var result3 = result5 !== null ? result5 : '';
            if (result3 !== null) {
              if (input.substr(pos, 1) === ")") {
                var result4 = ")";
                pos += 1;
              } else {
                var result4 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString(")"));
                }
              }
              if (result4 !== null) {
                var result1 = [result2, result3, result4];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_PathOneInPropertySet(context) {
        var cacheKey = "PathOneInPropertySet" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var result7 = parse_IRIref(context);
        if (result7 !== null) {
          var result0 = result7;
        } else {
          if (input.substr(pos, 1) === "a") {
            var result6 = "a";
            pos += 1;
          } else {
            var result6 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("a"));
            }
          }
          if (result6 !== null) {
            var result0 = result6;
          } else {
            var savedPos0 = pos;
            if (input.substr(pos, 1) === "^") {
              var result2 = "^";
              pos += 1;
            } else {
              var result2 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("^"));
              }
            }
            if (result2 !== null) {
              var result5 = parse_IRIref(context);
              if (result5 !== null) {
                var result3 = result5;
              } else {
                if (input.substr(pos, 1) === "a") {
                  var result4 = "a";
                  pos += 1;
                } else {
                  var result4 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString("a"));
                  }
                }
                if (result4 !== null) {
                  var result3 = result4;
                } else {
                  var result3 = null;;
                };
              }
              if (result3 !== null) {
                var result1 = [result2, result3];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[85] PathOneInPropertySet");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_TriplesNode(context) {
        var cacheKey = "TriplesNode" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var result3 = parse_Collection(context);
        var result2 = result3 !== null
          ? (function() {
                return {token:"triplesnode", triplesContext:[], chainSubject:"todo"}
          })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_BlankNodePropertyList(context);
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[87] TriplesNode");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_BlankNodePropertyList(context) {
        var cacheKey = "BlankNodePropertyList" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = [];
        var result12 = parse_WS(context);
        while (result12 !== null) {
          result2.push(result12);
          var result12 = parse_WS(context);
        }
        if (result2 !== null) {
          if (input.substr(pos, 1) === "[") {
            var result3 = "[";
            pos += 1;
          } else {
            var result3 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("["));
            }
          }
          if (result3 !== null) {
            var result4 = [];
            var result11 = parse_WS(context);
            while (result11 !== null) {
              result4.push(result11);
              var result11 = parse_WS(context);
            }
            if (result4 !== null) {
              var result5 = parse_PropertyListNotEmpty(context);
              if (result5 !== null) {
                var result6 = [];
                var result10 = parse_WS(context);
                while (result10 !== null) {
                  result6.push(result10);
                  var result10 = parse_WS(context);
                }
                if (result6 !== null) {
                  if (input.substr(pos, 1) === "]") {
                    var result7 = "]";
                    pos += 1;
                  } else {
                    var result7 = null;
                    if (context.reportMatchFailures) {
                      matchFailed(quoteString("]"));
                    }
                  }
                  if (result7 !== null) {
                    var result8 = [];
                    var result9 = parse_WS(context);
                    while (result9 !== null) {
                      result8.push(result9);
                      var result9 = parse_WS(context);
                    }
                    if (result8 !== null) {
                      var result1 = [result2, result3, result4, result5, result6, result7, result8];
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(pl) {

                GlobalBlankNodeCounter++;
                var subject = {token:'blank', label:''+GlobalBlankNodeCounter};
                var newTriples =  [];

                for(var i=0; i< pl.pairs.length; i++) {
                    var pair = pl.pairs[i];
                    var triple = {}
                    triple.subject = subject;
                    triple.predicate = pair[0];
                    triple.object = pair[1];
                    newTriples.push(triple);
                }

                return {token: 'triplesnode',
                        kind: 'blanknodepropertylist',
                        triplesContext: pl.triplesContext.concat(newTriples),
                        chainSubject: subject};
          })(result1[3])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[88] BlankNodePropertyList");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Collection(context) {
        var cacheKey = "Collection" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        var result1 = [];
        var result12 = parse_WS(context);
        while (result12 !== null) {
          result1.push(result12);
          var result12 = parse_WS(context);
        }
        if (result1 !== null) {
          if (input.substr(pos, 1) === "(") {
            var result2 = "(";
            pos += 1;
          } else {
            var result2 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("("));
            }
          }
          if (result2 !== null) {
            var result3 = [];
            var result11 = parse_WS(context);
            while (result11 !== null) {
              result3.push(result11);
              var result11 = parse_WS(context);
            }
            if (result3 !== null) {
              var result10 = parse_GraphNode(context);
              if (result10 !== null) {
                var result4 = [];
                while (result10 !== null) {
                  result4.push(result10);
                  var result10 = parse_GraphNode(context);
                }
              } else {
                var result4 = null;
              }
              if (result4 !== null) {
                var result5 = [];
                var result9 = parse_WS(context);
                while (result9 !== null) {
                  result5.push(result9);
                  var result9 = parse_WS(context);
                }
                if (result5 !== null) {
                  if (input.substr(pos, 1) === ")") {
                    var result6 = ")";
                    pos += 1;
                  } else {
                    var result6 = null;
                    if (context.reportMatchFailures) {
                      matchFailed(quoteString(")"));
                    }
                  }
                  if (result6 !== null) {
                    var result7 = [];
                    var result8 = parse_WS(context);
                    while (result8 !== null) {
                      result7.push(result8);
                      var result8 = parse_WS(context);
                    }
                    if (result7 !== null) {
                      var result0 = [result1, result2, result3, result4, result5, result6, result7];
                    } else {
                      var result0 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result0 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result0 = null;
                  pos = savedPos0;
                }
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[89] Collection");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_GraphNode(context) {
        var cacheKey = "GraphNode" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var result2 = parse_VarOrTerm(context);
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_TriplesNode(context);
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[90] GraphNode");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_VarOrTerm(context) {
        var cacheKey = "VarOrTerm" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var result2 = parse_Var(context);
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_GraphTerm(context);
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[91] VarOrTerm");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_VarOrIRIref(context) {
        var cacheKey = "VarOrIRIref" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var result2 = parse_Var(context);
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_IRIref(context);
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[92] VarOrIRIref");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Var(context) {
        var cacheKey = "Var" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var result3 = parse_VAR1(context);
        if (result3 !== null) {
          var result1 = result3;
        } else {
          var result2 = parse_VAR2(context);
          if (result2 !== null) {
            var result1 = result2;
          } else {
            var result1 = null;;
          };
        }
        var result0 = result1 !== null
          ? (function(v) {
                var term = {};
                term.token = 'var';
                term.value = v;
                return term;
            })(result1)
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[93] Var");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_GraphTerm(context) {
        var cacheKey = "GraphTerm" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var result6 = parse_IRIref(context);
        if (result6 !== null) {
          var result0 = result6;
        } else {
          var result5 = parse_RDFLiteral(context);
          if (result5 !== null) {
            var result0 = result5;
          } else {
            var result4 = parse_NumericLiteral(context);
            if (result4 !== null) {
              var result0 = result4;
            } else {
              var result3 = parse_BooleanLiteral(context);
              if (result3 !== null) {
                var result0 = result3;
              } else {
                var result2 = parse_BlankNode(context);
                if (result2 !== null) {
                  var result0 = result2;
                } else {
                  var result1 = parse_NIL(context);
                  if (result1 !== null) {
                    var result0 = result1;
                  } else {
                    var result0 = null;;
                  };
                };
              };
            };
          };
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[94] GraphTerm");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_ConditionalOrExpression(context) {
        var cacheKey = "ConditionalOrExpression" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = parse_ConditionalAndExpression(context);
        if (result2 !== null) {
          var result3 = [];
          var savedPos1 = pos;
          var result5 = [];
          var result10 = parse_WS(context);
          while (result10 !== null) {
            result5.push(result10);
            var result10 = parse_WS(context);
          }
          if (result5 !== null) {
            if (input.substr(pos, 2) === "||") {
              var result6 = "||";
              pos += 2;
            } else {
              var result6 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("||"));
              }
            }
            if (result6 !== null) {
              var result7 = [];
              var result9 = parse_WS(context);
              while (result9 !== null) {
                result7.push(result9);
                var result9 = parse_WS(context);
              }
              if (result7 !== null) {
                var result8 = parse_ConditionalAndExpression(context);
                if (result8 !== null) {
                  var result4 = [result5, result6, result7, result8];
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos1 = pos;
            var result5 = [];
            var result10 = parse_WS(context);
            while (result10 !== null) {
              result5.push(result10);
              var result10 = parse_WS(context);
            }
            if (result5 !== null) {
              if (input.substr(pos, 2) === "||") {
                var result6 = "||";
                pos += 2;
              } else {
                var result6 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("||"));
                }
              }
              if (result6 !== null) {
                var result7 = [];
                var result9 = parse_WS(context);
                while (result9 !== null) {
                  result7.push(result9);
                  var result9 = parse_WS(context);
                }
                if (result7 !== null) {
                  var result8 = parse_ConditionalAndExpression(context);
                  if (result8 !== null) {
                    var result4 = [result5, result6, result7, result8];
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(v, vs) {
                if(vs.length === 0) {
                    return v;
                }

                var exp = {};
                exp.token = "expression";
                exp.expressionType = "conditionalor";
                var ops = [v];

                for(var i=0; i<vs.length; i++) {
                    ops.push(vs[i][3]);
                }

                exp.operands = ops;

                return exp;
          })(result1[0], result1[1])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[96] ConditionalOrExpression");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_ConditionalAndExpression(context) {
        var cacheKey = "ConditionalAndExpression" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = parse_RelationalExpression(context);
        if (result2 !== null) {
          var result3 = [];
          var savedPos1 = pos;
          var result5 = [];
          var result10 = parse_WS(context);
          while (result10 !== null) {
            result5.push(result10);
            var result10 = parse_WS(context);
          }
          if (result5 !== null) {
            if (input.substr(pos, 2) === "&&") {
              var result6 = "&&";
              pos += 2;
            } else {
              var result6 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("&&"));
              }
            }
            if (result6 !== null) {
              var result7 = [];
              var result9 = parse_WS(context);
              while (result9 !== null) {
                result7.push(result9);
                var result9 = parse_WS(context);
              }
              if (result7 !== null) {
                var result8 = parse_RelationalExpression(context);
                if (result8 !== null) {
                  var result4 = [result5, result6, result7, result8];
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos1 = pos;
            var result5 = [];
            var result10 = parse_WS(context);
            while (result10 !== null) {
              result5.push(result10);
              var result10 = parse_WS(context);
            }
            if (result5 !== null) {
              if (input.substr(pos, 2) === "&&") {
                var result6 = "&&";
                pos += 2;
              } else {
                var result6 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("&&"));
                }
              }
              if (result6 !== null) {
                var result7 = [];
                var result9 = parse_WS(context);
                while (result9 !== null) {
                  result7.push(result9);
                  var result9 = parse_WS(context);
                }
                if (result7 !== null) {
                  var result8 = parse_RelationalExpression(context);
                  if (result8 !== null) {
                    var result4 = [result5, result6, result7, result8];
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(v, vs) {
                if(vs.length === 0) {
                    return v;
                }
                var exp = {};
                exp.token = "expression";
                exp.expressionType = "conditionaland";
                var ops = [v];

                for(var i=0; i<vs.length; i++) {
                    ops.push(vs[i][3]);
                }

                exp.operands = ops;

                return exp;
          })(result1[0], result1[1])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[97] ConditionalAndExpression");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_RelationalExpression(context) {
        var cacheKey = "RelationalExpression" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = parse_AdditiveExpression(context);
        if (result2 !== null) {
          var result3 = [];
          var savedPos6 = pos;
          if (input.substr(pos, 1) === "=") {
            var result21 = "=";
            pos += 1;
          } else {
            var result21 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("="));
            }
          }
          if (result21 !== null) {
            var result22 = parse_AdditiveExpression(context);
            if (result22 !== null) {
              var result20 = [result21, result22];
            } else {
              var result20 = null;
              pos = savedPos6;
            }
          } else {
            var result20 = null;
            pos = savedPos6;
          }
          if (result20 !== null) {
            var result4 = result20;
          } else {
            var savedPos5 = pos;
            if (input.substr(pos, 2) === "!=") {
              var result18 = "!=";
              pos += 2;
            } else {
              var result18 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("!="));
              }
            }
            if (result18 !== null) {
              var result19 = parse_AdditiveExpression(context);
              if (result19 !== null) {
                var result17 = [result18, result19];
              } else {
                var result17 = null;
                pos = savedPos5;
              }
            } else {
              var result17 = null;
              pos = savedPos5;
            }
            if (result17 !== null) {
              var result4 = result17;
            } else {
              var savedPos4 = pos;
              if (input.substr(pos, 1) === "<") {
                var result15 = "<";
                pos += 1;
              } else {
                var result15 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("<"));
                }
              }
              if (result15 !== null) {
                var result16 = parse_AdditiveExpression(context);
                if (result16 !== null) {
                  var result14 = [result15, result16];
                } else {
                  var result14 = null;
                  pos = savedPos4;
                }
              } else {
                var result14 = null;
                pos = savedPos4;
              }
              if (result14 !== null) {
                var result4 = result14;
              } else {
                var savedPos3 = pos;
                if (input.substr(pos, 1) === ">") {
                  var result12 = ">";
                  pos += 1;
                } else {
                  var result12 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString(">"));
                  }
                }
                if (result12 !== null) {
                  var result13 = parse_AdditiveExpression(context);
                  if (result13 !== null) {
                    var result11 = [result12, result13];
                  } else {
                    var result11 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result11 = null;
                  pos = savedPos3;
                }
                if (result11 !== null) {
                  var result4 = result11;
                } else {
                  var savedPos2 = pos;
                  if (input.substr(pos, 2) === "<=") {
                    var result9 = "<=";
                    pos += 2;
                  } else {
                    var result9 = null;
                    if (context.reportMatchFailures) {
                      matchFailed(quoteString("<="));
                    }
                  }
                  if (result9 !== null) {
                    var result10 = parse_AdditiveExpression(context);
                    if (result10 !== null) {
                      var result8 = [result9, result10];
                    } else {
                      var result8 = null;
                      pos = savedPos2;
                    }
                  } else {
                    var result8 = null;
                    pos = savedPos2;
                  }
                  if (result8 !== null) {
                    var result4 = result8;
                  } else {
                    var savedPos1 = pos;
                    if (input.substr(pos, 2) === ">=") {
                      var result6 = ">=";
                      pos += 2;
                    } else {
                      var result6 = null;
                      if (context.reportMatchFailures) {
                        matchFailed(quoteString(">="));
                      }
                    }
                    if (result6 !== null) {
                      var result7 = parse_AdditiveExpression(context);
                      if (result7 !== null) {
                        var result5 = [result6, result7];
                      } else {
                        var result5 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result5 = null;
                      pos = savedPos1;
                    }
                    if (result5 !== null) {
                      var result4 = result5;
                    } else {
                      var result4 = null;;
                    };
                  };
                };
              };
            };
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos6 = pos;
            if (input.substr(pos, 1) === "=") {
              var result21 = "=";
              pos += 1;
            } else {
              var result21 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("="));
              }
            }
            if (result21 !== null) {
              var result22 = parse_AdditiveExpression(context);
              if (result22 !== null) {
                var result20 = [result21, result22];
              } else {
                var result20 = null;
                pos = savedPos6;
              }
            } else {
              var result20 = null;
              pos = savedPos6;
            }
            if (result20 !== null) {
              var result4 = result20;
            } else {
              var savedPos5 = pos;
              if (input.substr(pos, 2) === "!=") {
                var result18 = "!=";
                pos += 2;
              } else {
                var result18 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("!="));
                }
              }
              if (result18 !== null) {
                var result19 = parse_AdditiveExpression(context);
                if (result19 !== null) {
                  var result17 = [result18, result19];
                } else {
                  var result17 = null;
                  pos = savedPos5;
                }
              } else {
                var result17 = null;
                pos = savedPos5;
              }
              if (result17 !== null) {
                var result4 = result17;
              } else {
                var savedPos4 = pos;
                if (input.substr(pos, 1) === "<") {
                  var result15 = "<";
                  pos += 1;
                } else {
                  var result15 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString("<"));
                  }
                }
                if (result15 !== null) {
                  var result16 = parse_AdditiveExpression(context);
                  if (result16 !== null) {
                    var result14 = [result15, result16];
                  } else {
                    var result14 = null;
                    pos = savedPos4;
                  }
                } else {
                  var result14 = null;
                  pos = savedPos4;
                }
                if (result14 !== null) {
                  var result4 = result14;
                } else {
                  var savedPos3 = pos;
                  if (input.substr(pos, 1) === ">") {
                    var result12 = ">";
                    pos += 1;
                  } else {
                    var result12 = null;
                    if (context.reportMatchFailures) {
                      matchFailed(quoteString(">"));
                    }
                  }
                  if (result12 !== null) {
                    var result13 = parse_AdditiveExpression(context);
                    if (result13 !== null) {
                      var result11 = [result12, result13];
                    } else {
                      var result11 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result11 = null;
                    pos = savedPos3;
                  }
                  if (result11 !== null) {
                    var result4 = result11;
                  } else {
                    var savedPos2 = pos;
                    if (input.substr(pos, 2) === "<=") {
                      var result9 = "<=";
                      pos += 2;
                    } else {
                      var result9 = null;
                      if (context.reportMatchFailures) {
                        matchFailed(quoteString("<="));
                      }
                    }
                    if (result9 !== null) {
                      var result10 = parse_AdditiveExpression(context);
                      if (result10 !== null) {
                        var result8 = [result9, result10];
                      } else {
                        var result8 = null;
                        pos = savedPos2;
                      }
                    } else {
                      var result8 = null;
                      pos = savedPos2;
                    }
                    if (result8 !== null) {
                      var result4 = result8;
                    } else {
                      var savedPos1 = pos;
                      if (input.substr(pos, 2) === ">=") {
                        var result6 = ">=";
                        pos += 2;
                      } else {
                        var result6 = null;
                        if (context.reportMatchFailures) {
                          matchFailed(quoteString(">="));
                        }
                      }
                      if (result6 !== null) {
                        var result7 = parse_AdditiveExpression(context);
                        if (result7 !== null) {
                          var result5 = [result6, result7];
                        } else {
                          var result5 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result5 = null;
                        pos = savedPos1;
                      }
                      if (result5 !== null) {
                        var result4 = result5;
                      } else {
                        var result4 = null;;
                      };
                    };
                  };
                };
              };
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(op1, op2) {
                if(op2.length === 0) {
                    return op1;
                } else {
                  var exp = {};
                  exp.expressionType = "relationalexpression"
                  exp.operator = op2[0][0];
                  exp.op1 = op1;
                  exp.op2 = op2[0][1];

                  return exp;
                }
            })(result1[0], result1[1])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[99] RelationalExpression");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_AdditiveExpression(context) {
        var cacheKey = "AdditiveExpression" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = parse_MultiplicativeExpression(context);
        if (result2 !== null) {
          var result3 = [];
          var savedPos5 = pos;
          var result33 = [];
          var result38 = parse_WS(context);
          while (result38 !== null) {
            result33.push(result38);
            var result38 = parse_WS(context);
          }
          if (result33 !== null) {
            if (input.substr(pos, 1) === "+") {
              var result34 = "+";
              pos += 1;
            } else {
              var result34 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("+"));
              }
            }
            if (result34 !== null) {
              var result35 = [];
              var result37 = parse_WS(context);
              while (result37 !== null) {
                result35.push(result37);
                var result37 = parse_WS(context);
              }
              if (result35 !== null) {
                var result36 = parse_MultiplicativeExpression(context);
                if (result36 !== null) {
                  var result32 = [result33, result34, result35, result36];
                } else {
                  var result32 = null;
                  pos = savedPos5;
                }
              } else {
                var result32 = null;
                pos = savedPos5;
              }
            } else {
              var result32 = null;
              pos = savedPos5;
            }
          } else {
            var result32 = null;
            pos = savedPos5;
          }
          if (result32 !== null) {
            var result4 = result32;
          } else {
            var savedPos4 = pos;
            var result26 = [];
            var result31 = parse_WS(context);
            while (result31 !== null) {
              result26.push(result31);
              var result31 = parse_WS(context);
            }
            if (result26 !== null) {
              if (input.substr(pos, 1) === "-") {
                var result27 = "-";
                pos += 1;
              } else {
                var result27 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("-"));
                }
              }
              if (result27 !== null) {
                var result28 = [];
                var result30 = parse_WS(context);
                while (result30 !== null) {
                  result28.push(result30);
                  var result30 = parse_WS(context);
                }
                if (result28 !== null) {
                  var result29 = parse_MultiplicativeExpression(context);
                  if (result29 !== null) {
                    var result25 = [result26, result27, result28, result29];
                  } else {
                    var result25 = null;
                    pos = savedPos4;
                  }
                } else {
                  var result25 = null;
                  pos = savedPos4;
                }
              } else {
                var result25 = null;
                pos = savedPos4;
              }
            } else {
              var result25 = null;
              pos = savedPos4;
            }
            if (result25 !== null) {
              var result4 = result25;
            } else {
              var savedPos1 = pos;
              var result24 = parse_NumericLiteralNegative(context);
              if (result24 !== null) {
                var result6 = result24;
              } else {
                var result23 = parse_NumericLiteralNegative(context);
                if (result23 !== null) {
                  var result6 = result23;
                } else {
                  var result6 = null;;
                };
              }
              if (result6 !== null) {
                var savedPos3 = pos;
                var result17 = [];
                var result22 = parse_WS(context);
                while (result22 !== null) {
                  result17.push(result22);
                  var result22 = parse_WS(context);
                }
                if (result17 !== null) {
                  if (input.substr(pos, 1) === "*") {
                    var result18 = "*";
                    pos += 1;
                  } else {
                    var result18 = null;
                    if (context.reportMatchFailures) {
                      matchFailed(quoteString("*"));
                    }
                  }
                  if (result18 !== null) {
                    var result19 = [];
                    var result21 = parse_WS(context);
                    while (result21 !== null) {
                      result19.push(result21);
                      var result21 = parse_WS(context);
                    }
                    if (result19 !== null) {
                      var result20 = parse_UnaryExpression(context);
                      if (result20 !== null) {
                        var result16 = [result17, result18, result19, result20];
                      } else {
                        var result16 = null;
                        pos = savedPos3;
                      }
                    } else {
                      var result16 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result16 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result16 = null;
                  pos = savedPos3;
                }
                if (result16 !== null) {
                  var result8 = result16;
                } else {
                  var savedPos2 = pos;
                  var result10 = [];
                  var result15 = parse_WS(context);
                  while (result15 !== null) {
                    result10.push(result15);
                    var result15 = parse_WS(context);
                  }
                  if (result10 !== null) {
                    if (input.substr(pos, 1) === "/") {
                      var result11 = "/";
                      pos += 1;
                    } else {
                      var result11 = null;
                      if (context.reportMatchFailures) {
                        matchFailed(quoteString("/"));
                      }
                    }
                    if (result11 !== null) {
                      var result12 = [];
                      var result14 = parse_WS(context);
                      while (result14 !== null) {
                        result12.push(result14);
                        var result14 = parse_WS(context);
                      }
                      if (result12 !== null) {
                        var result13 = parse_UnaryExpression(context);
                        if (result13 !== null) {
                          var result9 = [result10, result11, result12, result13];
                        } else {
                          var result9 = null;
                          pos = savedPos2;
                        }
                      } else {
                        var result9 = null;
                        pos = savedPos2;
                      }
                    } else {
                      var result9 = null;
                      pos = savedPos2;
                    }
                  } else {
                    var result9 = null;
                    pos = savedPos2;
                  }
                  if (result9 !== null) {
                    var result8 = result9;
                  } else {
                    var result8 = null;;
                  };
                }
                var result7 = result8 !== null ? result8 : '';
                if (result7 !== null) {
                  var result5 = [result6, result7];
                } else {
                  var result5 = null;
                  pos = savedPos1;
                }
              } else {
                var result5 = null;
                pos = savedPos1;
              }
              if (result5 !== null) {
                var result4 = result5;
              } else {
                var result4 = null;;
              };
            };
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos5 = pos;
            var result33 = [];
            var result38 = parse_WS(context);
            while (result38 !== null) {
              result33.push(result38);
              var result38 = parse_WS(context);
            }
            if (result33 !== null) {
              if (input.substr(pos, 1) === "+") {
                var result34 = "+";
                pos += 1;
              } else {
                var result34 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("+"));
                }
              }
              if (result34 !== null) {
                var result35 = [];
                var result37 = parse_WS(context);
                while (result37 !== null) {
                  result35.push(result37);
                  var result37 = parse_WS(context);
                }
                if (result35 !== null) {
                  var result36 = parse_MultiplicativeExpression(context);
                  if (result36 !== null) {
                    var result32 = [result33, result34, result35, result36];
                  } else {
                    var result32 = null;
                    pos = savedPos5;
                  }
                } else {
                  var result32 = null;
                  pos = savedPos5;
                }
              } else {
                var result32 = null;
                pos = savedPos5;
              }
            } else {
              var result32 = null;
              pos = savedPos5;
            }
            if (result32 !== null) {
              var result4 = result32;
            } else {
              var savedPos4 = pos;
              var result26 = [];
              var result31 = parse_WS(context);
              while (result31 !== null) {
                result26.push(result31);
                var result31 = parse_WS(context);
              }
              if (result26 !== null) {
                if (input.substr(pos, 1) === "-") {
                  var result27 = "-";
                  pos += 1;
                } else {
                  var result27 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString("-"));
                  }
                }
                if (result27 !== null) {
                  var result28 = [];
                  var result30 = parse_WS(context);
                  while (result30 !== null) {
                    result28.push(result30);
                    var result30 = parse_WS(context);
                  }
                  if (result28 !== null) {
                    var result29 = parse_MultiplicativeExpression(context);
                    if (result29 !== null) {
                      var result25 = [result26, result27, result28, result29];
                    } else {
                      var result25 = null;
                      pos = savedPos4;
                    }
                  } else {
                    var result25 = null;
                    pos = savedPos4;
                  }
                } else {
                  var result25 = null;
                  pos = savedPos4;
                }
              } else {
                var result25 = null;
                pos = savedPos4;
              }
              if (result25 !== null) {
                var result4 = result25;
              } else {
                var savedPos1 = pos;
                var result24 = parse_NumericLiteralNegative(context);
                if (result24 !== null) {
                  var result6 = result24;
                } else {
                  var result23 = parse_NumericLiteralNegative(context);
                  if (result23 !== null) {
                    var result6 = result23;
                  } else {
                    var result6 = null;;
                  };
                }
                if (result6 !== null) {
                  var savedPos3 = pos;
                  var result17 = [];
                  var result22 = parse_WS(context);
                  while (result22 !== null) {
                    result17.push(result22);
                    var result22 = parse_WS(context);
                  }
                  if (result17 !== null) {
                    if (input.substr(pos, 1) === "*") {
                      var result18 = "*";
                      pos += 1;
                    } else {
                      var result18 = null;
                      if (context.reportMatchFailures) {
                        matchFailed(quoteString("*"));
                      }
                    }
                    if (result18 !== null) {
                      var result19 = [];
                      var result21 = parse_WS(context);
                      while (result21 !== null) {
                        result19.push(result21);
                        var result21 = parse_WS(context);
                      }
                      if (result19 !== null) {
                        var result20 = parse_UnaryExpression(context);
                        if (result20 !== null) {
                          var result16 = [result17, result18, result19, result20];
                        } else {
                          var result16 = null;
                          pos = savedPos3;
                        }
                      } else {
                        var result16 = null;
                        pos = savedPos3;
                      }
                    } else {
                      var result16 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result16 = null;
                    pos = savedPos3;
                  }
                  if (result16 !== null) {
                    var result8 = result16;
                  } else {
                    var savedPos2 = pos;
                    var result10 = [];
                    var result15 = parse_WS(context);
                    while (result15 !== null) {
                      result10.push(result15);
                      var result15 = parse_WS(context);
                    }
                    if (result10 !== null) {
                      if (input.substr(pos, 1) === "/") {
                        var result11 = "/";
                        pos += 1;
                      } else {
                        var result11 = null;
                        if (context.reportMatchFailures) {
                          matchFailed(quoteString("/"));
                        }
                      }
                      if (result11 !== null) {
                        var result12 = [];
                        var result14 = parse_WS(context);
                        while (result14 !== null) {
                          result12.push(result14);
                          var result14 = parse_WS(context);
                        }
                        if (result12 !== null) {
                          var result13 = parse_UnaryExpression(context);
                          if (result13 !== null) {
                            var result9 = [result10, result11, result12, result13];
                          } else {
                            var result9 = null;
                            pos = savedPos2;
                          }
                        } else {
                          var result9 = null;
                          pos = savedPos2;
                        }
                      } else {
                        var result9 = null;
                        pos = savedPos2;
                      }
                    } else {
                      var result9 = null;
                      pos = savedPos2;
                    }
                    if (result9 !== null) {
                      var result8 = result9;
                    } else {
                      var result8 = null;;
                    };
                  }
                  var result7 = result8 !== null ? result8 : '';
                  if (result7 !== null) {
                    var result5 = [result6, result7];
                  } else {
                    var result5 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos1;
                }
                if (result5 !== null) {
                  var result4 = result5;
                } else {
                  var result4 = null;;
                };
              };
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(op1, ops) {
                if(ops.length === 0) {
                    return op1;
                }

                var ex = {};
                ex.token = 'expression';
                ex.summand = op1;
                ex.summands = [];

                for(var i=0; i<ops.length; i++) {
                    var summand = ops[i];
                    var sum = {}
                    if(summand.length == 4 && typeof(summand[1]) === "string") {
                        sum.operator = summand[1];
                        sum.expression = summand[3];
                    } else {
                        var subexp = {}
                        var firstFactor = sum[0];
                        var operator = sum[1][1];
                        var secondFactor = sum[1][3];
                        var operator = null;
                        if(firstFactor.value < 0) {
                            sum.operator = '-';
                            firstFactor.value = - firstFactor.value;
                        } else {
                            sum.operator = '+';
                        }
                        subexp.token = 'expression';
                        subexp.expressionType = 'MultiplicativeExpression';
                        subexp.operator = firstFactor;
                        subexp.factors = [{operator: operator, expression: secondFactor}];

                        sum.expression = subexp;
                    }
                    ex.summands.push(sum);
                }

                return ex;
          })(result1[0], result1[1])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[101] AdditiveExpression");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_MultiplicativeExpression(context) {
        var cacheKey = "MultiplicativeExpression" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = parse_UnaryExpression(context);
        if (result2 !== null) {
          var result3 = [];
          var savedPos2 = pos;
          if (input.substr(pos, 1) === "*") {
            var result9 = "*";
            pos += 1;
          } else {
            var result9 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("*"));
            }
          }
          if (result9 !== null) {
            var result10 = parse_UnaryExpression(context);
            if (result10 !== null) {
              var result8 = [result9, result10];
            } else {
              var result8 = null;
              pos = savedPos2;
            }
          } else {
            var result8 = null;
            pos = savedPos2;
          }
          if (result8 !== null) {
            var result4 = result8;
          } else {
            var savedPos1 = pos;
            if (input.substr(pos, 1) === "/") {
              var result6 = "/";
              pos += 1;
            } else {
              var result6 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("/"));
              }
            }
            if (result6 !== null) {
              var result7 = parse_UnaryExpression(context);
              if (result7 !== null) {
                var result5 = [result6, result7];
              } else {
                var result5 = null;
                pos = savedPos1;
              }
            } else {
              var result5 = null;
              pos = savedPos1;
            }
            if (result5 !== null) {
              var result4 = result5;
            } else {
              var result4 = null;;
            };
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos2 = pos;
            if (input.substr(pos, 1) === "*") {
              var result9 = "*";
              pos += 1;
            } else {
              var result9 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("*"));
              }
            }
            if (result9 !== null) {
              var result10 = parse_UnaryExpression(context);
              if (result10 !== null) {
                var result8 = [result9, result10];
              } else {
                var result8 = null;
                pos = savedPos2;
              }
            } else {
              var result8 = null;
              pos = savedPos2;
            }
            if (result8 !== null) {
              var result4 = result8;
            } else {
              var savedPos1 = pos;
              if (input.substr(pos, 1) === "/") {
                var result6 = "/";
                pos += 1;
              } else {
                var result6 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("/"));
                }
              }
              if (result6 !== null) {
                var result7 = parse_UnaryExpression(context);
                if (result7 !== null) {
                  var result5 = [result6, result7];
                } else {
                  var result5 = null;
                  pos = savedPos1;
                }
              } else {
                var result5 = null;
                pos = savedPos1;
              }
              if (result5 !== null) {
                var result4 = result5;
              } else {
                var result4 = null;;
              };
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(exp, exps) {
                if(exps.length === 0) {
                    return exp;
                }

                var ex = {};
                ex.token = 'expression';
                ex.expressionType = 'multiplicativeexpression';
                ex.factor = exp;
                ex.factors = [];
                for(var i=0; i<exps.length; i++) {
                    var factor = exps[i];
                    var fact = {};
                    fact.operator = factor[0];
                    fact.expression = factor[1];
                    ex.factors.push(fact);
                }

                return ex;
          })(result1[0], result1[1])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[102] MultiplicativeExpression");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_UnaryExpression(context) {
        var cacheKey = "UnaryExpression" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos2 = pos;
        if (input.substr(pos, 1) === "!") {
          var result12 = "!";
          pos += 1;
        } else {
          var result12 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("!"));
          }
        }
        if (result12 !== null) {
          var result13 = parse_PrimaryExpression(context);
          if (result13 !== null) {
            var result11 = [result12, result13];
          } else {
            var result11 = null;
            pos = savedPos2;
          }
        } else {
          var result11 = null;
          pos = savedPos2;
        }
        var result10 = result11 !== null
          ? (function(e) {
                var ex = {};
                ex.token = 'expression';
                ex.expressionType = 'unaryexpression';
                ex.unaryexpression = "!";
                ex.expression = v;

                return ex;
            })(result11[1])
          : null;
        if (result10 !== null) {
          var result0 = result10;
        } else {
          var savedPos1 = pos;
          if (input.substr(pos, 1) === "+") {
            var result8 = "+";
            pos += 1;
          } else {
            var result8 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("+"));
            }
          }
          if (result8 !== null) {
            var result9 = parse_PrimaryExpression(context);
            if (result9 !== null) {
              var result7 = [result8, result9];
            } else {
              var result7 = null;
              pos = savedPos1;
            }
          } else {
            var result7 = null;
            pos = savedPos1;
          }
          var result6 = result7 !== null
            ? (function(v) {
                  var ex = {};
                  ex.token = 'expression';
                  ex.expressionType = 'unaryexpression';
                  ex.unaryexpression = "+";
                  ex.expression = v;

                  return ex;
              })(result7[1])
            : null;
          if (result6 !== null) {
            var result0 = result6;
          } else {
            var savedPos0 = pos;
            if (input.substr(pos, 1) === "-") {
              var result4 = "-";
              pos += 1;
            } else {
              var result4 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("-"));
              }
            }
            if (result4 !== null) {
              var result5 = parse_PrimaryExpression(context);
              if (result5 !== null) {
                var result3 = [result4, result5];
              } else {
                var result3 = null;
                pos = savedPos0;
              }
            } else {
              var result3 = null;
              pos = savedPos0;
            }
            var result2 = result3 !== null
              ? (function(v) {
                    var ex = {};
                    ex.token = 'expression';
                    ex.expressionType = 'unaryexpression';
                    ex.unaryexpression = "-";
                    ex.expression = v;

                    return ex;
                })(result3[1])
              : null;
            if (result2 !== null) {
              var result0 = result2;
            } else {
              var result1 = parse_PrimaryExpression(context);
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[103] UnaryExpression");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_PrimaryExpression(context) {
        var cacheKey = "PrimaryExpression" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var result11 = parse_BrackettedExpression(context);
        if (result11 !== null) {
          var result0 = result11;
        } else {
          var result10 = parse_BuiltInCall(context);
          if (result10 !== null) {
            var result0 = result10;
          } else {
            var result9 = parse_RDFLiteral(context);
            var result8 = result9 !== null
              ? (function(v) {
                    var ex = {};
                    ex.token = 'expression';
                    ex.expressionType = 'atomic';
                    ex.primaryexpression = 'rdfliteral';
                    ex.value = v;

                    return ex;
                })(result9)
              : null;
            if (result8 !== null) {
              var result0 = result8;
            } else {
              var result7 = parse_NumericLiteral(context);
              var result6 = result7 !== null
                ? (function(v) {
                      var ex = {};
                      ex.token = 'expression';
                      ex.expressionType = 'atomic';
                      ex.primaryexpression = 'numericliteral';
                      ex.value = v;

                      return ex;
                  })(result7)
                : null;
              if (result6 !== null) {
                var result0 = result6;
              } else {
                var result5 = parse_BooleanLiteral(context);
                var result4 = result5 !== null
                  ? (function(v) {
                        var ex = {};
                        ex.token = 'expression';
                        ex.expressionType = 'atomic';
                        ex.primaryexpression = 'booleanliteral';
                        ex.value = v;

                        return ex;
                    })(result5)
                  : null;
                if (result4 !== null) {
                  var result0 = result4;
                } else {
                  var result3 = parse_Aggregate(context);
                  if (result3 !== null) {
                    var result0 = result3;
                  } else {
                    var result2 = parse_Var(context);
                    var result1 = result2 !== null
                      ? (function(v) {
                            var ex = {};
                            ex.token = 'expression';
                            ex.expressionType = 'atomic';
                            ex.primaryexpression = 'var';
                            ex.value = v;

                            return ex;
                        })(result2)
                      : null;
                    if (result1 !== null) {
                      var result0 = result1;
                    } else {
                      var result0 = null;;
                    };
                  };
                };
              };
            };
          };
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[104] PrimaryExpression");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_BrackettedExpression(context) {
        var cacheKey = "BrackettedExpression" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "(") {
          var result2 = "(";
          pos += 1;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("("));
          }
        }
        if (result2 !== null) {
          var result3 = [];
          var result8 = parse_WS(context);
          while (result8 !== null) {
            result3.push(result8);
            var result8 = parse_WS(context);
          }
          if (result3 !== null) {
            var result4 = parse_ConditionalOrExpression(context);
            if (result4 !== null) {
              var result5 = [];
              var result7 = parse_WS(context);
              while (result7 !== null) {
                result5.push(result7);
                var result7 = parse_WS(context);
              }
              if (result5 !== null) {
                if (input.substr(pos, 1) === ")") {
                  var result6 = ")";
                  pos += 1;
                } else {
                  var result6 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString(")"));
                  }
                }
                if (result6 !== null) {
                  var result1 = [result2, result3, result4, result5, result6];
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(e) {
                return e;
          })(result1[2])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[105] BrackettedExpression");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_BuiltInCall(context) {
        var cacheKey = "BuiltInCall" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos4 = pos;
        if (input.substr(pos, 3) === "STR") {
          var result54 = "STR";
          pos += 3;
        } else {
          var result54 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("STR"));
          }
        }
        if (result54 !== null) {
          var result55 = [];
          var result59 = parse_WS(context);
          while (result59 !== null) {
            result55.push(result59);
            var result59 = parse_WS(context);
          }
          if (result55 !== null) {
            if (input.substr(pos, 1) === "(") {
              var result56 = "(";
              pos += 1;
            } else {
              var result56 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("("));
              }
            }
            if (result56 !== null) {
              var result57 = parse_ConditionalOrExpression(context);
              if (result57 !== null) {
                if (input.substr(pos, 1) === ")") {
                  var result58 = ")";
                  pos += 1;
                } else {
                  var result58 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString(")"));
                  }
                }
                if (result58 !== null) {
                  var result53 = [result54, result55, result56, result57, result58];
                } else {
                  var result53 = null;
                  pos = savedPos4;
                }
              } else {
                var result53 = null;
                pos = savedPos4;
              }
            } else {
              var result53 = null;
              pos = savedPos4;
            }
          } else {
            var result53 = null;
            pos = savedPos4;
          }
        } else {
          var result53 = null;
          pos = savedPos4;
        }
        var result52 = result53 !== null
          ? (function(e) {
                var ex = {};
                ex.token = 'expression'
                ex.expressionType = 'builtincall'
                ex.builtincall = 'str'
                ex.args = [e]

                return ex;
            })(result53[3])
          : null;
        if (result52 !== null) {
          var result0 = result52;
        } else {
          var savedPos3 = pos;
          if (input.substr(pos, 4) === "LANG") {
            var result46 = "LANG";
            pos += 4;
          } else {
            var result46 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("LANG"));
            }
          }
          if (result46 !== null) {
            var result47 = [];
            var result51 = parse_WS(context);
            while (result51 !== null) {
              result47.push(result51);
              var result51 = parse_WS(context);
            }
            if (result47 !== null) {
              if (input.substr(pos, 1) === "(") {
                var result48 = "(";
                pos += 1;
              } else {
                var result48 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("("));
                }
              }
              if (result48 !== null) {
                var result49 = parse_ConditionalOrExpression(context);
                if (result49 !== null) {
                  if (input.substr(pos, 1) === ")") {
                    var result50 = ")";
                    pos += 1;
                  } else {
                    var result50 = null;
                    if (context.reportMatchFailures) {
                      matchFailed(quoteString(")"));
                    }
                  }
                  if (result50 !== null) {
                    var result45 = [result46, result47, result48, result49, result50];
                  } else {
                    var result45 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result45 = null;
                  pos = savedPos3;
                }
              } else {
                var result45 = null;
                pos = savedPos3;
              }
            } else {
              var result45 = null;
              pos = savedPos3;
            }
          } else {
            var result45 = null;
            pos = savedPos3;
          }
          var result44 = result45 !== null
            ? (function(e) {
                  var ex = {};
                  ex.token = 'expression'
                  ex.expressionType = 'builtincall'
                  ex.builtincall = 'lang'
                  ex.args = [e]

                  return ex;
            })(result45[3])
            : null;
          if (result44 !== null) {
            var result0 = result44;
          } else {
            var savedPos2 = pos;
            if (input.substr(pos, 11) === "LANGMATCHES") {
              var result28 = "LANGMATCHES";
              pos += 11;
            } else {
              var result28 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("LANGMATCHES"));
              }
            }
            if (result28 !== null) {
              var result29 = [];
              var result43 = parse_WS(context);
              while (result43 !== null) {
                result29.push(result43);
                var result43 = parse_WS(context);
              }
              if (result29 !== null) {
                if (input.substr(pos, 1) === "(") {
                  var result30 = "(";
                  pos += 1;
                } else {
                  var result30 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString("("));
                  }
                }
                if (result30 !== null) {
                  var result31 = [];
                  var result42 = parse_WS(context);
                  while (result42 !== null) {
                    result31.push(result42);
                    var result42 = parse_WS(context);
                  }
                  if (result31 !== null) {
                    var result32 = parse_ConditionalOrExpression(context);
                    if (result32 !== null) {
                      var result33 = [];
                      var result41 = parse_WS(context);
                      while (result41 !== null) {
                        result33.push(result41);
                        var result41 = parse_WS(context);
                      }
                      if (result33 !== null) {
                        if (input.substr(pos, 1) === ",") {
                          var result34 = ",";
                          pos += 1;
                        } else {
                          var result34 = null;
                          if (context.reportMatchFailures) {
                            matchFailed(quoteString(","));
                          }
                        }
                        if (result34 !== null) {
                          var result35 = [];
                          var result40 = parse_WS(context);
                          while (result40 !== null) {
                            result35.push(result40);
                            var result40 = parse_WS(context);
                          }
                          if (result35 !== null) {
                            var result36 = parse_ConditionalOrExpression(context);
                            if (result36 !== null) {
                              var result37 = [];
                              var result39 = parse_WS(context);
                              while (result39 !== null) {
                                result37.push(result39);
                                var result39 = parse_WS(context);
                              }
                              if (result37 !== null) {
                                if (input.substr(pos, 1) === ")") {
                                  var result38 = ")";
                                  pos += 1;
                                } else {
                                  var result38 = null;
                                  if (context.reportMatchFailures) {
                                    matchFailed(quoteString(")"));
                                  }
                                }
                                if (result38 !== null) {
                                  var result27 = [result28, result29, result30, result31, result32, result33, result34, result35, result36, result37, result38];
                                } else {
                                  var result27 = null;
                                  pos = savedPos2;
                                }
                              } else {
                                var result27 = null;
                                pos = savedPos2;
                              }
                            } else {
                              var result27 = null;
                              pos = savedPos2;
                            }
                          } else {
                            var result27 = null;
                            pos = savedPos2;
                          }
                        } else {
                          var result27 = null;
                          pos = savedPos2;
                        }
                      } else {
                        var result27 = null;
                        pos = savedPos2;
                      }
                    } else {
                      var result27 = null;
                      pos = savedPos2;
                    }
                  } else {
                    var result27 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result27 = null;
                  pos = savedPos2;
                }
              } else {
                var result27 = null;
                pos = savedPos2;
              }
            } else {
              var result27 = null;
              pos = savedPos2;
            }
            var result26 = result27 !== null
              ? (function(e1, e2) {
                    var ex = {};
                    ex.token = 'expression'
                    ex.expressionType = 'builtincall'
                    ex.builtincall = 'langmatches'
                    ex.args = [e1,e2]

                    return ex;
              })(result27[4], result27[8])
              : null;
            if (result26 !== null) {
              var result0 = result26;
            } else {
              var savedPos1 = pos;
              if (input.substr(pos, 8) === "DATATYPE") {
                var result16 = "DATATYPE";
                pos += 8;
              } else {
                var result16 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("DATATYPE"));
                }
              }
              if (result16 !== null) {
                var result17 = [];
                var result25 = parse_WS(context);
                while (result25 !== null) {
                  result17.push(result25);
                  var result25 = parse_WS(context);
                }
                if (result17 !== null) {
                  if (input.substr(pos, 1) === "(") {
                    var result18 = "(";
                    pos += 1;
                  } else {
                    var result18 = null;
                    if (context.reportMatchFailures) {
                      matchFailed(quoteString("("));
                    }
                  }
                  if (result18 !== null) {
                    var result19 = [];
                    var result24 = parse_WS(context);
                    while (result24 !== null) {
                      result19.push(result24);
                      var result24 = parse_WS(context);
                    }
                    if (result19 !== null) {
                      var result20 = parse_ConditionalOrExpression(context);
                      if (result20 !== null) {
                        var result21 = [];
                        var result23 = parse_WS(context);
                        while (result23 !== null) {
                          result21.push(result23);
                          var result23 = parse_WS(context);
                        }
                        if (result21 !== null) {
                          if (input.substr(pos, 1) === ")") {
                            var result22 = ")";
                            pos += 1;
                          } else {
                            var result22 = null;
                            if (context.reportMatchFailures) {
                              matchFailed(quoteString(")"));
                            }
                          }
                          if (result22 !== null) {
                            var result15 = [result16, result17, result18, result19, result20, result21, result22];
                          } else {
                            var result15 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result15 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result15 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result15 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result15 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result15 = null;
                  pos = savedPos1;
                }
              } else {
                var result15 = null;
                pos = savedPos1;
              }
              var result14 = result15 !== null
                ? (function(e) {
                      var ex = {};
                      ex.token = 'expression'
                      ex.expressionType = 'builtincall'
                      ex.builtincall = 'datatype'
                      ex.args = [e]

                      return ex;
                })(result15[4])
                : null;
              if (result14 !== null) {
                var result0 = result14;
              } else {
                var savedPos0 = pos;
                if (input.substr(pos, 5) === "BOUND") {
                  var result4 = "BOUND";
                  pos += 5;
                } else {
                  var result4 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString("BOUND"));
                  }
                }
                if (result4 !== null) {
                  var result5 = [];
                  var result13 = parse_WS(context);
                  while (result13 !== null) {
                    result5.push(result13);
                    var result13 = parse_WS(context);
                  }
                  if (result5 !== null) {
                    if (input.substr(pos, 1) === "(") {
                      var result6 = "(";
                      pos += 1;
                    } else {
                      var result6 = null;
                      if (context.reportMatchFailures) {
                        matchFailed(quoteString("("));
                      }
                    }
                    if (result6 !== null) {
                      var result7 = [];
                      var result12 = parse_WS(context);
                      while (result12 !== null) {
                        result7.push(result12);
                        var result12 = parse_WS(context);
                      }
                      if (result7 !== null) {
                        var result8 = parse_Var(context);
                        if (result8 !== null) {
                          var result9 = [];
                          var result11 = parse_WS(context);
                          while (result11 !== null) {
                            result9.push(result11);
                            var result11 = parse_WS(context);
                          }
                          if (result9 !== null) {
                            if (input.substr(pos, 1) === ")") {
                              var result10 = ")";
                              pos += 1;
                            } else {
                              var result10 = null;
                              if (context.reportMatchFailures) {
                                matchFailed(quoteString(")"));
                              }
                            }
                            if (result10 !== null) {
                              var result3 = [result4, result5, result6, result7, result8, result9, result10];
                            } else {
                              var result3 = null;
                              pos = savedPos0;
                            }
                          } else {
                            var result3 = null;
                            pos = savedPos0;
                          }
                        } else {
                          var result3 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result3 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result3 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result3 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result3 = null;
                  pos = savedPos0;
                }
                var result2 = result3 !== null
                  ? (function(v) {
                        var ex = {};
                        ex.token = 'expression'
                        ex.expressionType = 'builtincall'
                        ex.builtincall = 'bound'
                        ex.args = [v]

                        return ex;
                  })(result3[4])
                  : null;
                if (result2 !== null) {
                  var result0 = result2;
                } else {
                  var result1 = parse_RegexExpression(context);
                  if (result1 !== null) {
                    var result0 = result1;
                  } else {
                    var result0 = null;;
                  };
                };
              };
            };
          };
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[106] BuiltInCall");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_RegexExpression(context) {
        var cacheKey = "RegexExpression" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 5) === "REGEX") {
          var result2 = "REGEX";
          pos += 5;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("REGEX"));
          }
        }
        if (result2 !== null) {
          if (input.substr(pos, 1) === "(") {
            var result3 = "(";
            pos += 1;
          } else {
            var result3 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("("));
            }
          }
          if (result3 !== null) {
            var result4 = parse_ConditionalOrExpression(context);
            if (result4 !== null) {
              if (input.substr(pos, 1) === ",") {
                var result5 = ",";
                pos += 1;
              } else {
                var result5 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString(","));
                }
              }
              if (result5 !== null) {
                var result6 = parse_ConditionalOrExpression(context);
                if (result6 !== null) {
                  var savedPos1 = pos;
                  if (input.substr(pos, 1) === ",") {
                    var result10 = ",";
                    pos += 1;
                  } else {
                    var result10 = null;
                    if (context.reportMatchFailures) {
                      matchFailed(quoteString(","));
                    }
                  }
                  if (result10 !== null) {
                    var result11 = parse_ConditionalOrExpression(context);
                    if (result11 !== null) {
                      var result9 = [result10, result11];
                    } else {
                      var result9 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result9 = null;
                    pos = savedPos1;
                  }
                  var result7 = result9 !== null ? result9 : '';
                  if (result7 !== null) {
                    if (input.substr(pos, 1) === ")") {
                      var result8 = ")";
                      pos += 1;
                    } else {
                      var result8 = null;
                      if (context.reportMatchFailures) {
                        matchFailed(quoteString(")"));
                      }
                    }
                    if (result8 !== null) {
                      var result1 = [result2, result3, result4, result5, result6, result7, result8];
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(e1, e2, eo) {
                var optionalExpressions = [];
                for(var i=0; i<eo.length; i++) {
                    optionalExpressions.push(eo[i][1]);
                }
                var regex = {};
                regex.token = 'expression';
                regex.expressionType = 'regex';
                regex.expression1 = e1;
                regex.expression2 = e2;
                regex.optionalExpression = optionalExpressions;

                return regex;
          })(result1[2], result1[4], result1[5])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[107] RegexExpression");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_ExistsFunc(context) {
        var cacheKey = "ExistsFunc" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 6) === "EXISTS") {
          var result1 = "EXISTS";
          pos += 6;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("EXISTS"));
          }
        }
        if (result1 !== null) {
          var result2 = parse_GroupGraphPattern(context);
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[108] ExistsFunc");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_NotExistsFunc(context) {
        var cacheKey = "NotExistsFunc" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 10) === "NOT EXISTS") {
          var result1 = "NOT EXISTS";
          pos += 10;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("NOT EXISTS"));
          }
        }
        if (result1 !== null) {
          var result2 = parse_GroupGraphPattern(context);
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[109] NotExistsFunc");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Aggregate(context) {
        var cacheKey = "Aggregate" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos4 = pos;
        if (input.substr(pos, 5) === "COUNT") {
          var result35 = "COUNT";
          pos += 5;
        } else {
          var result35 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("COUNT"));
          }
        }
        if (result35 !== null) {
          if (input.substr(pos, 1) === "(") {
            var result36 = "(";
            pos += 1;
          } else {
            var result36 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("("));
            }
          }
          if (result36 !== null) {
            if (input.substr(pos, 8) === "DISTINCT") {
              var result42 = "DISTINCT";
              pos += 8;
            } else {
              var result42 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("DISTINCT"));
              }
            }
            var result37 = result42 !== null ? result42 : '';
            if (result37 !== null) {
              if (input.substr(pos, 1) === "*") {
                var result41 = "*";
                pos += 1;
              } else {
                var result41 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("*"));
                }
              }
              if (result41 !== null) {
                var result38 = result41;
              } else {
                var result40 = parse_ConditionalOrExpression(context);
                if (result40 !== null) {
                  var result38 = result40;
                } else {
                  var result38 = null;;
                };
              }
              if (result38 !== null) {
                if (input.substr(pos, 1) === ")") {
                  var result39 = ")";
                  pos += 1;
                } else {
                  var result39 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString(")"));
                  }
                }
                if (result39 !== null) {
                  var result34 = [result35, result36, result37, result38, result39];
                } else {
                  var result34 = null;
                  pos = savedPos4;
                }
              } else {
                var result34 = null;
                pos = savedPos4;
              }
            } else {
              var result34 = null;
              pos = savedPos4;
            }
          } else {
            var result34 = null;
            pos = savedPos4;
          }
        } else {
          var result34 = null;
          pos = savedPos4;
        }
        var result33 = result34 !== null
          ? (function(d, e) {
                exp = {};
                exp.token = 'expression'
                exp.rexpressionType = 'aggregate'
                exp.aggregateType = 'count'
                exp.distinct = d
                exp.expression = e

                return exp

            })(result34[2], result34[3])
          : null;
        if (result33 !== null) {
          var result0 = result33;
        } else {
          var savedPos3 = pos;
          if (input.substr(pos, 3) === "SUM") {
            var result27 = "SUM";
            pos += 3;
          } else {
            var result27 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("SUM"));
            }
          }
          if (result27 !== null) {
            if (input.substr(pos, 1) === "(") {
              var result28 = "(";
              pos += 1;
            } else {
              var result28 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("("));
              }
            }
            if (result28 !== null) {
              if (input.substr(pos, 8) === "DISTINCT") {
                var result32 = "DISTINCT";
                pos += 8;
              } else {
                var result32 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("DISTINCT"));
                }
              }
              var result29 = result32 !== null ? result32 : '';
              if (result29 !== null) {
                var result30 = parse_ConditionalOrExpression(context);
                if (result30 !== null) {
                  if (input.substr(pos, 1) === ")") {
                    var result31 = ")";
                    pos += 1;
                  } else {
                    var result31 = null;
                    if (context.reportMatchFailures) {
                      matchFailed(quoteString(")"));
                    }
                  }
                  if (result31 !== null) {
                    var result26 = [result27, result28, result29, result30, result31];
                  } else {
                    var result26 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result26 = null;
                  pos = savedPos3;
                }
              } else {
                var result26 = null;
                pos = savedPos3;
              }
            } else {
              var result26 = null;
              pos = savedPos3;
            }
          } else {
            var result26 = null;
            pos = savedPos3;
          }
          var result25 = result26 !== null
            ? (function(d, e) {
                  exp = {};
                  exp.token = 'expression'
                  exp.rexpressionType = 'aggregate'
                  exp.aggregateType = 'sum'
                  exp.distinct = d
                  exp.expression = e

                  return exp

              })(result26[2], result26[3])
            : null;
          if (result25 !== null) {
            var result0 = result25;
          } else {
            var savedPos2 = pos;
            if (input.substr(pos, 3) === "MIN") {
              var result19 = "MIN";
              pos += 3;
            } else {
              var result19 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("MIN"));
              }
            }
            if (result19 !== null) {
              if (input.substr(pos, 1) === "(") {
                var result20 = "(";
                pos += 1;
              } else {
                var result20 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("("));
                }
              }
              if (result20 !== null) {
                if (input.substr(pos, 8) === "DISTINCT") {
                  var result24 = "DISTINCT";
                  pos += 8;
                } else {
                  var result24 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString("DISTINCT"));
                  }
                }
                var result21 = result24 !== null ? result24 : '';
                if (result21 !== null) {
                  var result22 = parse_ConditionalOrExpression(context);
                  if (result22 !== null) {
                    if (input.substr(pos, 1) === ")") {
                      var result23 = ")";
                      pos += 1;
                    } else {
                      var result23 = null;
                      if (context.reportMatchFailures) {
                        matchFailed(quoteString(")"));
                      }
                    }
                    if (result23 !== null) {
                      var result18 = [result19, result20, result21, result22, result23];
                    } else {
                      var result18 = null;
                      pos = savedPos2;
                    }
                  } else {
                    var result18 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result18 = null;
                  pos = savedPos2;
                }
              } else {
                var result18 = null;
                pos = savedPos2;
              }
            } else {
              var result18 = null;
              pos = savedPos2;
            }
            var result17 = result18 !== null
              ? (function(d, e) {
                    exp = {};
                    exp.token = 'expression'
                    exp.rexpressionType = 'aggregate'
                    exp.aggregateType = 'min'
                    exp.distinct = d
                    exp.expression = e

                    return exp

                })(result18[2], result18[3])
              : null;
            if (result17 !== null) {
              var result0 = result17;
            } else {
              var savedPos1 = pos;
              if (input.substr(pos, 3) === "MAX") {
                var result11 = "MAX";
                pos += 3;
              } else {
                var result11 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("MAX"));
                }
              }
              if (result11 !== null) {
                if (input.substr(pos, 1) === "(") {
                  var result12 = "(";
                  pos += 1;
                } else {
                  var result12 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString("("));
                  }
                }
                if (result12 !== null) {
                  if (input.substr(pos, 8) === "DISTINCT") {
                    var result16 = "DISTINCT";
                    pos += 8;
                  } else {
                    var result16 = null;
                    if (context.reportMatchFailures) {
                      matchFailed(quoteString("DISTINCT"));
                    }
                  }
                  var result13 = result16 !== null ? result16 : '';
                  if (result13 !== null) {
                    var result14 = parse_ConditionalOrExpression(context);
                    if (result14 !== null) {
                      if (input.substr(pos, 1) === ")") {
                        var result15 = ")";
                        pos += 1;
                      } else {
                        var result15 = null;
                        if (context.reportMatchFailures) {
                          matchFailed(quoteString(")"));
                        }
                      }
                      if (result15 !== null) {
                        var result10 = [result11, result12, result13, result14, result15];
                      } else {
                        var result10 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result10 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result10 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result10 = null;
                  pos = savedPos1;
                }
              } else {
                var result10 = null;
                pos = savedPos1;
              }
              var result9 = result10 !== null
                ? (function(d, e) {
                      exp = {};
                      exp.token = 'expression'
                      exp.rexpressionType = 'aggregate'
                      exp.aggregateType = 'max'
                      exp.distinct = d
                      exp.expression = e

                      return exp

                  })(result10[2], result10[3])
                : null;
              if (result9 !== null) {
                var result0 = result9;
              } else {
                var savedPos0 = pos;
                if (input.substr(pos, 3) === "AVG") {
                  var result3 = "AVG";
                  pos += 3;
                } else {
                  var result3 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString("AVG"));
                  }
                }
                if (result3 !== null) {
                  if (input.substr(pos, 1) === "(") {
                    var result4 = "(";
                    pos += 1;
                  } else {
                    var result4 = null;
                    if (context.reportMatchFailures) {
                      matchFailed(quoteString("("));
                    }
                  }
                  if (result4 !== null) {
                    if (input.substr(pos, 8) === "DISTINCT") {
                      var result8 = "DISTINCT";
                      pos += 8;
                    } else {
                      var result8 = null;
                      if (context.reportMatchFailures) {
                        matchFailed(quoteString("DISTINCT"));
                      }
                    }
                    var result5 = result8 !== null ? result8 : '';
                    if (result5 !== null) {
                      var result6 = parse_ConditionalOrExpression(context);
                      if (result6 !== null) {
                        if (input.substr(pos, 1) === ")") {
                          var result7 = ")";
                          pos += 1;
                        } else {
                          var result7 = null;
                          if (context.reportMatchFailures) {
                            matchFailed(quoteString(")"));
                          }
                        }
                        if (result7 !== null) {
                          var result2 = [result3, result4, result5, result6, result7];
                        } else {
                          var result2 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result2 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result2 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result2 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos0;
                }
                var result1 = result2 !== null
                  ? (function(d, e) {
                        exp = {};
                        exp.token = 'expression'
                        exp.rexpressionType = 'aggregate'
                        exp.aggregateType = 'avg'
                        exp.distinct = d
                        exp.expression = e

                        return exp

                    })(result2[2], result2[3])
                  : null;
                if (result1 !== null) {
                  var result0 = result1;
                } else {
                  var result0 = null;;
                };
              };
            };
          };
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[110] Aggregate");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_RDFLiteral(context) {
        var cacheKey = "RDFLiteral" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = parse_String(context);
        if (result2 !== null) {
          var result8 = parse_LANGTAG(context);
          if (result8 !== null) {
            var result4 = result8;
          } else {
            var savedPos1 = pos;
            if (input.substr(pos, 2) === "^^") {
              var result6 = "^^";
              pos += 2;
            } else {
              var result6 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("^^"));
              }
            }
            if (result6 !== null) {
              var result7 = parse_IRIref(context);
              if (result7 !== null) {
                var result5 = [result6, result7];
              } else {
                var result5 = null;
                pos = savedPos1;
              }
            } else {
              var result5 = null;
              pos = savedPos1;
            }
            if (result5 !== null) {
              var result4 = result5;
            } else {
              var result4 = null;;
            };
          }
          var result3 = result4 !== null ? result4 : '';
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(s, e) {
                if(typeof(e) === "string" && e.length > 0) {
                    return {token:'literal', value:s.value, lang:e.slice(1), type:null}
                } else {
                    if(typeof(e) === "object") {
                        e.shift();
                        return {token:'literal', value:s.value, lang:null, type:e }
                    } else {
                        return { token:'literal', value:s.value, lang:null, type:null }
                    }
                }
          })(result1[0], result1[1])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[112] RDFLiteral");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_NumericLiteral(context) {
        var cacheKey = "NumericLiteral" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var result3 = parse_NumericLiteralUnsigned(context);
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_NumericLiteralPositive(context);
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_NumericLiteralNegative(context);
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[113] NumericLiteral");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_NumericLiteralUnsigned(context) {
        var cacheKey = "NumericLiteralUnsigned" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var result3 = parse_DOUBLE(context);
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_DECIMAL(context);
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_INTEGER(context);
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[114] NumericLiteralUnsigned");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_NumericLiteralPositive(context) {
        var cacheKey = "NumericLiteralPositive" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var result3 = parse_DOUBLE_POSITIVE(context);
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_DECIMAL_POSITIVE(context);
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_INTEGER_POSITIVE(context);
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[115] NumericLiteralPositive");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_NumericLiteralNegative(context) {
        var cacheKey = "NumericLiteralNegative" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var result3 = parse_DOUBLE_NEGATIVE(context);
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_DECIMAL_NEGATIVE(context);
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_INTEGER_NEGATIVE(context);
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[116] NumericLiteralNegative");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_BooleanLiteral(context) {
        var cacheKey = "BooleanLiteral" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        if (input.substr(pos, 4) === "true") {
          var result4 = "true";
          pos += 4;
        } else {
          var result4 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("true"));
          }
        }
        var result3 = result4 !== null
          ? (function() {
                lit = {};
                lit.token = "literal";
                lit.lang = null;
                lit.type = "http://www.w3.org/2001/XMLSchema#boolean";
                lit.value = true;
                return lit;
           })()
          : null;
        if (result3 !== null) {
          var result0 = result3;
        } else {
          if (input.substr(pos, 5) === "false") {
            var result2 = "false";
            pos += 5;
          } else {
            var result2 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("false"));
            }
          }
          var result1 = result2 !== null
            ? (function() {
                  lit = {};
                  lit.token = "literal";
                  lit.lang = null;
                  lit.type = "http://www.w3.org/2001/XMLSchema#boolean";
                  lit.value = false;
                  return lit;
            })()
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[117] BooleanLiteral");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_String(context) {
        var cacheKey = "String" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var result8 = parse_STRING_LITERAL1(context);
        var result7 = result8 !== null
          ? (function(s) { return {token:'string', value:s} })(result8)
          : null;
        if (result7 !== null) {
          var result0 = result7;
        } else {
          var result6 = parse_STRING_LITERAL2(context);
          var result5 = result6 !== null
            ? (function(s) { return {token:'string', value:s} })(result6)
            : null;
          if (result5 !== null) {
            var result0 = result5;
          } else {
            var result4 = parse_STRING_LITERAL_LONG1(context);
            var result3 = result4 !== null
              ? (function(s) { return {token:'string', value:s} })(result4)
              : null;
            if (result3 !== null) {
              var result0 = result3;
            } else {
              var result2 = parse_STRING_LITERAL_LONG2(context);
              var result1 = result2 !== null
                ? (function(s) { return {token:'string', value:s} })(result2)
                : null;
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[118] String");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_IRIref(context) {
        var cacheKey = "IRIref" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var result4 = parse_IRI_REF(context);
        var result3 = result4 !== null
          ? (function(iri) { return {token: 'uri', prefix:null, suffix:null, value:iri} })(result4)
          : null;
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_PrefixedName(context);
          var result1 = result2 !== null
            ? (function(p) { return p })(result2)
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[119] IRIref");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_PrefixedName(context) {
        var cacheKey = "PrefixedName" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var result4 = parse_PNAME_LN(context);
        var result3 = result4 !== null
          ? (function(p) { return {token: 'uri', prefix:p[0], suffix:p[1], value:null } })(result4)
          : null;
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_PNAME_NS(context);
          var result1 = result2 !== null
            ? (function(p) { return {token: 'uri', prefix:p, suffix:'', value:null } })(result2)
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[120] PrefixedName");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_BlankNode(context) {
        var cacheKey = "BlankNode" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var result4 = parse_BLANK_NODE_LABEL(context);
        var result3 = result4 !== null
          ? (function(l) { return {token:'blank', label:l}})(result4)
          : null;
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_ANON(context);
          var result1 = result2 !== null
            ? (function() { GlobalBlankNodeCounter++; return {token:'blank', label:''+GlobalBlankNodeCounter} })()
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[121] BlankNode");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_IRI_REF(context) {
        var cacheKey = "IRI_REF" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "<") {
          var result2 = "<";
          pos += 1;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("<"));
          }
        }
        if (result2 !== null) {
          var result3 = [];
          if (input.substr(pos).match(/^[^<>"{} | ^\\ | S]/) !== null) {
            var result5 = input.charAt(pos);
            pos++;
          } else {
            var result5 = null;
            if (context.reportMatchFailures) {
              matchFailed("[^<>\"{} | ^\\\\ | S]");
            }
          }
          while (result5 !== null) {
            result3.push(result5);
            if (input.substr(pos).match(/^[^<>"{} | ^\\ | S]/) !== null) {
              var result5 = input.charAt(pos);
              pos++;
            } else {
              var result5 = null;
              if (context.reportMatchFailures) {
                matchFailed("[^<>\"{} | ^\\\\ | S]");
              }
            }
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === ">") {
              var result4 = ">";
              pos += 1;
            } else {
              var result4 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString(">"));
              }
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(iri_ref) { return iri_ref.join('') })(result1[1])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[122] IRI_REF");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_PNAME_NS(context) {
        var cacheKey = "PNAME_NS" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        var result4 = parse_PN_PREFIX(context);
        var result2 = result4 !== null ? result4 : '';
        if (result2 !== null) {
          if (input.substr(pos, 1) === ":") {
            var result3 = ":";
            pos += 1;
          } else {
            var result3 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString(":"));
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(p) { return p })(result1[0])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[123] PNAME_NS");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_PNAME_LN(context) {
        var cacheKey = "PNAME_LN" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = parse_PNAME_NS(context);
        if (result2 !== null) {
          var result3 = parse_PN_LOCAL(context);
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(p, s) { return [p, s] })(result1[0], result1[1])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[124] PNAME_LN");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_BLANK_NODE_LABEL(context) {
        var cacheKey = "BLANK_NODE_LABEL" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 2) === "_:") {
          var result2 = "_:";
          pos += 2;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("_:"));
          }
        }
        if (result2 !== null) {
          var result3 = parse_PN_LOCAL(context);
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(l) { return l })(result1[1])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[125] BLANK_NODE_LABEL");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_VAR1(context) {
        var cacheKey = "VAR1" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "?") {
          var result2 = "?";
          pos += 1;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("?"));
          }
        }
        if (result2 !== null) {
          var result3 = parse_VARNAME(context);
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(v) { return v })(result1[1])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[126] VAR1");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_VAR2(context) {
        var cacheKey = "VAR2" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "$") {
          var result2 = "$";
          pos += 1;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("$"));
          }
        }
        if (result2 !== null) {
          var result3 = parse_VARNAME(context);
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(v) { return v })(result1[1])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[127] VAR2");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_LANGTAG(context) {
        var cacheKey = "LANGTAG" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "@") {
          var result2 = "@";
          pos += 1;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("@"));
          }
        }
        if (result2 !== null) {
          if (input.substr(pos).match(/^[a-zA-Z]/) !== null) {
            var result9 = input.charAt(pos);
            pos++;
          } else {
            var result9 = null;
            if (context.reportMatchFailures) {
              matchFailed("[a-zA-Z]");
            }
          }
          if (result9 !== null) {
            var result3 = [];
            while (result9 !== null) {
              result3.push(result9);
              if (input.substr(pos).match(/^[a-zA-Z]/) !== null) {
                var result9 = input.charAt(pos);
                pos++;
              } else {
                var result9 = null;
                if (context.reportMatchFailures) {
                  matchFailed("[a-zA-Z]");
                }
              }
            }
          } else {
            var result3 = null;
          }
          if (result3 !== null) {
            var result4 = [];
            var savedPos1 = pos;
            if (input.substr(pos, 1) === "-") {
              var result6 = "-";
              pos += 1;
            } else {
              var result6 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("-"));
              }
            }
            if (result6 !== null) {
              if (input.substr(pos).match(/^[a-zA-Z0-9]/) !== null) {
                var result8 = input.charAt(pos);
                pos++;
              } else {
                var result8 = null;
                if (context.reportMatchFailures) {
                  matchFailed("[a-zA-Z0-9]");
                }
              }
              if (result8 !== null) {
                var result7 = [];
                while (result8 !== null) {
                  result7.push(result8);
                  if (input.substr(pos).match(/^[a-zA-Z0-9]/) !== null) {
                    var result8 = input.charAt(pos);
                    pos++;
                  } else {
                    var result8 = null;
                    if (context.reportMatchFailures) {
                      matchFailed("[a-zA-Z0-9]");
                    }
                  }
                }
              } else {
                var result7 = null;
              }
              if (result7 !== null) {
                var result5 = [result6, result7];
              } else {
                var result5 = null;
                pos = savedPos1;
              }
            } else {
              var result5 = null;
              pos = savedPos1;
            }
            while (result5 !== null) {
              result4.push(result5);
              var savedPos1 = pos;
              if (input.substr(pos, 1) === "-") {
                var result6 = "-";
                pos += 1;
              } else {
                var result6 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("-"));
                }
              }
              if (result6 !== null) {
                if (input.substr(pos).match(/^[a-zA-Z0-9]/) !== null) {
                  var result8 = input.charAt(pos);
                  pos++;
                } else {
                  var result8 = null;
                  if (context.reportMatchFailures) {
                    matchFailed("[a-zA-Z0-9]");
                  }
                }
                if (result8 !== null) {
                  var result7 = [];
                  while (result8 !== null) {
                    result7.push(result8);
                    if (input.substr(pos).match(/^[a-zA-Z0-9]/) !== null) {
                      var result8 = input.charAt(pos);
                      pos++;
                    } else {
                      var result8 = null;
                      if (context.reportMatchFailures) {
                        matchFailed("[a-zA-Z0-9]");
                      }
                    }
                  }
                } else {
                  var result7 = null;
                }
                if (result7 !== null) {
                  var result5 = [result6, result7];
                } else {
                  var result5 = null;
                  pos = savedPos1;
                }
              } else {
                var result5 = null;
                pos = savedPos1;
              }
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(a, b) {

                if(b.length===0) {
                    return "@"+a.join('');
                } else {
                    return "@"+a.join('')+"-"+b[0][1].join('');
                }
          })(result1[1], result1[2])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[128] LANGTAG");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_INTEGER(context) {
        var cacheKey = "INTEGER" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        if (input.substr(pos).match(/^[0-9]/) !== null) {
          var result2 = input.charAt(pos);
          pos++;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed("[0-9]");
          }
        }
        if (result2 !== null) {
          var result1 = [];
          while (result2 !== null) {
            result1.push(result2);
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result2 = input.charAt(pos);
              pos++;
            } else {
              var result2 = null;
              if (context.reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          var result1 = null;
        }
        var result0 = result1 !== null
          ? (function(d) {
                lit = {};
                lit.token = "literal";
                lit.lang = null;
                lit.type = "http://www.w3.org/2001/XMLSchema#integer";
                lit.value = flattenString(d);
                return lit;
          })(result1)
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[129] INTEGER");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_DECIMAL(context) {
        var cacheKey = "DECIMAL" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos1 = pos;
        if (input.substr(pos).match(/^[0-9]/) !== null) {
          var result12 = input.charAt(pos);
          pos++;
        } else {
          var result12 = null;
          if (context.reportMatchFailures) {
            matchFailed("[0-9]");
          }
        }
        if (result12 !== null) {
          var result8 = [];
          while (result12 !== null) {
            result8.push(result12);
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result12 = input.charAt(pos);
              pos++;
            } else {
              var result12 = null;
              if (context.reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          var result8 = null;
        }
        if (result8 !== null) {
          if (input.substr(pos, 1) === ".") {
            var result9 = ".";
            pos += 1;
          } else {
            var result9 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("."));
            }
          }
          if (result9 !== null) {
            var result10 = [];
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result11 = input.charAt(pos);
              pos++;
            } else {
              var result11 = null;
              if (context.reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
            while (result11 !== null) {
              result10.push(result11);
              if (input.substr(pos).match(/^[0-9]/) !== null) {
                var result11 = input.charAt(pos);
                pos++;
              } else {
                var result11 = null;
                if (context.reportMatchFailures) {
                  matchFailed("[0-9]");
                }
              }
            }
            if (result10 !== null) {
              var result7 = [result8, result9, result10];
            } else {
              var result7 = null;
              pos = savedPos1;
            }
          } else {
            var result7 = null;
            pos = savedPos1;
          }
        } else {
          var result7 = null;
          pos = savedPos1;
        }
        var result6 = result7 !== null
          ? (function(a, b, c) {

                lit = {};
                lit.token = "literal";
                lit.lang = null;
                lit.type = "http://www.w3.org/2001/XMLSchema#decimal";
                lit.value = eval(flattenString([a,b,c]));
                return lit;
          })(result7[0], result7[1], result7[2])
          : null;
        if (result6 !== null) {
          var result0 = result6;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 1) === ".") {
            var result3 = ".";
            pos += 1;
          } else {
            var result3 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("."));
            }
          }
          if (result3 !== null) {
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result5 = input.charAt(pos);
              pos++;
            } else {
              var result5 = null;
              if (context.reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
            if (result5 !== null) {
              var result4 = [];
              while (result5 !== null) {
                result4.push(result5);
                if (input.substr(pos).match(/^[0-9]/) !== null) {
                  var result5 = input.charAt(pos);
                  pos++;
                } else {
                  var result5 = null;
                  if (context.reportMatchFailures) {
                    matchFailed("[0-9]");
                  }
                }
              }
            } else {
              var result4 = null;
            }
            if (result4 !== null) {
              var result2 = [result3, result4];
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          var result1 = result2 !== null
            ? (function(a, b) {
                  lit = {};
                  lit.token = "literal";
                  lit.lang = null;
                  lit.type = "http://www.w3.org/2001/XMLSchema#decimal";
                  lit.value = eval(flattenString([a,b]));
                  return lit;
             })(result2[0], result2[1])
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[130] DECIMAL");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_DOUBLE(context) {
        var cacheKey = "DOUBLE" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos2 = pos;
        if (input.substr(pos).match(/^[0-9]/) !== null) {
          var result19 = input.charAt(pos);
          pos++;
        } else {
          var result19 = null;
          if (context.reportMatchFailures) {
            matchFailed("[0-9]");
          }
        }
        if (result19 !== null) {
          var result14 = [];
          while (result19 !== null) {
            result14.push(result19);
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result19 = input.charAt(pos);
              pos++;
            } else {
              var result19 = null;
              if (context.reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          var result14 = null;
        }
        if (result14 !== null) {
          if (input.substr(pos, 1) === ".") {
            var result15 = ".";
            pos += 1;
          } else {
            var result15 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("."));
            }
          }
          if (result15 !== null) {
            var result16 = [];
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result18 = input.charAt(pos);
              pos++;
            } else {
              var result18 = null;
              if (context.reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
            while (result18 !== null) {
              result16.push(result18);
              if (input.substr(pos).match(/^[0-9]/) !== null) {
                var result18 = input.charAt(pos);
                pos++;
              } else {
                var result18 = null;
                if (context.reportMatchFailures) {
                  matchFailed("[0-9]");
                }
              }
            }
            if (result16 !== null) {
              var result17 = parse_EXPONENT(context);
              if (result17 !== null) {
                var result13 = [result14, result15, result16, result17];
              } else {
                var result13 = null;
                pos = savedPos2;
              }
            } else {
              var result13 = null;
              pos = savedPos2;
            }
          } else {
            var result13 = null;
            pos = savedPos2;
          }
        } else {
          var result13 = null;
          pos = savedPos2;
        }
        var result12 = result13 !== null
          ? (function(a, b, c, e) {
                lit = {};
                lit.token = "literal";
                lit.lang = null;
                lit.type = "http://www.w3.org/2001/XMLSchema#double";
                lit.value = eval(flattenString([a,b,c,e]));
                return lit;
          })(result13[0], result13[1], result13[2], result13[3])
          : null;
        if (result12 !== null) {
          var result0 = result12;
        } else {
          var savedPos1 = pos;
          if (input.substr(pos, 1) === ".") {
            var result8 = ".";
            pos += 1;
          } else {
            var result8 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("."));
            }
          }
          if (result8 !== null) {
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result11 = input.charAt(pos);
              pos++;
            } else {
              var result11 = null;
              if (context.reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
            if (result11 !== null) {
              var result9 = [];
              while (result11 !== null) {
                result9.push(result11);
                if (input.substr(pos).match(/^[0-9]/) !== null) {
                  var result11 = input.charAt(pos);
                  pos++;
                } else {
                  var result11 = null;
                  if (context.reportMatchFailures) {
                    matchFailed("[0-9]");
                  }
                }
              }
            } else {
              var result9 = null;
            }
            if (result9 !== null) {
              var result10 = parse_EXPONENT(context);
              if (result10 !== null) {
                var result7 = [result8, result9, result10];
              } else {
                var result7 = null;
                pos = savedPos1;
              }
            } else {
              var result7 = null;
              pos = savedPos1;
            }
          } else {
            var result7 = null;
            pos = savedPos1;
          }
          var result6 = result7 !== null
            ? (function(a, b, c) {
                  lit = {};
                  lit.token = "literal";
                  lit.lang = null;
                  lit.type = "http://www.w3.org/2001/XMLSchema#double";
                  lit.value = eval(flattenString([a,b,c]));
                  return lit;
            })(result7[0], result7[1], result7[2])
            : null;
          if (result6 !== null) {
            var result0 = result6;
          } else {
            var savedPos0 = pos;
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result5 = input.charAt(pos);
              pos++;
            } else {
              var result5 = null;
              if (context.reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
            if (result5 !== null) {
              var result3 = [];
              while (result5 !== null) {
                result3.push(result5);
                if (input.substr(pos).match(/^[0-9]/) !== null) {
                  var result5 = input.charAt(pos);
                  pos++;
                } else {
                  var result5 = null;
                  if (context.reportMatchFailures) {
                    matchFailed("[0-9]");
                  }
                }
              }
            } else {
              var result3 = null;
            }
            if (result3 !== null) {
              var result4 = parse_EXPONENT(context);
              if (result4 !== null) {
                var result2 = [result3, result4];
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
            var result1 = result2 !== null
              ? (function(a, b) {
                    lit = {};
                    lit.token = "literal";
                    lit.lang = null;
                    lit.type = "http://www.w3.org/2001/XMLSchema#double";
                    lit.value = eval(flattenString([a,b]));
                    return lit;
              })(result2[0], result2[1])
              : null;
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[131] DOUBLE");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_INTEGER_POSITIVE(context) {
        var cacheKey = "INTEGER_POSITIVE" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "+") {
          var result2 = "+";
          pos += 1;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("+"));
          }
        }
        if (result2 !== null) {
          var result3 = parse_INTEGER(context);
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(d) { return d; })(result1[1])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[132] INTEGER_POSITIVE");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_DECIMAL_POSITIVE(context) {
        var cacheKey = "DECIMAL_POSITIVE" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "+") {
          var result2 = "+";
          pos += 1;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("+"));
          }
        }
        if (result2 !== null) {
          var result3 = parse_DECIMAL(context);
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(d) { return d })(result1[1])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[133] DECIMAL_POSITIVE");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_DOUBLE_POSITIVE(context) {
        var cacheKey = "DOUBLE_POSITIVE" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "+") {
          var result2 = "+";
          pos += 1;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("+"));
          }
        }
        if (result2 !== null) {
          var result3 = parse_DOUBLE(context);
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(d) { return d })(result1[1])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[134] DOUBLE_POSITIVE");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_INTEGER_NEGATIVE(context) {
        var cacheKey = "INTEGER_NEGATIVE" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "-") {
          var result2 = "-";
          pos += 1;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("-"));
          }
        }
        if (result2 !== null) {
          var result3 = parse_INTEGER(context);
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(d) { d.value = - d.value; return d; })(result1[1])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[135] INTEGER_NEGATIVE");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_DECIMAL_NEGATIVE(context) {
        var cacheKey = "DECIMAL_NEGATIVE" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "-") {
          var result2 = "-";
          pos += 1;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("-"));
          }
        }
        if (result2 !== null) {
          var result3 = parse_DECIMAL(context);
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(d) { d.value = - d.value; return d; })(result1[1])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[136] DECIMAL_NEGATIVE");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_DOUBLE_NEGATIVE(context) {
        var cacheKey = "DOUBLE_NEGATIVE" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "-") {
          var result2 = "-";
          pos += 1;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("-"));
          }
        }
        if (result2 !== null) {
          var result3 = parse_DOUBLE(context);
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(d) { d.value = - d.value; return d; })(result1[1])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[137] DOUBLE_NEGATIVE");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_EXPONENT(context) {
        var cacheKey = "EXPONENT" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[eE]/) !== null) {
          var result2 = input.charAt(pos);
          pos++;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed("[eE]");
          }
        }
        if (result2 !== null) {
          if (input.substr(pos).match(/^[+\-]/) !== null) {
            var result6 = input.charAt(pos);
            pos++;
          } else {
            var result6 = null;
            if (context.reportMatchFailures) {
              matchFailed("[+\\-]");
            }
          }
          var result3 = result6 !== null ? result6 : '';
          if (result3 !== null) {
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result5 = input.charAt(pos);
              pos++;
            } else {
              var result5 = null;
              if (context.reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
            if (result5 !== null) {
              var result4 = [];
              while (result5 !== null) {
                result4.push(result5);
                if (input.substr(pos).match(/^[0-9]/) !== null) {
                  var result5 = input.charAt(pos);
                  pos++;
                } else {
                  var result5 = null;
                  if (context.reportMatchFailures) {
                    matchFailed("[0-9]");
                  }
                }
              }
            } else {
              var result4 = null;
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(a, b, c) { return flattenString([a,b,c]) })(result1[0], result1[1], result1[2])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[138] EXPONENT");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_STRING_LITERAL1(context) {
        var cacheKey = "STRING_LITERAL1" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "'") {
          var result2 = "'";
          pos += 1;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("'"));
          }
        }
        if (result2 !== null) {
          var result3 = [];
          if (input.substr(pos).match(/^[^'\\\n\r]/) !== null) {
            var result7 = input.charAt(pos);
            pos++;
          } else {
            var result7 = null;
            if (context.reportMatchFailures) {
              matchFailed("[^'\\\\\\n\\r]");
            }
          }
          if (result7 !== null) {
            var result5 = result7;
          } else {
            var result6 = parse_ECHAR(context);
            if (result6 !== null) {
              var result5 = result6;
            } else {
              var result5 = null;;
            };
          }
          while (result5 !== null) {
            result3.push(result5);
            if (input.substr(pos).match(/^[^'\\\n\r]/) !== null) {
              var result7 = input.charAt(pos);
              pos++;
            } else {
              var result7 = null;
              if (context.reportMatchFailures) {
                matchFailed("[^'\\\\\\n\\r]");
              }
            }
            if (result7 !== null) {
              var result5 = result7;
            } else {
              var result6 = parse_ECHAR(context);
              if (result6 !== null) {
                var result5 = result6;
              } else {
                var result5 = null;;
              };
            }
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === "'") {
              var result4 = "'";
              pos += 1;
            } else {
              var result4 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("'"));
              }
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(content) { return flattenString(content) })(result1[1])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[139] STRING_LITERAL1");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_STRING_LITERAL2(context) {
        var cacheKey = "STRING_LITERAL2" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "\"") {
          var result2 = "\"";
          pos += 1;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("\""));
          }
        }
        if (result2 !== null) {
          var result3 = [];
          if (input.substr(pos).match(/^[^"\\\n\r]/) !== null) {
            var result7 = input.charAt(pos);
            pos++;
          } else {
            var result7 = null;
            if (context.reportMatchFailures) {
              matchFailed("[^\"\\\\\\n\\r]");
            }
          }
          if (result7 !== null) {
            var result5 = result7;
          } else {
            var result6 = parse_ECHAR(context);
            if (result6 !== null) {
              var result5 = result6;
            } else {
              var result5 = null;;
            };
          }
          while (result5 !== null) {
            result3.push(result5);
            if (input.substr(pos).match(/^[^"\\\n\r]/) !== null) {
              var result7 = input.charAt(pos);
              pos++;
            } else {
              var result7 = null;
              if (context.reportMatchFailures) {
                matchFailed("[^\"\\\\\\n\\r]");
              }
            }
            if (result7 !== null) {
              var result5 = result7;
            } else {
              var result6 = parse_ECHAR(context);
              if (result6 !== null) {
                var result5 = result6;
              } else {
                var result5 = null;;
              };
            }
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === "\"") {
              var result4 = "\"";
              pos += 1;
            } else {
              var result4 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("\""));
              }
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(content) { return flattenString(content) })(result1[1])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[140] STRING_LITERAL2");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_STRING_LITERAL_LONG1(context) {
        var cacheKey = "STRING_LITERAL_LONG1" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 0) === "") {
          var result2 = "";
          pos += 0;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString(""));
          }
        }
        if (result2 !== null) {
          if (input.substr(pos, 0) === "") {
            var result3 = "";
            pos += 0;
          } else {
            var result3 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString(""));
            }
          }
          if (result3 !== null) {
            if (input.substr(pos, 26) === " content:([^'\\] / ECHAR)* ") {
              var result4 = " content:([^'\\] / ECHAR)* ";
              pos += 26;
            } else {
              var result4 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString(" content:([^'\\] / ECHAR)* "));
              }
            }
            if (result4 !== null) {
              if (input.substr(pos, 0) === "") {
                var result5 = "";
                pos += 0;
              } else {
                var result5 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString(""));
                }
              }
              if (result5 !== null) {
                if (input.substr(pos, 0) === "") {
                  var result6 = "";
                  pos += 0;
                } else {
                  var result6 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString(""));
                  }
                }
                if (result6 !== null) {
                  var result1 = [result2, result3, result4, result5, result6];
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function() { return flattenString(content) })()
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[141] STRING_LITERAL_LONG1");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_STRING_LITERAL_LONG2(context) {
        var cacheKey = "STRING_LITERAL_LONG2" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 3) === "\"\"\"") {
          var result2 = "\"\"\"";
          pos += 3;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("\"\"\""));
          }
        }
        if (result2 !== null) {
          var result3 = [];
          if (input.substr(pos).match(/^[^"\\]/) !== null) {
            var result7 = input.charAt(pos);
            pos++;
          } else {
            var result7 = null;
            if (context.reportMatchFailures) {
              matchFailed("[^\"\\\\]");
            }
          }
          if (result7 !== null) {
            var result5 = result7;
          } else {
            var result6 = parse_ECHAR(context);
            if (result6 !== null) {
              var result5 = result6;
            } else {
              var result5 = null;;
            };
          }
          while (result5 !== null) {
            result3.push(result5);
            if (input.substr(pos).match(/^[^"\\]/) !== null) {
              var result7 = input.charAt(pos);
              pos++;
            } else {
              var result7 = null;
              if (context.reportMatchFailures) {
                matchFailed("[^\"\\\\]");
              }
            }
            if (result7 !== null) {
              var result5 = result7;
            } else {
              var result6 = parse_ECHAR(context);
              if (result6 !== null) {
                var result5 = result6;
              } else {
                var result5 = null;;
              };
            }
          }
          if (result3 !== null) {
            if (input.substr(pos, 3) === "\"\"\"") {
              var result4 = "\"\"\"";
              pos += 3;
            } else {
              var result4 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("\"\"\""));
              }
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(content) { return flattenString(content) })(result1[1])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[142] STRING_LITERAL_LONG2");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_ECHAR(context) {
        var cacheKey = "ECHAR" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "\\") {
          var result1 = "\\";
          pos += 1;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("\\"));
          }
        }
        if (result1 !== null) {
          if (input.substr(pos).match(/^[tbnrf"']/) !== null) {
            var result2 = input.charAt(pos);
            pos++;
          } else {
            var result2 = null;
            if (context.reportMatchFailures) {
              matchFailed("[tbnrf\"']");
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[143] ECHAR");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_NIL(context) {
        var cacheKey = "NIL" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "(") {
          var result1 = "(";
          pos += 1;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("("));
          }
        }
        if (result1 !== null) {
          var result2 = [];
          var result4 = parse_WS(context);
          while (result4 !== null) {
            result2.push(result4);
            var result4 = parse_WS(context);
          }
          if (result2 !== null) {
            if (input.substr(pos, 1) === ")") {
              var result3 = ")";
              pos += 1;
            } else {
              var result3 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString(")"));
              }
            }
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[144] NIL");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_WS(context) {
        var cacheKey = "WS" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        if (input.substr(pos).match(/^[ ]/) !== null) {
          var result4 = input.charAt(pos);
          pos++;
        } else {
          var result4 = null;
          if (context.reportMatchFailures) {
            matchFailed("[ ]");
          }
        }
        if (result4 !== null) {
          var result0 = result4;
        } else {
          if (input.substr(pos).match(/^[	]/) !== null) {
            var result3 = input.charAt(pos);
            pos++;
          } else {
            var result3 = null;
            if (context.reportMatchFailures) {
              matchFailed("[	]");
            }
          }
          if (result3 !== null) {
            var result0 = result3;
          } else {
            if (input.substr(pos).match(/^[\r]/) !== null) {
              var result2 = input.charAt(pos);
              pos++;
            } else {
              var result2 = null;
              if (context.reportMatchFailures) {
                matchFailed("[\\r]");
              }
            }
            if (result2 !== null) {
              var result0 = result2;
            } else {
              if (input.substr(pos).match(/^[\n]/) !== null) {
                var result1 = input.charAt(pos);
                pos++;
              } else {
                var result1 = null;
                if (context.reportMatchFailures) {
                  matchFailed("[\\n]");
                }
              }
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[145] WS");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_ANON(context) {
        var cacheKey = "ANON" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "[") {
          var result1 = "[";
          pos += 1;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("["));
          }
        }
        if (result1 !== null) {
          var result2 = [];
          var result4 = parse_WS(context);
          while (result4 !== null) {
            result2.push(result4);
            var result4 = parse_WS(context);
          }
          if (result2 !== null) {
            if (input.substr(pos, 1) === "]") {
              var result3 = "]";
              pos += 1;
            } else {
              var result3 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("]"));
              }
            }
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[146] ANON");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_PN_CHARS_BASE(context) {
        var cacheKey = "PN_CHARS_BASE" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        if (input.substr(pos).match(/^[A-Z]/) !== null) {
          var result14 = input.charAt(pos);
          pos++;
        } else {
          var result14 = null;
          if (context.reportMatchFailures) {
            matchFailed("[A-Z]");
          }
        }
        if (result14 !== null) {
          var result0 = result14;
        } else {
          if (input.substr(pos).match(/^[a-z]/) !== null) {
            var result13 = input.charAt(pos);
            pos++;
          } else {
            var result13 = null;
            if (context.reportMatchFailures) {
              matchFailed("[a-z]");
            }
          }
          if (result13 !== null) {
            var result0 = result13;
          } else {
            if (input.substr(pos).match(/^[\xC0-\xD6]/) !== null) {
              var result12 = input.charAt(pos);
              pos++;
            } else {
              var result12 = null;
              if (context.reportMatchFailures) {
                matchFailed("[\\xC0-\\xD6]");
              }
            }
            if (result12 !== null) {
              var result0 = result12;
            } else {
              if (input.substr(pos).match(/^[\xD8-\xF6]/) !== null) {
                var result11 = input.charAt(pos);
                pos++;
              } else {
                var result11 = null;
                if (context.reportMatchFailures) {
                  matchFailed("[\\xD8-\\xF6]");
                }
              }
              if (result11 !== null) {
                var result0 = result11;
              } else {
                if (input.substr(pos).match(/^[\xF8-\u02FF]/) !== null) {
                  var result10 = input.charAt(pos);
                  pos++;
                } else {
                  var result10 = null;
                  if (context.reportMatchFailures) {
                    matchFailed("[\\xF8-\\u02FF]");
                  }
                }
                if (result10 !== null) {
                  var result0 = result10;
                } else {
                  if (input.substr(pos).match(/^[\u0370-\u037D]/) !== null) {
                    var result9 = input.charAt(pos);
                    pos++;
                  } else {
                    var result9 = null;
                    if (context.reportMatchFailures) {
                      matchFailed("[\\u0370-\\u037D]");
                    }
                  }
                  if (result9 !== null) {
                    var result0 = result9;
                  } else {
                    if (input.substr(pos).match(/^[\u037F-\u1FFF]/) !== null) {
                      var result8 = input.charAt(pos);
                      pos++;
                    } else {
                      var result8 = null;
                      if (context.reportMatchFailures) {
                        matchFailed("[\\u037F-\\u1FFF]");
                      }
                    }
                    if (result8 !== null) {
                      var result0 = result8;
                    } else {
                      if (input.substr(pos).match(/^[\u200C-\u200D]/) !== null) {
                        var result7 = input.charAt(pos);
                        pos++;
                      } else {
                        var result7 = null;
                        if (context.reportMatchFailures) {
                          matchFailed("[\\u200C-\\u200D]");
                        }
                      }
                      if (result7 !== null) {
                        var result0 = result7;
                      } else {
                        if (input.substr(pos).match(/^[\u2070-\u218F]/) !== null) {
                          var result6 = input.charAt(pos);
                          pos++;
                        } else {
                          var result6 = null;
                          if (context.reportMatchFailures) {
                            matchFailed("[\\u2070-\\u218F]");
                          }
                        }
                        if (result6 !== null) {
                          var result0 = result6;
                        } else {
                          if (input.substr(pos).match(/^[\u2C00-\u2FEF]/) !== null) {
                            var result5 = input.charAt(pos);
                            pos++;
                          } else {
                            var result5 = null;
                            if (context.reportMatchFailures) {
                              matchFailed("[\\u2C00-\\u2FEF]");
                            }
                          }
                          if (result5 !== null) {
                            var result0 = result5;
                          } else {
                            if (input.substr(pos).match(/^[\u3001-\uD7FF]/) !== null) {
                              var result4 = input.charAt(pos);
                              pos++;
                            } else {
                              var result4 = null;
                              if (context.reportMatchFailures) {
                                matchFailed("[\\u3001-\\uD7FF]");
                              }
                            }
                            if (result4 !== null) {
                              var result0 = result4;
                            } else {
                              if (input.substr(pos).match(/^[\uF900-\uFDCF]/) !== null) {
                                var result3 = input.charAt(pos);
                                pos++;
                              } else {
                                var result3 = null;
                                if (context.reportMatchFailures) {
                                  matchFailed("[\\uF900-\\uFDCF]");
                                }
                              }
                              if (result3 !== null) {
                                var result0 = result3;
                              } else {
                                if (input.substr(pos).match(/^[\uFDF0-\uFFFD]/) !== null) {
                                  var result2 = input.charAt(pos);
                                  pos++;
                                } else {
                                  var result2 = null;
                                  if (context.reportMatchFailures) {
                                    matchFailed("[\\uFDF0-\\uFFFD]");
                                  }
                                }
                                if (result2 !== null) {
                                  var result0 = result2;
                                } else {
                                  if (input.substr(pos).match(/^[\u1000-\uEFFF]/) !== null) {
                                    var result1 = input.charAt(pos);
                                    pos++;
                                  } else {
                                    var result1 = null;
                                    if (context.reportMatchFailures) {
                                      matchFailed("[\\u1000-\\uEFFF]");
                                    }
                                  }
                                  if (result1 !== null) {
                                    var result0 = result1;
                                  } else {
                                    var result0 = null;;
                                  };
                                };
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[147] PN_CHARS_BASE");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_PN_CHARS_U(context) {
        var cacheKey = "PN_CHARS_U" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var result2 = parse_PN_CHARS_BASE(context);
        if (result2 !== null) {
          var result0 = result2;
        } else {
          if (input.substr(pos, 1) === "_") {
            var result1 = "_";
            pos += 1;
          } else {
            var result1 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("_"));
            }
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[148] PN_CHARS_U");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_VARNAME(context) {
        var cacheKey = "VARNAME" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        var result11 = parse_PN_CHARS_U(context);
        if (result11 !== null) {
          var result2 = result11;
        } else {
          if (input.substr(pos).match(/^[0-9]/) !== null) {
            var result10 = input.charAt(pos);
            pos++;
          } else {
            var result10 = null;
            if (context.reportMatchFailures) {
              matchFailed("[0-9]");
            }
          }
          if (result10 !== null) {
            var result2 = result10;
          } else {
            var result2 = null;;
          };
        }
        if (result2 !== null) {
          var result3 = [];
          var result9 = parse_PN_CHARS_U(context);
          if (result9 !== null) {
            var result4 = result9;
          } else {
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result8 = input.charAt(pos);
              pos++;
            } else {
              var result8 = null;
              if (context.reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
            if (result8 !== null) {
              var result4 = result8;
            } else {
              if (input.substr(pos).match(/^[\xB7]/) !== null) {
                var result7 = input.charAt(pos);
                pos++;
              } else {
                var result7 = null;
                if (context.reportMatchFailures) {
                  matchFailed("[\\xB7]");
                }
              }
              if (result7 !== null) {
                var result4 = result7;
              } else {
                if (input.substr(pos).match(/^[\u0300-\u036F]/) !== null) {
                  var result6 = input.charAt(pos);
                  pos++;
                } else {
                  var result6 = null;
                  if (context.reportMatchFailures) {
                    matchFailed("[\\u0300-\\u036F]");
                  }
                }
                if (result6 !== null) {
                  var result4 = result6;
                } else {
                  if (input.substr(pos).match(/^[\u203F-\u2040]/) !== null) {
                    var result5 = input.charAt(pos);
                    pos++;
                  } else {
                    var result5 = null;
                    if (context.reportMatchFailures) {
                      matchFailed("[\\u203F-\\u2040]");
                    }
                  }
                  if (result5 !== null) {
                    var result4 = result5;
                  } else {
                    var result4 = null;;
                  };
                };
              };
            };
          }
          while (result4 !== null) {
            result3.push(result4);
            var result9 = parse_PN_CHARS_U(context);
            if (result9 !== null) {
              var result4 = result9;
            } else {
              if (input.substr(pos).match(/^[0-9]/) !== null) {
                var result8 = input.charAt(pos);
                pos++;
              } else {
                var result8 = null;
                if (context.reportMatchFailures) {
                  matchFailed("[0-9]");
                }
              }
              if (result8 !== null) {
                var result4 = result8;
              } else {
                if (input.substr(pos).match(/^[\xB7]/) !== null) {
                  var result7 = input.charAt(pos);
                  pos++;
                } else {
                  var result7 = null;
                  if (context.reportMatchFailures) {
                    matchFailed("[\\xB7]");
                  }
                }
                if (result7 !== null) {
                  var result4 = result7;
                } else {
                  if (input.substr(pos).match(/^[\u0300-\u036F]/) !== null) {
                    var result6 = input.charAt(pos);
                    pos++;
                  } else {
                    var result6 = null;
                    if (context.reportMatchFailures) {
                      matchFailed("[\\u0300-\\u036F]");
                    }
                  }
                  if (result6 !== null) {
                    var result4 = result6;
                  } else {
                    if (input.substr(pos).match(/^[\u203F-\u2040]/) !== null) {
                      var result5 = input.charAt(pos);
                      pos++;
                    } else {
                      var result5 = null;
                      if (context.reportMatchFailures) {
                        matchFailed("[\\u203F-\\u2040]");
                      }
                    }
                    if (result5 !== null) {
                      var result4 = result5;
                    } else {
                      var result4 = null;;
                    };
                  };
                };
              };
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(init, rpart) { return init+rpart.join('') })(result1[0], result1[1])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[149] VARNAME");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_PN_CHARS(context) {
        var cacheKey = "PN_CHARS" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var result6 = parse_PN_CHARS_U(context);
        if (result6 !== null) {
          var result0 = result6;
        } else {
          if (input.substr(pos, 1) === "-") {
            var result5 = "-";
            pos += 1;
          } else {
            var result5 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("-"));
            }
          }
          if (result5 !== null) {
            var result0 = result5;
          } else {
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result4 = input.charAt(pos);
              pos++;
            } else {
              var result4 = null;
              if (context.reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
            if (result4 !== null) {
              var result0 = result4;
            } else {
              if (input.substr(pos).match(/^[\xB7]/) !== null) {
                var result3 = input.charAt(pos);
                pos++;
              } else {
                var result3 = null;
                if (context.reportMatchFailures) {
                  matchFailed("[\\xB7]");
                }
              }
              if (result3 !== null) {
                var result0 = result3;
              } else {
                if (input.substr(pos).match(/^[\u0300-\u036F]/) !== null) {
                  var result2 = input.charAt(pos);
                  pos++;
                } else {
                  var result2 = null;
                  if (context.reportMatchFailures) {
                    matchFailed("[\\u0300-\\u036F]");
                  }
                }
                if (result2 !== null) {
                  var result0 = result2;
                } else {
                  if (input.substr(pos).match(/^[\u203F-\u2040]/) !== null) {
                    var result1 = input.charAt(pos);
                    pos++;
                  } else {
                    var result1 = null;
                    if (context.reportMatchFailures) {
                      matchFailed("[\\u203F-\\u2040]");
                    }
                  }
                  if (result1 !== null) {
                    var result0 = result1;
                  } else {
                    var result0 = null;;
                  };
                };
              };
            };
          };
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[150] PN_CHARS");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_PN_PREFIX(context) {
        var cacheKey = "PN_PREFIX" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = parse_PN_CHARS_BASE(context);
        if (result2 !== null) {
          var result3 = [];
          var result6 = parse_PN_CHARS(context);
          if (result6 !== null) {
            var result4 = result6;
          } else {
            if (input.substr(pos, 1) === ".") {
              var result5 = ".";
              pos += 1;
            } else {
              var result5 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("."));
              }
            }
            if (result5 !== null) {
              var result4 = result5;
            } else {
              var result4 = null;;
            };
          }
          while (result4 !== null) {
            result3.push(result4);
            var result6 = parse_PN_CHARS(context);
            if (result6 !== null) {
              var result4 = result6;
            } else {
              if (input.substr(pos, 1) === ".") {
                var result5 = ".";
                pos += 1;
              } else {
                var result5 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("."));
                }
              }
              if (result5 !== null) {
                var result4 = result5;
              } else {
                var result4 = null;;
              };
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(base, rest) { if(rest[rest.length-1] == '.'){
                                                        	throw new Error("Wrong PN_PREFIX, cannot finish with '.'")
          					      } else {
          						  return base + rest.join('');
          					      }})(result1[0], result1[1])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[151] PN_PREFIX");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_PN_LOCAL(context) {
        var cacheKey = "PN_LOCAL" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        var result8 = parse_PN_CHARS_U(context);
        if (result8 !== null) {
          var result2 = result8;
        } else {
          if (input.substr(pos).match(/^[0-9]/) !== null) {
            var result7 = input.charAt(pos);
            pos++;
          } else {
            var result7 = null;
            if (context.reportMatchFailures) {
              matchFailed("[0-9]");
            }
          }
          if (result7 !== null) {
            var result2 = result7;
          } else {
            var result2 = null;;
          };
        }
        if (result2 !== null) {
          var result3 = [];
          var result6 = parse_PN_CHARS(context);
          if (result6 !== null) {
            var result4 = result6;
          } else {
            if (input.substr(pos, 1) === ".") {
              var result5 = ".";
              pos += 1;
            } else {
              var result5 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("."));
              }
            }
            if (result5 !== null) {
              var result4 = result5;
            } else {
              var result4 = null;;
            };
          }
          while (result4 !== null) {
            result3.push(result4);
            var result6 = parse_PN_CHARS(context);
            if (result6 !== null) {
              var result4 = result6;
            } else {
              if (input.substr(pos, 1) === ".") {
                var result5 = ".";
                pos += 1;
              } else {
                var result5 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("."));
                }
              }
              if (result5 !== null) {
                var result4 = result5;
              } else {
                var result4 = null;;
              };
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(base, rest) { if(rest[rest.length-1] == '.'){
                                                                 throw new Error("Wrong PN_LOCAL, cannot finish with '.'")
                                                               } else {
                                                                   return base + rest.join('');
                                                               }})(result1[0], result1[1])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[152] PN_LOCAL");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          switch (failuresExpected.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpected[0];
            default:
              failuresExpected.sort();
              return failuresExpected.slice(0, failuresExpected.length - 1).join(', ')
                + ' or '
                + failuresExpected[failuresExpected.length - 1];
          }
        }

        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quoteString(input.charAt(actualPos))
          : 'end of input';

        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }

      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */

        var line = 1;
        var column = 1;
        var seenCR = false;

        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }

        return { line: line, column: column };
      }



        var flattenString = function(arrs) {

            var acum ="";

            for(var i=0; i< arrs.length; i++) {

              if(typeof(arrs[i])==='string') {

                acum = acum + arrs[i];

              } else {

                acum = acum + arrs[i].join('');

              }

            }



            return acum;

        }





        var GlobalBlankNodeCounter = 0;



        var prefixes = {};



        var registerPrefix = function(prefix, uri) {

            prefixes[prefix] = uri;

        }



        var registerDefaultPrefix = function(uri) {

            prefixes[null] = uri;

        }



      var result = parse_SPARQL({ reportMatchFailures: true });

      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }

      return result;
    },

    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };

  /* Thrown when a parser encounters a syntax error. */

  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };

  result.SyntaxError.prototype = Error.prototype;

  return result;
})();


sparql_query = function(query) {
    var result = "";
    try{
        result = JSON.stringify(sparql_parser.parse(query));
    } catch (err) {
        result = err.message;
    }
    return result;
};
