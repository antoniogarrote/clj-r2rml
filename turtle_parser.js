turtle_parser = (function(){
  /* Generated by PEG.js (http://pegjs.majda.cz/). */

  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.grammarParser.SyntaxError| describing the error.
     */
    parse: function(input) {
      var pos = 0;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};

      function padLeft(input, padding, length) {
        var result = input;

        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }

        return result;
      }

      function escape(ch) {
        var charCode = ch.charCodeAt(0);

        if (charCode <= 0xFF) {
          var escapeChar = 'x';
          var length = 2;
        } else {
          var escapeChar = 'u';
          var length = 4;
        }

        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }

      function quoteString(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')        // backslash
          .replace(/"/g, '\\"')          // closing quote character
          .replace(/\r/g, '\\r')         // carriage return
          .replace(/\u2028/g, '\\u2028') // line separator
          .replace(/\u2029/g, '\\u2029') // paragraph separator
          .replace(/\n/g, '\\n')         // line feed
          .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
          + '"';
      }

      function arrayContains(array, value) {
        /*
         * Stupid IE does not have Array.prototype.indexOf, otherwise this
         * function would be a one-liner.
         */
        var length = array.length;
        for (var i = 0; i < length; i++) {
          if (array[i] === value) {
            return true;
          }
        }
        return false;
      }

      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }

        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }

        if (!arrayContains(rightmostMatchFailuresExpected, failure)) {
          rightmostMatchFailuresExpected.push(failure);
        }
      }

      function parse_turtleDoc(context) {
        var cacheKey = "turtleDoc" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result1 = [];
        var result2 = parse_statement(context);
        while (result2 !== null) {
          result1.push(result2);
          var result2 = parse_statement(context);
        }
        var result0 = result1 !== null
          ? (function(sts) {
                  return sts;
              })(result1)
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_statement(context) {
        var cacheKey = "statement" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos1 = pos;
        var result12 = [];
        var result19 = parse_WS(context);
        while (result19 !== null) {
          result12.push(result19);
          var result19 = parse_WS(context);
        }
        if (result12 !== null) {
          var result13 = parse_directive(context);
          if (result13 !== null) {
            var result14 = [];
            var result18 = parse_WS(context);
            while (result18 !== null) {
              result14.push(result18);
              var result18 = parse_WS(context);
            }
            if (result14 !== null) {
              if (input.substr(pos, 1) === ".") {
                var result15 = ".";
                pos += 1;
              } else {
                var result15 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("."));
                }
              }
              if (result15 !== null) {
                var result16 = [];
                var result17 = parse_WS(context);
                while (result17 !== null) {
                  result16.push(result17);
                  var result17 = parse_WS(context);
                }
                if (result16 !== null) {
                  var result11 = [result12, result13, result14, result15, result16];
                } else {
                  var result11 = null;
                  pos = savedPos1;
                }
              } else {
                var result11 = null;
                pos = savedPos1;
              }
            } else {
              var result11 = null;
              pos = savedPos1;
            }
          } else {
            var result11 = null;
            pos = savedPos1;
          }
        } else {
          var result11 = null;
          pos = savedPos1;
        }
        var result10 = result11 !== null
          ? (function(d) {
                  return d;
              })(result11[1])
          : null;
        if (result10 !== null) {
          var result0 = result10;
        } else {
          var savedPos0 = pos;
          var result5 = [];
          var result9 = parse_WS(context);
          while (result9 !== null) {
            result5.push(result9);
            var result9 = parse_WS(context);
          }
          if (result5 !== null) {
            var result6 = parse_TriplesBlock(context);
            if (result6 !== null) {
              var result7 = [];
              var result8 = parse_WS(context);
              while (result8 !== null) {
                result7.push(result8);
                var result8 = parse_WS(context);
              }
              if (result7 !== null) {
                var result4 = [result5, result6, result7];
              } else {
                var result4 = null;
                pos = savedPos0;
              }
            } else {
              var result4 = null;
              pos = savedPos0;
            }
          } else {
            var result4 = null;
            pos = savedPos0;
          }
          var result3 = result4 !== null
            ? (function(ts) {
                    return ts;
                })(result4[1])
            : null;
          if (result3 !== null) {
            var result0 = result3;
          } else {
            var result2 = parse_WS(context);
            if (result2 !== null) {
              var result1 = [];
              while (result2 !== null) {
                result1.push(result2);
                var result2 = parse_WS(context);
              }
            } else {
              var result1 = null;
            }
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_directive(context) {
        var cacheKey = "directive" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result2 = parse_prefixID(context);
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_base(context);
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_base(context) {
        var cacheKey = "base" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = [];
        var result7 = parse_WS(context);
        while (result7 !== null) {
          result2.push(result7);
          var result7 = parse_WS(context);
        }
        if (result2 !== null) {
          if (input.substr(pos, 5) === "@base") {
            var result3 = "@base";
            pos += 5;
          } else {
            var result3 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("@base"));
            }
          }
          if (result3 !== null) {
            var result6 = parse_WS(context);
            if (result6 !== null) {
              var result4 = [];
              while (result6 !== null) {
                result4.push(result6);
                var result6 = parse_WS(context);
              }
            } else {
              var result4 = null;
            }
            if (result4 !== null) {
              var result5 = parse_IRI_REF(context);
              if (result5 !== null) {
                var result1 = [result2, result3, result4, result5];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(i) {
                registerDefaultPrefix(i);

                base = {};
                base.token = 'base';
                base.value = i;

                return base;
          })(result1[3])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_prefixID(context) {
        var cacheKey = "prefixID" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = [];
        var result12 = parse_WS(context);
        while (result12 !== null) {
          result2.push(result12);
          var result12 = parse_WS(context);
        }
        if (result2 !== null) {
          if (input.substr(pos, 7) === "@prefix") {
            var result3 = "@prefix";
            pos += 7;
          } else {
            var result3 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("@prefix"));
            }
          }
          if (result3 !== null) {
            var result11 = parse_WS(context);
            if (result11 !== null) {
              var result4 = [];
              while (result11 !== null) {
                result4.push(result11);
                var result11 = parse_WS(context);
              }
            } else {
              var result4 = null;
            }
            if (result4 !== null) {
              var result10 = parse_PN_PREFIX(context);
              var result5 = result10 !== null ? result10 : '';
              if (result5 !== null) {
                if (input.substr(pos, 1) === ":") {
                  var result6 = ":";
                  pos += 1;
                } else {
                  var result6 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString(":"));
                  }
                }
                if (result6 !== null) {
                  var result7 = [];
                  var result9 = parse_WS(context);
                  while (result9 !== null) {
                    result7.push(result9);
                    var result9 = parse_WS(context);
                  }
                  if (result7 !== null) {
                    var result8 = parse_IRI_REF(context);
                    if (result8 !== null) {
                      var result1 = [result2, result3, result4, result5, result6, result7, result8];
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(p, l) {

                registerPrefix(p,l);

                prefix = {};
                prefix.token = 'prefix';
                prefix.prefix = p;
                prefix.local = l;

                return prefix;
          })(result1[3], result1[6])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_TriplesBlock(context) {
        var cacheKey = "TriplesBlock" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = parse_TriplesSameSubject(context);
        if (result2 !== null) {
          var savedPos1 = pos;
          var result5 = [];
          var result9 = parse_WS(context);
          while (result9 !== null) {
            result5.push(result9);
            var result9 = parse_WS(context);
          }
          if (result5 !== null) {
            if (input.substr(pos, 1) === ".") {
              var result6 = ".";
              pos += 1;
            } else {
              var result6 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("."));
              }
            }
            if (result6 !== null) {
              var result8 = parse_TriplesBlock(context);
              var result7 = result8 !== null ? result8 : '';
              if (result7 !== null) {
                var result4 = [result5, result6, result7];
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          var result3 = result4 !== null ? result4 : '';
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(b, bs) {
               var triples = b.triplesContext;
               var toTest = null;
                if(typeof(bs) === 'object') {
                      if(bs.length != null) {
                            if(bs[2].triplesContext!=null) {
                               triples = triples.concat(bs[2].triplesContext);
                        }
                     }
                }

               return {token:'triples',
                       triplesContext: triples}
          })(result1[0], result1[1])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[54] TriplesBlock");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_TriplesSameSubject(context) {
        var cacheKey = "TriplesSameSubject" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos1 = pos;
        var result11 = [];
        var result16 = parse_WS(context);
        while (result16 !== null) {
          result11.push(result16);
          var result16 = parse_WS(context);
        }
        if (result11 !== null) {
          var result12 = parse_GraphTerm(context);
          if (result12 !== null) {
            var result13 = [];
            var result15 = parse_WS(context);
            while (result15 !== null) {
              result13.push(result15);
              var result15 = parse_WS(context);
            }
            if (result13 !== null) {
              var result14 = parse_PropertyListNotEmpty(context);
              if (result14 !== null) {
                var result10 = [result11, result12, result13, result14];
              } else {
                var result10 = null;
                pos = savedPos1;
              }
            } else {
              var result10 = null;
              pos = savedPos1;
            }
          } else {
            var result10 = null;
            pos = savedPos1;
          }
        } else {
          var result10 = null;
          pos = savedPos1;
        }
        var result9 = result10 !== null
          ? (function(s, pairs) {
                var triplesContext = pairs.triplesContext;
                var subject = s;
                if(pairs.pairs != null) {
                  for(var i=0; i< pairs.pairs.length; i++) {
                      var pair = pairs.pairs[i];
                      var triple = {subject: subject, predicate: pair[0], object: pair[1]}
                      triplesContext.push(triple);
                  }
                }

                var token = {};
                token.token = "triplessamesubject";
                token.triplesContext = triplesContext;
                token.chainSubject = subject;

                return token;
            })(result10[1], result10[3])
          : null;
        if (result9 !== null) {
          var result0 = result9;
        } else {
          var savedPos0 = pos;
          var result3 = [];
          var result8 = parse_WS(context);
          while (result8 !== null) {
            result3.push(result8);
            var result8 = parse_WS(context);
          }
          if (result3 !== null) {
            var result4 = parse_TriplesNode(context);
            if (result4 !== null) {
              var result5 = [];
              var result7 = parse_WS(context);
              while (result7 !== null) {
                result5.push(result7);
                var result7 = parse_WS(context);
              }
              if (result5 !== null) {
                var result6 = parse_PropertyList(context);
                if (result6 !== null) {
                  var result2 = [result3, result4, result5, result6];
                } else {
                  var result2 = null;
                  pos = savedPos0;
                }
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          var result1 = result2 !== null
            ? (function(tn, pairs) {
                  var triplesContext = tn.triplesContext;
                  var subject = tn.chainSubject;

                  if(pairs.pairs != null) {
                    for(var i=0; i< pairs.pairs.length; i++) {
                        var pair = pairs.pairs[i];
                        if(tn.token === "triplesnodecollection") {
                            for(var j=0; j<subject.length; j++) {
                                var subj = subject[j];
                                if(typeof(subj) === 'object') {
                                    var triple = {subject: subj.chainSubject, predicate: pair[0], object: pair[1]}
                                    triplesContext.concat(subj.triplesContext);
                                } else {
                                    var triple = {subject: subject[j], predicate: pair[0], object: pair[1]}
                                    triplesContext.push(triple);
                                }
                            }
                        } else {
                            var triple = {subject: subject, predicate: pair[0], object: pair[1]}
                            triplesContext.push(triple);
                        }
                    }
                  }

                  var token = {};
                  token.token = "triplessamesubject";
                  token.triplesContext = triplesContext;
                  token.chainSubject = subject;

                  return token;
              })(result2[1], result2[3])
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[66] TriplesSameSubject");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_PropertyListNotEmpty(context) {
        var cacheKey = "PropertyListNotEmpty" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = parse_Verb(context);
        if (result2 !== null) {
          var result3 = [];
          var result18 = parse_WS(context);
          while (result18 !== null) {
            result3.push(result18);
            var result18 = parse_WS(context);
          }
          if (result3 !== null) {
            var result4 = parse_ObjectList(context);
            if (result4 !== null) {
              var result5 = [];
              var savedPos1 = pos;
              var result7 = [];
              var result17 = parse_WS(context);
              while (result17 !== null) {
                result7.push(result17);
                var result17 = parse_WS(context);
              }
              if (result7 !== null) {
                if (input.substr(pos, 1) === ";") {
                  var result8 = ";";
                  pos += 1;
                } else {
                  var result8 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString(";"));
                  }
                }
                if (result8 !== null) {
                  var result9 = [];
                  var result16 = parse_WS(context);
                  while (result16 !== null) {
                    result9.push(result16);
                    var result16 = parse_WS(context);
                  }
                  if (result9 !== null) {
                    var savedPos2 = pos;
                    var result12 = parse_Verb(context);
                    if (result12 !== null) {
                      var result13 = [];
                      var result15 = parse_WS(context);
                      while (result15 !== null) {
                        result13.push(result15);
                        var result15 = parse_WS(context);
                      }
                      if (result13 !== null) {
                        var result14 = parse_ObjectList(context);
                        if (result14 !== null) {
                          var result11 = [result12, result13, result14];
                        } else {
                          var result11 = null;
                          pos = savedPos2;
                        }
                      } else {
                        var result11 = null;
                        pos = savedPos2;
                      }
                    } else {
                      var result11 = null;
                      pos = savedPos2;
                    }
                    var result10 = result11 !== null ? result11 : '';
                    if (result10 !== null) {
                      var result6 = [result7, result8, result9, result10];
                    } else {
                      var result6 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result6 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result6 = null;
                  pos = savedPos1;
                }
              } else {
                var result6 = null;
                pos = savedPos1;
              }
              while (result6 !== null) {
                result5.push(result6);
                var savedPos1 = pos;
                var result7 = [];
                var result17 = parse_WS(context);
                while (result17 !== null) {
                  result7.push(result17);
                  var result17 = parse_WS(context);
                }
                if (result7 !== null) {
                  if (input.substr(pos, 1) === ";") {
                    var result8 = ";";
                    pos += 1;
                  } else {
                    var result8 = null;
                    if (context.reportMatchFailures) {
                      matchFailed(quoteString(";"));
                    }
                  }
                  if (result8 !== null) {
                    var result9 = [];
                    var result16 = parse_WS(context);
                    while (result16 !== null) {
                      result9.push(result16);
                      var result16 = parse_WS(context);
                    }
                    if (result9 !== null) {
                      var savedPos2 = pos;
                      var result12 = parse_Verb(context);
                      if (result12 !== null) {
                        var result13 = [];
                        var result15 = parse_WS(context);
                        while (result15 !== null) {
                          result13.push(result15);
                          var result15 = parse_WS(context);
                        }
                        if (result13 !== null) {
                          var result14 = parse_ObjectList(context);
                          if (result14 !== null) {
                            var result11 = [result12, result13, result14];
                          } else {
                            var result11 = null;
                            pos = savedPos2;
                          }
                        } else {
                          var result11 = null;
                          pos = savedPos2;
                        }
                      } else {
                        var result11 = null;
                        pos = savedPos2;
                      }
                      var result10 = result11 !== null ? result11 : '';
                      if (result10 !== null) {
                        var result6 = [result7, result8, result9, result10];
                      } else {
                        var result6 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result6 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result6 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result6 = null;
                  pos = savedPos1;
                }
              }
              if (result5 !== null) {
                var result1 = [result2, result3, result4, result5];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(v, ol, rest) {
                token = {}
                token.token = 'propertylist';
                var triplesContext = [];
                var pairs = [];
                var test = [];

                for( var i=0; i<ol.length; i++) {

                   if(ol[i].triplesContext != null) {
                        triplesContext = triplesContext.concat(ol[i].triplesContext);
                       pairs.push([v, ol[i].chainSubject]);
                    } else {
                        pairs.push([v, ol[i]])
                    }

                }


                for(var i=0; i<rest.length; i++) {
                    var tok = rest[i][3];
                    var newVerb  = tok[0];
                    var newObjsList = tok[2];

                    if (newObjsList != null) {
                      for(var j=0; j<newObjsList.length; j++) {
                       if(newObjsList[j].triplesContext != null) {
                          triplesContext = triplesContext.concat(newObjsList[j].triplesContext);
                         pairs.push([newVerb, newObjsList[j].chainSubject]);
                        } else {
                          pairs.push([newVerb, newObjsList[j]])
                        }
                      }
                    }
                }

                token.pairs = pairs;
                token.triplesContext = triplesContext;

                return token;

          })(result1[0], result1[2], result1[3])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[67] PropertyListNotEmpty");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_PropertyList(context) {
        var cacheKey = "PropertyList" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var result1 = parse_PropertyListNotEmpty(context);
        var result0 = result1 !== null ? result1 : '';
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[68] PropertyList");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_ObjectList(context) {
        var cacheKey = "ObjectList" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = parse_GraphNode(context);
        if (result2 !== null) {
          var result3 = [];
          var result10 = parse_WS(context);
          while (result10 !== null) {
            result3.push(result10);
            var result10 = parse_WS(context);
          }
          if (result3 !== null) {
            var result4 = [];
            var savedPos1 = pos;
            if (input.substr(pos, 1) === ",") {
              var result6 = ",";
              pos += 1;
            } else {
              var result6 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString(","));
              }
            }
            if (result6 !== null) {
              var result7 = [];
              var result9 = parse_WS(context);
              while (result9 !== null) {
                result7.push(result9);
                var result9 = parse_WS(context);
              }
              if (result7 !== null) {
                var result8 = parse_GraphNode(context);
                if (result8 !== null) {
                  var result5 = [result6, result7, result8];
                } else {
                  var result5 = null;
                  pos = savedPos1;
                }
              } else {
                var result5 = null;
                pos = savedPos1;
              }
            } else {
              var result5 = null;
              pos = savedPos1;
            }
            while (result5 !== null) {
              result4.push(result5);
              var savedPos1 = pos;
              if (input.substr(pos, 1) === ",") {
                var result6 = ",";
                pos += 1;
              } else {
                var result6 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString(","));
                }
              }
              if (result6 !== null) {
                var result7 = [];
                var result9 = parse_WS(context);
                while (result9 !== null) {
                  result7.push(result9);
                  var result9 = parse_WS(context);
                }
                if (result7 !== null) {
                  var result8 = parse_GraphNode(context);
                  if (result8 !== null) {
                    var result5 = [result6, result7, result8];
                  } else {
                    var result5 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos1;
                }
              } else {
                var result5 = null;
                pos = savedPos1;
              }
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(obj, objs) {

                  var toReturn = [];
                  if(typeof(obj)==='object' && obj.token==='triplesnodecollection') {
                      for(var i=0; i<obj.chainSubject.length; i++) {
                          toReturn.push(obj.chainSubject[i]);
                      }
                  } else {
                      toReturn.push(obj);
                  }

                  for(var i=0; i<objs.length; i++) {
                      for(var j=0; j<objs[i].length; j++) {
                          if(typeof(objs[i][j])=="object" && objs[i][j].token != null) {
                              toReturn.push(objs[i][j]);
                          }
                      }
                  }

                  return toReturn;
              })(result1[0], result1[2])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[69] ObjectList");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Verb(context) {
        var cacheKey = "Verb" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var result3 = parse_IRIref(context);
        if (result3 !== null) {
          var result0 = result3;
        } else {
          if (input.substr(pos, 1) === "a") {
            var result2 = "a";
            pos += 1;
          } else {
            var result2 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("a"));
            }
          }
          var result1 = result2 !== null
            ? (function() {
                  return{token: 'uri', prefix:null, suffix:null, value:"http://www.w3.org/1999/02/22-rdf-syntax-ns#type"}
              })()
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[71] Verb");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_PropertyListPath(context) {
        var cacheKey = "PropertyListPath" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var result1 = parse_PropertyListNotEmpty(context);
        var result0 = result1 !== null ? result1 : '';
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[74] PropertyListPath");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_TriplesNode(context) {
        var cacheKey = "TriplesNode" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var result3 = parse_Collection(context);
        var result2 = result3 !== null
          ? (function(c) {
                triplesContext = [];
                chainSubject = [];

                for(var i=0; i<c.length; i++) {
                    var node = c[i];

                    if(node.triplesContext == null) {
                        chainSubject.push(node);
                    } else {
                        triplesContext.concat(node.triplesContext);
                        chainSubject.push(node.chainSubject);
                    }
                }
                return {token:"triplesnodecollection", triplesContext:triplesContext, chainSubject:chainSubject}
          })(result3)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_BlankNodePropertyList(context);
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[87] TriplesNode");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_BlankNodePropertyList(context) {
        var cacheKey = "BlankNodePropertyList" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = [];
        var result12 = parse_WS(context);
        while (result12 !== null) {
          result2.push(result12);
          var result12 = parse_WS(context);
        }
        if (result2 !== null) {
          if (input.substr(pos, 1) === "[") {
            var result3 = "[";
            pos += 1;
          } else {
            var result3 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("["));
            }
          }
          if (result3 !== null) {
            var result4 = [];
            var result11 = parse_WS(context);
            while (result11 !== null) {
              result4.push(result11);
              var result11 = parse_WS(context);
            }
            if (result4 !== null) {
              var result5 = parse_PropertyListNotEmpty(context);
              if (result5 !== null) {
                var result6 = [];
                var result10 = parse_WS(context);
                while (result10 !== null) {
                  result6.push(result10);
                  var result10 = parse_WS(context);
                }
                if (result6 !== null) {
                  if (input.substr(pos, 1) === "]") {
                    var result7 = "]";
                    pos += 1;
                  } else {
                    var result7 = null;
                    if (context.reportMatchFailures) {
                      matchFailed(quoteString("]"));
                    }
                  }
                  if (result7 !== null) {
                    var result8 = [];
                    var result9 = parse_WS(context);
                    while (result9 !== null) {
                      result8.push(result9);
                      var result9 = parse_WS(context);
                    }
                    if (result8 !== null) {
                      var result1 = [result2, result3, result4, result5, result6, result7, result8];
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(pl) {

                GlobalBlankNodeCounter++;
                var subject = {token:'blank', label:''+GlobalBlankNodeCounter};
                var newTriples =  [];

                for(var i=0; i< pl.pairs.length; i++) {
                    var pair = pl.pairs[i];
                    var triple = {}
                    triple.subject = subject;
                    triple.predicate = pair[0];
                    triple.object = pair[1];
                    newTriples.push(triple);
                }

                return {token: 'triplesnode',
                        kind: 'blanknodepropertylist',
                        triplesContext: pl.triplesContext.concat(newTriples),
                        chainSubject: subject};
          })(result1[3])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[88] BlankNodePropertyList");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_Collection(context) {
        var cacheKey = "Collection" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = [];
        var result13 = parse_WS(context);
        while (result13 !== null) {
          result2.push(result13);
          var result13 = parse_WS(context);
        }
        if (result2 !== null) {
          if (input.substr(pos, 1) === "(") {
            var result3 = "(";
            pos += 1;
          } else {
            var result3 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("("));
            }
          }
          if (result3 !== null) {
            var result4 = [];
            var result12 = parse_WS(context);
            while (result12 !== null) {
              result4.push(result12);
              var result12 = parse_WS(context);
            }
            if (result4 !== null) {
              var result11 = parse_GraphNode(context);
              if (result11 !== null) {
                var result5 = [];
                while (result11 !== null) {
                  result5.push(result11);
                  var result11 = parse_GraphNode(context);
                }
              } else {
                var result5 = null;
              }
              if (result5 !== null) {
                var result6 = [];
                var result10 = parse_WS(context);
                while (result10 !== null) {
                  result6.push(result10);
                  var result10 = parse_WS(context);
                }
                if (result6 !== null) {
                  if (input.substr(pos, 1) === ")") {
                    var result7 = ")";
                    pos += 1;
                  } else {
                    var result7 = null;
                    if (context.reportMatchFailures) {
                      matchFailed(quoteString(")"));
                    }
                  }
                  if (result7 !== null) {
                    var result8 = [];
                    var result9 = parse_WS(context);
                    while (result9 !== null) {
                      result8.push(result9);
                      var result9 = parse_WS(context);
                    }
                    if (result8 !== null) {
                      var result1 = [result2, result3, result4, result5, result6, result7, result8];
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(gn) {
                return gn;
          })(result1[3])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[89] Collection");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_GraphNode(context) {
        var cacheKey = "GraphNode" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos1 = pos;
        var result9 = [];
        var result13 = parse_WS(context);
        while (result13 !== null) {
          result9.push(result13);
          var result13 = parse_WS(context);
        }
        if (result9 !== null) {
          var result10 = parse_GraphTerm(context);
          if (result10 !== null) {
            var result11 = [];
            var result12 = parse_WS(context);
            while (result12 !== null) {
              result11.push(result12);
              var result12 = parse_WS(context);
            }
            if (result11 !== null) {
              var result8 = [result9, result10, result11];
            } else {
              var result8 = null;
              pos = savedPos1;
            }
          } else {
            var result8 = null;
            pos = savedPos1;
          }
        } else {
          var result8 = null;
          pos = savedPos1;
        }
        if (result8 !== null) {
          var result1 = result8;
        } else {
          var savedPos0 = pos;
          var result3 = [];
          var result7 = parse_WS(context);
          while (result7 !== null) {
            result3.push(result7);
            var result7 = parse_WS(context);
          }
          if (result3 !== null) {
            var result4 = parse_TriplesNode(context);
            if (result4 !== null) {
              var result5 = [];
              var result6 = parse_WS(context);
              while (result6 !== null) {
                result5.push(result6);
                var result6 = parse_WS(context);
              }
              if (result5 !== null) {
                var result2 = [result3, result4, result5];
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          if (result2 !== null) {
            var result1 = result2;
          } else {
            var result1 = null;;
          };
        }
        var result0 = result1 !== null
          ? (function(gn) {
            return gn[1];
          })(result1)
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[90] GraphNode");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_GraphTerm(context) {
        var cacheKey = "GraphTerm" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var result6 = parse_IRIref(context);
        if (result6 !== null) {
          var result0 = result6;
        } else {
          var result5 = parse_RDFLiteral(context);
          if (result5 !== null) {
            var result0 = result5;
          } else {
            var result4 = parse_NumericLiteral(context);
            if (result4 !== null) {
              var result0 = result4;
            } else {
              var result3 = parse_BooleanLiteral(context);
              if (result3 !== null) {
                var result0 = result3;
              } else {
                var result2 = parse_BlankNode(context);
                if (result2 !== null) {
                  var result0 = result2;
                } else {
                  var result1 = parse_NIL(context);
                  if (result1 !== null) {
                    var result0 = result1;
                  } else {
                    var result0 = null;;
                  };
                };
              };
            };
          };
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[94] GraphTerm");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_RDFLiteral(context) {
        var cacheKey = "RDFLiteral" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = parse_String(context);
        if (result2 !== null) {
          var result8 = parse_LANGTAG(context);
          if (result8 !== null) {
            var result4 = result8;
          } else {
            var savedPos1 = pos;
            if (input.substr(pos, 2) === "^^") {
              var result6 = "^^";
              pos += 2;
            } else {
              var result6 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("^^"));
              }
            }
            if (result6 !== null) {
              var result7 = parse_IRIref(context);
              if (result7 !== null) {
                var result5 = [result6, result7];
              } else {
                var result5 = null;
                pos = savedPos1;
              }
            } else {
              var result5 = null;
              pos = savedPos1;
            }
            if (result5 !== null) {
              var result4 = result5;
            } else {
              var result4 = null;;
            };
          }
          var result3 = result4 !== null ? result4 : '';
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(s, e) {
                if(typeof(e) === "string" && e.length > 0) {
                    return {token:'literal', value:s.value, lang:e.slice(1), type:null}
                } else {
                    if(typeof(e) === "object") {
                        e.shift();
                        return {token:'literal', value:s.value, lang:null, type:e }
                    } else {
                        return { token:'literal', value:s.value, lang:null, type:null }
                    }
                }
          })(result1[0], result1[1])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[112] RDFLiteral");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_NumericLiteral(context) {
        var cacheKey = "NumericLiteral" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var result3 = parse_NumericLiteralUnsigned(context);
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_NumericLiteralPositive(context);
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_NumericLiteralNegative(context);
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[113] NumericLiteral");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_NumericLiteralUnsigned(context) {
        var cacheKey = "NumericLiteralUnsigned" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var result3 = parse_DOUBLE(context);
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_DECIMAL(context);
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_INTEGER(context);
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[114] NumericLiteralUnsigned");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_NumericLiteralPositive(context) {
        var cacheKey = "NumericLiteralPositive" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var result3 = parse_DOUBLE_POSITIVE(context);
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_DECIMAL_POSITIVE(context);
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_INTEGER_POSITIVE(context);
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[115] NumericLiteralPositive");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_NumericLiteralNegative(context) {
        var cacheKey = "NumericLiteralNegative" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var result3 = parse_DOUBLE_NEGATIVE(context);
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_DECIMAL_NEGATIVE(context);
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_INTEGER_NEGATIVE(context);
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[116] NumericLiteralNegative");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_BooleanLiteral(context) {
        var cacheKey = "BooleanLiteral" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        if (input.substr(pos, 4) === "true") {
          var result4 = "true";
          pos += 4;
        } else {
          var result4 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("true"));
          }
        }
        var result3 = result4 !== null
          ? (function() {
                lit = {};
                lit.token = "literal";
                lit.lang = null;
                lit.type = "http://www.w3.org/2001/XMLSchema#boolean";
                lit.value = true;
                return lit;
           })()
          : null;
        if (result3 !== null) {
          var result0 = result3;
        } else {
          if (input.substr(pos, 5) === "false") {
            var result2 = "false";
            pos += 5;
          } else {
            var result2 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("false"));
            }
          }
          var result1 = result2 !== null
            ? (function() {
                  lit = {};
                  lit.token = "literal";
                  lit.lang = null;
                  lit.type = "http://www.w3.org/2001/XMLSchema#boolean";
                  lit.value = false;
                  return lit;
            })()
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[117] BooleanLiteral");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_String(context) {
        var cacheKey = "String" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var result8 = parse_STRING_LITERAL1(context);
        var result7 = result8 !== null
          ? (function(s) { return {token:'string', value:s} })(result8)
          : null;
        if (result7 !== null) {
          var result0 = result7;
        } else {
          var result6 = parse_STRING_LITERAL2(context);
          var result5 = result6 !== null
            ? (function(s) { return {token:'string', value:s} })(result6)
            : null;
          if (result5 !== null) {
            var result0 = result5;
          } else {
            var result4 = parse_STRING_LITERAL_LONG1(context);
            var result3 = result4 !== null
              ? (function(s) { return {token:'string', value:s} })(result4)
              : null;
            if (result3 !== null) {
              var result0 = result3;
            } else {
              var result2 = parse_STRING_LITERAL_LONG2(context);
              var result1 = result2 !== null
                ? (function(s) { return {token:'string', value:s} })(result2)
                : null;
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[118] String");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_IRIref(context) {
        var cacheKey = "IRIref" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var result4 = parse_IRI_REF(context);
        var result3 = result4 !== null
          ? (function(iri) { return {token: 'uri', prefix:null, suffix:null, value:iri} })(result4)
          : null;
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_PrefixedName(context);
          var result1 = result2 !== null
            ? (function(p) { return p })(result2)
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[119] IRIref");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_PrefixedName(context) {
        var cacheKey = "PrefixedName" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var result4 = parse_PNAME_LN(context);
        var result3 = result4 !== null
          ? (function(p) { return {token: 'uri', prefix:p[0], suffix:p[1], value:null } })(result4)
          : null;
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_PNAME_NS(context);
          var result1 = result2 !== null
            ? (function(p) { return {token: 'uri', prefix:p, suffix:'', value:null } })(result2)
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[120] PrefixedName");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_BlankNode(context) {
        var cacheKey = "BlankNode" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var result4 = parse_BLANK_NODE_LABEL(context);
        var result3 = result4 !== null
          ? (function(l) { return {token:'blank', label:l}})(result4)
          : null;
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_ANON(context);
          var result1 = result2 !== null
            ? (function() { GlobalBlankNodeCounter++; return {token:'blank', label:''+GlobalBlankNodeCounter} })()
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[121] BlankNode");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_IRI_REF(context) {
        var cacheKey = "IRI_REF" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "<") {
          var result2 = "<";
          pos += 1;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("<"));
          }
        }
        if (result2 !== null) {
          var result3 = [];
          if (input.substr(pos).match(/^[^<>"{} | ^\\ | S]/) !== null) {
            var result5 = input.charAt(pos);
            pos++;
          } else {
            var result5 = null;
            if (context.reportMatchFailures) {
              matchFailed("[^<>\"{} | ^\\\\ | S]");
            }
          }
          while (result5 !== null) {
            result3.push(result5);
            if (input.substr(pos).match(/^[^<>"{} | ^\\ | S]/) !== null) {
              var result5 = input.charAt(pos);
              pos++;
            } else {
              var result5 = null;
              if (context.reportMatchFailures) {
                matchFailed("[^<>\"{} | ^\\\\ | S]");
              }
            }
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === ">") {
              var result4 = ">";
              pos += 1;
            } else {
              var result4 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString(">"));
              }
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(iri_ref) { return iri_ref.join('') })(result1[1])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[122] IRI_REF");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_PNAME_NS(context) {
        var cacheKey = "PNAME_NS" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        var result4 = parse_PN_PREFIX(context);
        var result2 = result4 !== null ? result4 : '';
        if (result2 !== null) {
          if (input.substr(pos, 1) === ":") {
            var result3 = ":";
            pos += 1;
          } else {
            var result3 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString(":"));
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(p) { return p })(result1[0])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[123] PNAME_NS");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_PNAME_LN(context) {
        var cacheKey = "PNAME_LN" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = parse_PNAME_NS(context);
        if (result2 !== null) {
          var result3 = parse_PN_LOCAL(context);
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(p, s) { return [p, s] })(result1[0], result1[1])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[124] PNAME_LN");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_BLANK_NODE_LABEL(context) {
        var cacheKey = "BLANK_NODE_LABEL" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 2) === "_:") {
          var result2 = "_:";
          pos += 2;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("_:"));
          }
        }
        if (result2 !== null) {
          var result3 = parse_PN_LOCAL(context);
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(l) { return l })(result1[1])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[125] BLANK_NODE_LABEL");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_LANGTAG(context) {
        var cacheKey = "LANGTAG" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "@") {
          var result2 = "@";
          pos += 1;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("@"));
          }
        }
        if (result2 !== null) {
          if (input.substr(pos).match(/^[a-zA-Z]/) !== null) {
            var result9 = input.charAt(pos);
            pos++;
          } else {
            var result9 = null;
            if (context.reportMatchFailures) {
              matchFailed("[a-zA-Z]");
            }
          }
          if (result9 !== null) {
            var result3 = [];
            while (result9 !== null) {
              result3.push(result9);
              if (input.substr(pos).match(/^[a-zA-Z]/) !== null) {
                var result9 = input.charAt(pos);
                pos++;
              } else {
                var result9 = null;
                if (context.reportMatchFailures) {
                  matchFailed("[a-zA-Z]");
                }
              }
            }
          } else {
            var result3 = null;
          }
          if (result3 !== null) {
            var result4 = [];
            var savedPos1 = pos;
            if (input.substr(pos, 1) === "-") {
              var result6 = "-";
              pos += 1;
            } else {
              var result6 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("-"));
              }
            }
            if (result6 !== null) {
              if (input.substr(pos).match(/^[a-zA-Z0-9]/) !== null) {
                var result8 = input.charAt(pos);
                pos++;
              } else {
                var result8 = null;
                if (context.reportMatchFailures) {
                  matchFailed("[a-zA-Z0-9]");
                }
              }
              if (result8 !== null) {
                var result7 = [];
                while (result8 !== null) {
                  result7.push(result8);
                  if (input.substr(pos).match(/^[a-zA-Z0-9]/) !== null) {
                    var result8 = input.charAt(pos);
                    pos++;
                  } else {
                    var result8 = null;
                    if (context.reportMatchFailures) {
                      matchFailed("[a-zA-Z0-9]");
                    }
                  }
                }
              } else {
                var result7 = null;
              }
              if (result7 !== null) {
                var result5 = [result6, result7];
              } else {
                var result5 = null;
                pos = savedPos1;
              }
            } else {
              var result5 = null;
              pos = savedPos1;
            }
            while (result5 !== null) {
              result4.push(result5);
              var savedPos1 = pos;
              if (input.substr(pos, 1) === "-") {
                var result6 = "-";
                pos += 1;
              } else {
                var result6 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("-"));
                }
              }
              if (result6 !== null) {
                if (input.substr(pos).match(/^[a-zA-Z0-9]/) !== null) {
                  var result8 = input.charAt(pos);
                  pos++;
                } else {
                  var result8 = null;
                  if (context.reportMatchFailures) {
                    matchFailed("[a-zA-Z0-9]");
                  }
                }
                if (result8 !== null) {
                  var result7 = [];
                  while (result8 !== null) {
                    result7.push(result8);
                    if (input.substr(pos).match(/^[a-zA-Z0-9]/) !== null) {
                      var result8 = input.charAt(pos);
                      pos++;
                    } else {
                      var result8 = null;
                      if (context.reportMatchFailures) {
                        matchFailed("[a-zA-Z0-9]");
                      }
                    }
                  }
                } else {
                  var result7 = null;
                }
                if (result7 !== null) {
                  var result5 = [result6, result7];
                } else {
                  var result5 = null;
                  pos = savedPos1;
                }
              } else {
                var result5 = null;
                pos = savedPos1;
              }
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(a, b) {

                if(b.length===0) {
                    return "@"+a.join('');
                } else {
                    return "@"+a.join('')+"-"+b[0][1].join('');
                }
          })(result1[1], result1[2])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[128] LANGTAG");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_INTEGER(context) {
        var cacheKey = "INTEGER" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        if (input.substr(pos).match(/^[0-9]/) !== null) {
          var result2 = input.charAt(pos);
          pos++;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed("[0-9]");
          }
        }
        if (result2 !== null) {
          var result1 = [];
          while (result2 !== null) {
            result1.push(result2);
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result2 = input.charAt(pos);
              pos++;
            } else {
              var result2 = null;
              if (context.reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          var result1 = null;
        }
        var result0 = result1 !== null
          ? (function(d) {
                lit = {};
                lit.token = "literal";
                lit.lang = null;
                lit.type = "http://www.w3.org/2001/XMLSchema#integer";
                lit.value = flattenString(d);
                return lit;
          })(result1)
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[129] INTEGER");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_DECIMAL(context) {
        var cacheKey = "DECIMAL" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos1 = pos;
        if (input.substr(pos).match(/^[0-9]/) !== null) {
          var result12 = input.charAt(pos);
          pos++;
        } else {
          var result12 = null;
          if (context.reportMatchFailures) {
            matchFailed("[0-9]");
          }
        }
        if (result12 !== null) {
          var result8 = [];
          while (result12 !== null) {
            result8.push(result12);
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result12 = input.charAt(pos);
              pos++;
            } else {
              var result12 = null;
              if (context.reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          var result8 = null;
        }
        if (result8 !== null) {
          if (input.substr(pos, 1) === ".") {
            var result9 = ".";
            pos += 1;
          } else {
            var result9 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("."));
            }
          }
          if (result9 !== null) {
            var result10 = [];
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result11 = input.charAt(pos);
              pos++;
            } else {
              var result11 = null;
              if (context.reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
            while (result11 !== null) {
              result10.push(result11);
              if (input.substr(pos).match(/^[0-9]/) !== null) {
                var result11 = input.charAt(pos);
                pos++;
              } else {
                var result11 = null;
                if (context.reportMatchFailures) {
                  matchFailed("[0-9]");
                }
              }
            }
            if (result10 !== null) {
              var result7 = [result8, result9, result10];
            } else {
              var result7 = null;
              pos = savedPos1;
            }
          } else {
            var result7 = null;
            pos = savedPos1;
          }
        } else {
          var result7 = null;
          pos = savedPos1;
        }
        var result6 = result7 !== null
          ? (function(a, b, c) {

                lit = {};
                lit.token = "literal";
                lit.lang = null;
                lit.type = "http://www.w3.org/2001/XMLSchema#decimal";
                lit.value = eval(flattenString([a,b,c]));
                return lit;
          })(result7[0], result7[1], result7[2])
          : null;
        if (result6 !== null) {
          var result0 = result6;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 1) === ".") {
            var result3 = ".";
            pos += 1;
          } else {
            var result3 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("."));
            }
          }
          if (result3 !== null) {
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result5 = input.charAt(pos);
              pos++;
            } else {
              var result5 = null;
              if (context.reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
            if (result5 !== null) {
              var result4 = [];
              while (result5 !== null) {
                result4.push(result5);
                if (input.substr(pos).match(/^[0-9]/) !== null) {
                  var result5 = input.charAt(pos);
                  pos++;
                } else {
                  var result5 = null;
                  if (context.reportMatchFailures) {
                    matchFailed("[0-9]");
                  }
                }
              }
            } else {
              var result4 = null;
            }
            if (result4 !== null) {
              var result2 = [result3, result4];
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          var result1 = result2 !== null
            ? (function(a, b) {
                  lit = {};
                  lit.token = "literal";
                  lit.lang = null;
                  lit.type = "http://www.w3.org/2001/XMLSchema#decimal";
                  lit.value = eval(flattenString([a,b]));
                  return lit;
             })(result2[0], result2[1])
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[130] DECIMAL");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_DOUBLE(context) {
        var cacheKey = "DOUBLE" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos2 = pos;
        if (input.substr(pos).match(/^[0-9]/) !== null) {
          var result19 = input.charAt(pos);
          pos++;
        } else {
          var result19 = null;
          if (context.reportMatchFailures) {
            matchFailed("[0-9]");
          }
        }
        if (result19 !== null) {
          var result14 = [];
          while (result19 !== null) {
            result14.push(result19);
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result19 = input.charAt(pos);
              pos++;
            } else {
              var result19 = null;
              if (context.reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          var result14 = null;
        }
        if (result14 !== null) {
          if (input.substr(pos, 1) === ".") {
            var result15 = ".";
            pos += 1;
          } else {
            var result15 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("."));
            }
          }
          if (result15 !== null) {
            var result16 = [];
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result18 = input.charAt(pos);
              pos++;
            } else {
              var result18 = null;
              if (context.reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
            while (result18 !== null) {
              result16.push(result18);
              if (input.substr(pos).match(/^[0-9]/) !== null) {
                var result18 = input.charAt(pos);
                pos++;
              } else {
                var result18 = null;
                if (context.reportMatchFailures) {
                  matchFailed("[0-9]");
                }
              }
            }
            if (result16 !== null) {
              var result17 = parse_EXPONENT(context);
              if (result17 !== null) {
                var result13 = [result14, result15, result16, result17];
              } else {
                var result13 = null;
                pos = savedPos2;
              }
            } else {
              var result13 = null;
              pos = savedPos2;
            }
          } else {
            var result13 = null;
            pos = savedPos2;
          }
        } else {
          var result13 = null;
          pos = savedPos2;
        }
        var result12 = result13 !== null
          ? (function(a, b, c, e) {
                lit = {};
                lit.token = "literal";
                lit.lang = null;
                lit.type = "http://www.w3.org/2001/XMLSchema#double";
                lit.value = eval(flattenString([a,b,c,e]));
                return lit;
          })(result13[0], result13[1], result13[2], result13[3])
          : null;
        if (result12 !== null) {
          var result0 = result12;
        } else {
          var savedPos1 = pos;
          if (input.substr(pos, 1) === ".") {
            var result8 = ".";
            pos += 1;
          } else {
            var result8 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("."));
            }
          }
          if (result8 !== null) {
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result11 = input.charAt(pos);
              pos++;
            } else {
              var result11 = null;
              if (context.reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
            if (result11 !== null) {
              var result9 = [];
              while (result11 !== null) {
                result9.push(result11);
                if (input.substr(pos).match(/^[0-9]/) !== null) {
                  var result11 = input.charAt(pos);
                  pos++;
                } else {
                  var result11 = null;
                  if (context.reportMatchFailures) {
                    matchFailed("[0-9]");
                  }
                }
              }
            } else {
              var result9 = null;
            }
            if (result9 !== null) {
              var result10 = parse_EXPONENT(context);
              if (result10 !== null) {
                var result7 = [result8, result9, result10];
              } else {
                var result7 = null;
                pos = savedPos1;
              }
            } else {
              var result7 = null;
              pos = savedPos1;
            }
          } else {
            var result7 = null;
            pos = savedPos1;
          }
          var result6 = result7 !== null
            ? (function(a, b, c) {
                  lit = {};
                  lit.token = "literal";
                  lit.lang = null;
                  lit.type = "http://www.w3.org/2001/XMLSchema#double";
                  lit.value = eval(flattenString([a,b,c]));
                  return lit;
            })(result7[0], result7[1], result7[2])
            : null;
          if (result6 !== null) {
            var result0 = result6;
          } else {
            var savedPos0 = pos;
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result5 = input.charAt(pos);
              pos++;
            } else {
              var result5 = null;
              if (context.reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
            if (result5 !== null) {
              var result3 = [];
              while (result5 !== null) {
                result3.push(result5);
                if (input.substr(pos).match(/^[0-9]/) !== null) {
                  var result5 = input.charAt(pos);
                  pos++;
                } else {
                  var result5 = null;
                  if (context.reportMatchFailures) {
                    matchFailed("[0-9]");
                  }
                }
              }
            } else {
              var result3 = null;
            }
            if (result3 !== null) {
              var result4 = parse_EXPONENT(context);
              if (result4 !== null) {
                var result2 = [result3, result4];
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
            var result1 = result2 !== null
              ? (function(a, b) {
                    lit = {};
                    lit.token = "literal";
                    lit.lang = null;
                    lit.type = "http://www.w3.org/2001/XMLSchema#double";
                    lit.value = eval(flattenString([a,b]));
                    return lit;
              })(result2[0], result2[1])
              : null;
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[131] DOUBLE");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_INTEGER_POSITIVE(context) {
        var cacheKey = "INTEGER_POSITIVE" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "+") {
          var result2 = "+";
          pos += 1;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("+"));
          }
        }
        if (result2 !== null) {
          var result3 = parse_INTEGER(context);
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(d) { return d; })(result1[1])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[132] INTEGER_POSITIVE");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_DECIMAL_POSITIVE(context) {
        var cacheKey = "DECIMAL_POSITIVE" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "+") {
          var result2 = "+";
          pos += 1;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("+"));
          }
        }
        if (result2 !== null) {
          var result3 = parse_DECIMAL(context);
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(d) { return d })(result1[1])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[133] DECIMAL_POSITIVE");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_DOUBLE_POSITIVE(context) {
        var cacheKey = "DOUBLE_POSITIVE" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "+") {
          var result2 = "+";
          pos += 1;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("+"));
          }
        }
        if (result2 !== null) {
          var result3 = parse_DOUBLE(context);
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(d) { return d })(result1[1])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[134] DOUBLE_POSITIVE");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_INTEGER_NEGATIVE(context) {
        var cacheKey = "INTEGER_NEGATIVE" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "-") {
          var result2 = "-";
          pos += 1;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("-"));
          }
        }
        if (result2 !== null) {
          var result3 = parse_INTEGER(context);
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(d) { d.value = - d.value; return d; })(result1[1])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[135] INTEGER_NEGATIVE");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_DECIMAL_NEGATIVE(context) {
        var cacheKey = "DECIMAL_NEGATIVE" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "-") {
          var result2 = "-";
          pos += 1;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("-"));
          }
        }
        if (result2 !== null) {
          var result3 = parse_DECIMAL(context);
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(d) { d.value = - d.value; return d; })(result1[1])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[136] DECIMAL_NEGATIVE");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_DOUBLE_NEGATIVE(context) {
        var cacheKey = "DOUBLE_NEGATIVE" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "-") {
          var result2 = "-";
          pos += 1;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("-"));
          }
        }
        if (result2 !== null) {
          var result3 = parse_DOUBLE(context);
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(d) { d.value = - d.value; return d; })(result1[1])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[137] DOUBLE_NEGATIVE");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_EXPONENT(context) {
        var cacheKey = "EXPONENT" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[eE]/) !== null) {
          var result2 = input.charAt(pos);
          pos++;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed("[eE]");
          }
        }
        if (result2 !== null) {
          if (input.substr(pos).match(/^[+\-]/) !== null) {
            var result6 = input.charAt(pos);
            pos++;
          } else {
            var result6 = null;
            if (context.reportMatchFailures) {
              matchFailed("[+\\-]");
            }
          }
          var result3 = result6 !== null ? result6 : '';
          if (result3 !== null) {
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result5 = input.charAt(pos);
              pos++;
            } else {
              var result5 = null;
              if (context.reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
            if (result5 !== null) {
              var result4 = [];
              while (result5 !== null) {
                result4.push(result5);
                if (input.substr(pos).match(/^[0-9]/) !== null) {
                  var result5 = input.charAt(pos);
                  pos++;
                } else {
                  var result5 = null;
                  if (context.reportMatchFailures) {
                    matchFailed("[0-9]");
                  }
                }
              }
            } else {
              var result4 = null;
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(a, b, c) { return flattenString([a,b,c]) })(result1[0], result1[1], result1[2])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[138] EXPONENT");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_STRING_LITERAL1(context) {
        var cacheKey = "STRING_LITERAL1" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "'") {
          var result2 = "'";
          pos += 1;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("'"));
          }
        }
        if (result2 !== null) {
          var result3 = [];
          if (input.substr(pos).match(/^[^'\\\n\r]/) !== null) {
            var result7 = input.charAt(pos);
            pos++;
          } else {
            var result7 = null;
            if (context.reportMatchFailures) {
              matchFailed("[^'\\\\\\n\\r]");
            }
          }
          if (result7 !== null) {
            var result5 = result7;
          } else {
            var result6 = parse_ECHAR(context);
            if (result6 !== null) {
              var result5 = result6;
            } else {
              var result5 = null;;
            };
          }
          while (result5 !== null) {
            result3.push(result5);
            if (input.substr(pos).match(/^[^'\\\n\r]/) !== null) {
              var result7 = input.charAt(pos);
              pos++;
            } else {
              var result7 = null;
              if (context.reportMatchFailures) {
                matchFailed("[^'\\\\\\n\\r]");
              }
            }
            if (result7 !== null) {
              var result5 = result7;
            } else {
              var result6 = parse_ECHAR(context);
              if (result6 !== null) {
                var result5 = result6;
              } else {
                var result5 = null;;
              };
            }
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === "'") {
              var result4 = "'";
              pos += 1;
            } else {
              var result4 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("'"));
              }
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(content) { return flattenString(content) })(result1[1])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[139] STRING_LITERAL1");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_STRING_LITERAL2(context) {
        var cacheKey = "STRING_LITERAL2" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "\"") {
          var result2 = "\"";
          pos += 1;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("\""));
          }
        }
        if (result2 !== null) {
          var result3 = [];
          if (input.substr(pos).match(/^[^"\\\n\r]/) !== null) {
            var result7 = input.charAt(pos);
            pos++;
          } else {
            var result7 = null;
            if (context.reportMatchFailures) {
              matchFailed("[^\"\\\\\\n\\r]");
            }
          }
          if (result7 !== null) {
            var result5 = result7;
          } else {
            var result6 = parse_ECHAR(context);
            if (result6 !== null) {
              var result5 = result6;
            } else {
              var result5 = null;;
            };
          }
          while (result5 !== null) {
            result3.push(result5);
            if (input.substr(pos).match(/^[^"\\\n\r]/) !== null) {
              var result7 = input.charAt(pos);
              pos++;
            } else {
              var result7 = null;
              if (context.reportMatchFailures) {
                matchFailed("[^\"\\\\\\n\\r]");
              }
            }
            if (result7 !== null) {
              var result5 = result7;
            } else {
              var result6 = parse_ECHAR(context);
              if (result6 !== null) {
                var result5 = result6;
              } else {
                var result5 = null;;
              };
            }
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === "\"") {
              var result4 = "\"";
              pos += 1;
            } else {
              var result4 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("\""));
              }
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(content) { return flattenString(content) })(result1[1])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[140] STRING_LITERAL2");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_STRING_LITERAL_LONG1(context) {
        var cacheKey = "STRING_LITERAL_LONG1" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 0) === "") {
          var result2 = "";
          pos += 0;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString(""));
          }
        }
        if (result2 !== null) {
          if (input.substr(pos, 0) === "") {
            var result3 = "";
            pos += 0;
          } else {
            var result3 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString(""));
            }
          }
          if (result3 !== null) {
            if (input.substr(pos, 26) === " content:([^'\\] / ECHAR)* ") {
              var result4 = " content:([^'\\] / ECHAR)* ";
              pos += 26;
            } else {
              var result4 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString(" content:([^'\\] / ECHAR)* "));
              }
            }
            if (result4 !== null) {
              if (input.substr(pos, 0) === "") {
                var result5 = "";
                pos += 0;
              } else {
                var result5 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString(""));
                }
              }
              if (result5 !== null) {
                if (input.substr(pos, 0) === "") {
                  var result6 = "";
                  pos += 0;
                } else {
                  var result6 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString(""));
                  }
                }
                if (result6 !== null) {
                  var result1 = [result2, result3, result4, result5, result6];
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function() { return flattenString(content) })()
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[141] STRING_LITERAL_LONG1");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_STRING_LITERAL_LONG2(context) {
        var cacheKey = "STRING_LITERAL_LONG2" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 3) === "\"\"\"") {
          var result2 = "\"\"\"";
          pos += 3;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("\"\"\""));
          }
        }
        if (result2 !== null) {
          var result3 = [];
          if (input.substr(pos).match(/^[^"\\]/) !== null) {
            var result7 = input.charAt(pos);
            pos++;
          } else {
            var result7 = null;
            if (context.reportMatchFailures) {
              matchFailed("[^\"\\\\]");
            }
          }
          if (result7 !== null) {
            var result5 = result7;
          } else {
            var result6 = parse_ECHAR(context);
            if (result6 !== null) {
              var result5 = result6;
            } else {
              var result5 = null;;
            };
          }
          while (result5 !== null) {
            result3.push(result5);
            if (input.substr(pos).match(/^[^"\\]/) !== null) {
              var result7 = input.charAt(pos);
              pos++;
            } else {
              var result7 = null;
              if (context.reportMatchFailures) {
                matchFailed("[^\"\\\\]");
              }
            }
            if (result7 !== null) {
              var result5 = result7;
            } else {
              var result6 = parse_ECHAR(context);
              if (result6 !== null) {
                var result5 = result6;
              } else {
                var result5 = null;;
              };
            }
          }
          if (result3 !== null) {
            if (input.substr(pos, 3) === "\"\"\"") {
              var result4 = "\"\"\"";
              pos += 3;
            } else {
              var result4 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("\"\"\""));
              }
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(content) { return flattenString(content) })(result1[1])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[142] STRING_LITERAL_LONG2");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_ECHAR(context) {
        var cacheKey = "ECHAR" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "\\") {
          var result1 = "\\";
          pos += 1;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("\\"));
          }
        }
        if (result1 !== null) {
          if (input.substr(pos).match(/^[tbnrf"']/) !== null) {
            var result2 = input.charAt(pos);
            pos++;
          } else {
            var result2 = null;
            if (context.reportMatchFailures) {
              matchFailed("[tbnrf\"']");
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[143] ECHAR");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_NIL(context) {
        var cacheKey = "NIL" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "(") {
          var result1 = "(";
          pos += 1;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("("));
          }
        }
        if (result1 !== null) {
          var result2 = [];
          var result4 = parse_WS(context);
          while (result4 !== null) {
            result2.push(result4);
            var result4 = parse_WS(context);
          }
          if (result2 !== null) {
            if (input.substr(pos, 1) === ")") {
              var result3 = ")";
              pos += 1;
            } else {
              var result3 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString(")"));
              }
            }
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[144] NIL");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_WS(context) {
        var cacheKey = "WS" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        if (input.substr(pos).match(/^[ ]/) !== null) {
          var result5 = input.charAt(pos);
          pos++;
        } else {
          var result5 = null;
          if (context.reportMatchFailures) {
            matchFailed("[ ]");
          }
        }
        if (result5 !== null) {
          var result0 = result5;
        } else {
          if (input.substr(pos).match(/^[	]/) !== null) {
            var result4 = input.charAt(pos);
            pos++;
          } else {
            var result4 = null;
            if (context.reportMatchFailures) {
              matchFailed("[	]");
            }
          }
          if (result4 !== null) {
            var result0 = result4;
          } else {
            if (input.substr(pos).match(/^[\r]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (context.reportMatchFailures) {
                matchFailed("[\\r]");
              }
            }
            if (result3 !== null) {
              var result0 = result3;
            } else {
              if (input.substr(pos).match(/^[\n]/) !== null) {
                var result2 = input.charAt(pos);
                pos++;
              } else {
                var result2 = null;
                if (context.reportMatchFailures) {
                  matchFailed("[\\n]");
                }
              }
              if (result2 !== null) {
                var result0 = result2;
              } else {
                var result1 = parse_comment(context);
                if (result1 !== null) {
                  var result0 = result1;
                } else {
                  var result0 = null;;
                };
              };
            };
          };
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[145] WS");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_comment(context) {
        var cacheKey = "comment" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 1) === "#") {
          var result1 = "#";
          pos += 1;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("#"));
          }
        }
        if (result1 !== null) {
          var result2 = [];
          if (input.substr(pos).match(/^[^\n\r]/) !== null) {
            var result3 = input.charAt(pos);
            pos++;
          } else {
            var result3 = null;
            if (context.reportMatchFailures) {
              matchFailed("[^\\n\\r]");
            }
          }
          while (result3 !== null) {
            result2.push(result3);
            if (input.substr(pos).match(/^[^\n\r]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (context.reportMatchFailures) {
                matchFailed("[^\\n\\r]");
              }
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_ANON(context) {
        var cacheKey = "ANON" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "[") {
          var result1 = "[";
          pos += 1;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("["));
          }
        }
        if (result1 !== null) {
          var result2 = [];
          var result4 = parse_WS(context);
          while (result4 !== null) {
            result2.push(result4);
            var result4 = parse_WS(context);
          }
          if (result2 !== null) {
            if (input.substr(pos, 1) === "]") {
              var result3 = "]";
              pos += 1;
            } else {
              var result3 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("]"));
              }
            }
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[146] ANON");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_PN_CHARS_BASE(context) {
        var cacheKey = "PN_CHARS_BASE" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        if (input.substr(pos).match(/^[A-Z]/) !== null) {
          var result14 = input.charAt(pos);
          pos++;
        } else {
          var result14 = null;
          if (context.reportMatchFailures) {
            matchFailed("[A-Z]");
          }
        }
        if (result14 !== null) {
          var result0 = result14;
        } else {
          if (input.substr(pos).match(/^[a-z]/) !== null) {
            var result13 = input.charAt(pos);
            pos++;
          } else {
            var result13 = null;
            if (context.reportMatchFailures) {
              matchFailed("[a-z]");
            }
          }
          if (result13 !== null) {
            var result0 = result13;
          } else {
            if (input.substr(pos).match(/^[\xC0-\xD6]/) !== null) {
              var result12 = input.charAt(pos);
              pos++;
            } else {
              var result12 = null;
              if (context.reportMatchFailures) {
                matchFailed("[\\xC0-\\xD6]");
              }
            }
            if (result12 !== null) {
              var result0 = result12;
            } else {
              if (input.substr(pos).match(/^[\xD8-\xF6]/) !== null) {
                var result11 = input.charAt(pos);
                pos++;
              } else {
                var result11 = null;
                if (context.reportMatchFailures) {
                  matchFailed("[\\xD8-\\xF6]");
                }
              }
              if (result11 !== null) {
                var result0 = result11;
              } else {
                if (input.substr(pos).match(/^[\xF8-\u02FF]/) !== null) {
                  var result10 = input.charAt(pos);
                  pos++;
                } else {
                  var result10 = null;
                  if (context.reportMatchFailures) {
                    matchFailed("[\\xF8-\\u02FF]");
                  }
                }
                if (result10 !== null) {
                  var result0 = result10;
                } else {
                  if (input.substr(pos).match(/^[\u0370-\u037D]/) !== null) {
                    var result9 = input.charAt(pos);
                    pos++;
                  } else {
                    var result9 = null;
                    if (context.reportMatchFailures) {
                      matchFailed("[\\u0370-\\u037D]");
                    }
                  }
                  if (result9 !== null) {
                    var result0 = result9;
                  } else {
                    if (input.substr(pos).match(/^[\u037F-\u1FFF]/) !== null) {
                      var result8 = input.charAt(pos);
                      pos++;
                    } else {
                      var result8 = null;
                      if (context.reportMatchFailures) {
                        matchFailed("[\\u037F-\\u1FFF]");
                      }
                    }
                    if (result8 !== null) {
                      var result0 = result8;
                    } else {
                      if (input.substr(pos).match(/^[\u200C-\u200D]/) !== null) {
                        var result7 = input.charAt(pos);
                        pos++;
                      } else {
                        var result7 = null;
                        if (context.reportMatchFailures) {
                          matchFailed("[\\u200C-\\u200D]");
                        }
                      }
                      if (result7 !== null) {
                        var result0 = result7;
                      } else {
                        if (input.substr(pos).match(/^[\u2070-\u218F]/) !== null) {
                          var result6 = input.charAt(pos);
                          pos++;
                        } else {
                          var result6 = null;
                          if (context.reportMatchFailures) {
                            matchFailed("[\\u2070-\\u218F]");
                          }
                        }
                        if (result6 !== null) {
                          var result0 = result6;
                        } else {
                          if (input.substr(pos).match(/^[\u2C00-\u2FEF]/) !== null) {
                            var result5 = input.charAt(pos);
                            pos++;
                          } else {
                            var result5 = null;
                            if (context.reportMatchFailures) {
                              matchFailed("[\\u2C00-\\u2FEF]");
                            }
                          }
                          if (result5 !== null) {
                            var result0 = result5;
                          } else {
                            if (input.substr(pos).match(/^[\u3001-\uD7FF]/) !== null) {
                              var result4 = input.charAt(pos);
                              pos++;
                            } else {
                              var result4 = null;
                              if (context.reportMatchFailures) {
                                matchFailed("[\\u3001-\\uD7FF]");
                              }
                            }
                            if (result4 !== null) {
                              var result0 = result4;
                            } else {
                              if (input.substr(pos).match(/^[\uF900-\uFDCF]/) !== null) {
                                var result3 = input.charAt(pos);
                                pos++;
                              } else {
                                var result3 = null;
                                if (context.reportMatchFailures) {
                                  matchFailed("[\\uF900-\\uFDCF]");
                                }
                              }
                              if (result3 !== null) {
                                var result0 = result3;
                              } else {
                                if (input.substr(pos).match(/^[\uFDF0-\uFFFD]/) !== null) {
                                  var result2 = input.charAt(pos);
                                  pos++;
                                } else {
                                  var result2 = null;
                                  if (context.reportMatchFailures) {
                                    matchFailed("[\\uFDF0-\\uFFFD]");
                                  }
                                }
                                if (result2 !== null) {
                                  var result0 = result2;
                                } else {
                                  if (input.substr(pos).match(/^[\u1000-\uEFFF]/) !== null) {
                                    var result1 = input.charAt(pos);
                                    pos++;
                                  } else {
                                    var result1 = null;
                                    if (context.reportMatchFailures) {
                                      matchFailed("[\\u1000-\\uEFFF]");
                                    }
                                  }
                                  if (result1 !== null) {
                                    var result0 = result1;
                                  } else {
                                    var result0 = null;;
                                  };
                                };
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[147] PN_CHARS_BASE");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_PN_CHARS_U(context) {
        var cacheKey = "PN_CHARS_U" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var result2 = parse_PN_CHARS_BASE(context);
        if (result2 !== null) {
          var result0 = result2;
        } else {
          if (input.substr(pos, 1) === "_") {
            var result1 = "_";
            pos += 1;
          } else {
            var result1 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("_"));
            }
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[148] PN_CHARS_U");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_PN_CHARS(context) {
        var cacheKey = "PN_CHARS" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var result6 = parse_PN_CHARS_U(context);
        if (result6 !== null) {
          var result0 = result6;
        } else {
          if (input.substr(pos, 1) === "-") {
            var result5 = "-";
            pos += 1;
          } else {
            var result5 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("-"));
            }
          }
          if (result5 !== null) {
            var result0 = result5;
          } else {
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result4 = input.charAt(pos);
              pos++;
            } else {
              var result4 = null;
              if (context.reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
            if (result4 !== null) {
              var result0 = result4;
            } else {
              if (input.substr(pos).match(/^[\xB7]/) !== null) {
                var result3 = input.charAt(pos);
                pos++;
              } else {
                var result3 = null;
                if (context.reportMatchFailures) {
                  matchFailed("[\\xB7]");
                }
              }
              if (result3 !== null) {
                var result0 = result3;
              } else {
                if (input.substr(pos).match(/^[\u0300-\u036F]/) !== null) {
                  var result2 = input.charAt(pos);
                  pos++;
                } else {
                  var result2 = null;
                  if (context.reportMatchFailures) {
                    matchFailed("[\\u0300-\\u036F]");
                  }
                }
                if (result2 !== null) {
                  var result0 = result2;
                } else {
                  if (input.substr(pos).match(/^[\u203F-\u2040]/) !== null) {
                    var result1 = input.charAt(pos);
                    pos++;
                  } else {
                    var result1 = null;
                    if (context.reportMatchFailures) {
                      matchFailed("[\\u203F-\\u2040]");
                    }
                  }
                  if (result1 !== null) {
                    var result0 = result1;
                  } else {
                    var result0 = null;;
                  };
                };
              };
            };
          };
        }
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[150] PN_CHARS");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_PN_PREFIX(context) {
        var cacheKey = "PN_PREFIX" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = parse_PN_CHARS_BASE(context);
        if (result2 !== null) {
          var result3 = [];
          var result6 = parse_PN_CHARS(context);
          if (result6 !== null) {
            var result4 = result6;
          } else {
            if (input.substr(pos, 1) === ".") {
              var result5 = ".";
              pos += 1;
            } else {
              var result5 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("."));
              }
            }
            if (result5 !== null) {
              var result4 = result5;
            } else {
              var result4 = null;;
            };
          }
          while (result4 !== null) {
            result3.push(result4);
            var result6 = parse_PN_CHARS(context);
            if (result6 !== null) {
              var result4 = result6;
            } else {
              if (input.substr(pos, 1) === ".") {
                var result5 = ".";
                pos += 1;
              } else {
                var result5 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("."));
                }
              }
              if (result5 !== null) {
                var result4 = result5;
              } else {
                var result4 = null;;
              };
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(base, rest) { if(rest[rest.length-1] == '.'){
                                                        	throw new Error("Wrong PN_PREFIX, cannot finish with '.'")
          					      } else {
          						  return base + rest.join('');
          					      }})(result1[0], result1[1])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[151] PN_PREFIX");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_PN_LOCAL(context) {
        var cacheKey = "PN_LOCAL" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var savedPos0 = pos;
        var result8 = parse_PN_CHARS_U(context);
        if (result8 !== null) {
          var result2 = result8;
        } else {
          if (input.substr(pos).match(/^[0-9]/) !== null) {
            var result7 = input.charAt(pos);
            pos++;
          } else {
            var result7 = null;
            if (context.reportMatchFailures) {
              matchFailed("[0-9]");
            }
          }
          if (result7 !== null) {
            var result2 = result7;
          } else {
            var result2 = null;;
          };
        }
        if (result2 !== null) {
          var result3 = [];
          var result6 = parse_PN_CHARS(context);
          if (result6 !== null) {
            var result4 = result6;
          } else {
            if (input.substr(pos, 1) === ".") {
              var result5 = ".";
              pos += 1;
            } else {
              var result5 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("."));
              }
            }
            if (result5 !== null) {
              var result4 = result5;
            } else {
              var result4 = null;;
            };
          }
          while (result4 !== null) {
            result3.push(result4);
            var result6 = parse_PN_CHARS(context);
            if (result6 !== null) {
              var result4 = result6;
            } else {
              if (input.substr(pos, 1) === ".") {
                var result5 = ".";
                pos += 1;
              } else {
                var result5 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("."));
                }
              }
              if (result5 !== null) {
                var result4 = result5;
              } else {
                var result4 = null;;
              };
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(base, rest) { if(rest[rest.length-1] == '.'){
                                                                 throw new Error("Wrong PN_LOCAL, cannot finish with '.'")
                                                               } else {
                                                                   return base + rest.join('');
                                                               }})(result1[0], result1[1])
          : null;
        context.reportMatchFailures = savedReportMatchFailures;
        if (context.reportMatchFailures && result0 === null) {
          matchFailed("[152] PN_LOCAL");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          switch (failuresExpected.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpected[0];
            default:
              failuresExpected.sort();
              return failuresExpected.slice(0, failuresExpected.length - 1).join(', ')
                + ' or '
                + failuresExpected[failuresExpected.length - 1];
          }
        }

        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quoteString(input.charAt(actualPos))
          : 'end of input';

        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }

      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */

        var line = 1;
        var column = 1;
        var seenCR = false;

        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }

        return { line: line, column: column };
      }



        var flattenString = function(arrs) {

            var acum ="";

            for(var i=0; i< arrs.length; i++) {

              if(typeof(arrs[i])==='string') {

                acum = acum + arrs[i];

              } else {

                acum = acum + arrs[i].join('');

              }

            }



            return acum;

        }





        var GlobalBlankNodeCounter = 0;



        var prefixes = {};



        var registerPrefix = function(prefix, uri) {

            prefixes[prefix] = uri;

        }



        var registerDefaultPrefix = function(uri) {

            prefixes[null] = uri;

        }



      var result = parse_turtleDoc({ reportMatchFailures: true });

      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }

      return result;
    },

    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };

  /* Thrown when a parser encounters a syntax error. */

  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };

  result.SyntaxError.prototype = Error.prototype;

  return result;
})();

turtle_doc = function(doc) {
    var result = "";
    try{
        result = JSON.stringify(turtle_parser.parse(doc));
    } catch (err) {
        result = err.message;
    }
    return result;
};
